{
	"info": {
		"_postman_id": "a8ca2c01-6e30-4cd8-8f71-cf2c5f408c4b",
		"name": "OM_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "FileNote",
			"item": [
				{
					"name": "Post_Create a File Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//global declaration\r",
									"var jsondata = pm.response.json();\r",
									"var conversionData;\r",
									"\r",
									"\r",
									"postman.setEnvironmentVariable(\"fileNote_id\", jsondata.id);\r",
									"console.log(\"dynamically \"+pm.variables.get(\"fileNote_id\"));\r",
									"// }else{\r",
									"//      pm.test(\"login credentials are not correct\");\r",
									"// }\r",
									"// jsondata=responseCode.code; \r",
									"//   console.log(\"We are getting 200 \" + typeof(responseCode.code));\r",
									"//   console.log(\"We are getting 200 here also \" + typeof(parseInt(pm.environment.get(\"responsestat_201\"))));\r",
									"\r",
									"// responseCode.code == parseInt(pm.environment.get(\"responsestat_201\"))\r",
									"//if response code is not 200 the remainning test cases should not execute\r",
									"if (responseCode.code == parseInt(pm.environment.get(\"responsestat_201\"))){\r",
									"\r",
									"    console.log(responseCode.code )\r",
									"////All the keys names in the JSON object\r",
									"var jsondataSchema=\r",
									"{\r",
									"    \"id\": \"337988\",\r",
									"    \"createdAt\": \"2020-04-03T12:34:45.397\",\r",
									"    \"lastModifiedAt\": \"2020-04-03T12:34:45.397\",\r",
									"    \"body\": \"Lorem ipsum...\",\r",
									"    \"authorInitials\": \"singre\",\r",
									"    \"typeId\": \"104\",\r",
									"    \"ccUserIds\": [\r",
									"        \"kulshi\"\r",
									"    ],\r",
									"    \"links\": [\r",
									"        {\r",
									"            \"href\": \"/assignments/26230\"\r",
									"        }\r",
									"    ]\r",
									"}  ;\r",
									"\r",
									"var rit= Object.keys(jsondataSchema);\r",
									"   \r",
									"console.log(\"All the keys in the JSON object are\" +Object.keys(jsondataSchema));\r",
									"console.log(\"The no of keys in the object are\" +rit.length);\r",
									"pm.test(\"The Number of keys in the JSON object\" +rit.length);\r",
									"pm.test(\"The keys in the JSON object are\" +Object.keys(jsondataSchema));\r",
									"\r",
									"//Check JSON Response body is not empty\r",
									"pm.test(\"Check JSON Response body is not empty\", function () {\r",
									"var jsondata = pm.response.json();\r",
									"// console.log(\"jsondata \"+jsondata);\r",
									"pm.expect(jsondata.length).to.not.eql(0);\r",
									"//console.log(typeof rit);\r",
									"//console.log(\"gggggggggg\" + rit);\r",
									"}); \r",
									"\r",
									"//............................................> static\r",
									"\r",
									"//count the elements\r",
									"\r",
									"\r",
									"// count number of objects in the JSON\r",
									"var jsondataBody=JSON.parse(responseBody);\r",
									"// rit=jsondata.value.length;\r",
									"var list = responseBody.length;\r",
									"var ritika=list.length;\r",
									"console.log(\"the no of key are\" +list);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Response time \r",
									"Responsetime= {\r",
									"    Responsetime_value:5000\r",
									"};\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(Responsetime.Responsetime_value);\r",
									"  //console.log(pm.response);\r",
									"});    \r",
									"if(pm.response.responseTime >= Responsetime.Responsetime_value){\r",
									"   pm.test(\"The API took more time than expected\");\r",
									"}\r",
									"else{\r",
									"    pm.test(\"The API  took time as expected\");\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//\r",
									"\r",
									"\r",
									"//Extract the request params in the URI\r",
									"// const paramsString = request.url.split('?')[1];\r",
									"// const eachParamArray = paramsString.split('&');\r",
									"// let params = {};\r",
									"// eachParamArray.forEach((param) => {\r",
									"//     const key = param.split('=')[0];\r",
									"//     const value = param.split('=')[1];\r",
									"//     Object.assign(params, {[key]: value});\r",
									"// });\r",
									"// console.log(params); \r",
									"\r",
									"//Verify the expiry header in the response\r",
									"pm.test(\"Expires is present\", function () {\r",
									"    jsondata=responseHeaders.hasOwnProperty(\"Expires\");\r",
									"    console.log('Type for the Expires headers', typeof jsondata);\r",
									"    \r",
									"});\r",
									"if(jsondata === true){\r",
									"console.log(pm.response.headers.get('Expires'));\r",
									"  }\r",
									"else{\r",
									"      console.log(\"Sorry No Expires header found in the response headers\");\r",
									"}\r",
									"\r",
									"\r",
									"schema= \r",
									"   \r",
									" {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModifiedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"body\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"authorInitials\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"typeId\": {\r",
									"      \"type\": \"string\",\r",
									"      \"description\": \"string\"\r",
									"    },\r",
									"    \"ccUserIds\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"description\": \"string\"\r",
									"    },\r",
									"    \"links\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"href\": {\r",
									"            \"type\": \"string\",\r",
									"            \"description\": \"string\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"href\"\r",
									"        ]\r",
									"      },\r",
									"      \"description\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"createdAt\",\r",
									"    \"lastModifiedAt\",\r",
									"    \"body\"\r",
									"  ]\r",
									"};\r",
									" \r",
									"\r",
									"// var schema = pm.environment.get(\"schema\");\r",
									"// pm.test(\"Expects response to match expected JSON Schema\", function() {\r",
									"//     pm.response.to.have.jsonSchema(schema);\r",
									"// });\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsondata = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsondata, schema)).to.be.false;\r",
									"// });\r",
									"pm.test(\"schema validation\", function(){\r",
									"    var result=tv4.validateResult(pm.response.json(),schema);\r",
									"    if(!result.valid){\r",
									"        console.log(\"..................\"+result);\r",
									"    }\r",
									"    pm.expect(result.valid).to.be.true;\r",
									"});\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        \r",
									"        switch(value.toLowerCase()) \r",
									"          {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"                break;  \r",
									"          \r",
									"      case \"number\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"} \r",
									"\r",
									"\r",
									"// var valData_response=jsondata;\r",
									"// console.log(\"valData_response**** \"+valData_response.length);\r",
									"// for (var j =0 ; j <valData_response.length ;j++){\r",
									"    \r",
									"    //*******Assertion of Key : Id FileNote******\r",
									"    var jsondata = pm.response.json();\r",
									"    pm.test(\"Assert Type of id FileNote\", function(){\r",
									"    var valId_response=pm.variables.get(\"fileNote_id\");\r",
									"    var valId_dataSheet=pm.variables.get(\"id_addFileNote\");\r",
									"    var typeOfId_dataSheet= typeof pm.variables.get(\"typeOfString\");\r",
									"    var typeOfId_response =typeof valId_response;\r",
									"    \r",
									"    console.log(\"type from response \"+typeof jsondata.id);\r",
									"    console.log(\"type from data \"+typeof pm.variables.get(\"typeOfString\") );\r",
									"    \r",
									"  \r",
									"    var testResult =  pm.expect(typeOfId_dataSheet).to.be.eql(typeOfId_response);\r",
									"   \r",
									"            \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of id FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valId_dataSheet) == typeof(valId_response)){\r",
									"    \r",
									"            pm.expect(valId_response).to.eql(valId_response); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valId_response,valId_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueId=conversionData;\r",
									"           pm.expect(valId_response).to.eql(valId_response);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"\r",
									"    // //*******Assertion of Key : CreatedAt FileNote******\r",
									"    // pm.test(\"Assert Type of createdAt FileNote\", function(){\r",
									"    // var valCreatedAt_response=jsondata.createdAt;\r",
									"    // var valCreatedAt_dataSheet=pm.variables.get(\"fileNotes_createdAt\");\r",
									"    // var typeOfCreatedAt_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    \r",
									"    \r",
									"   \r",
									"    // var testResult =  pm.expect(typeOfCreatedAt_dataSheet).to.be.eql(typeof valCreatedAt_response);\r",
									"          \r",
									"    // if(testResult)\r",
									"    // {\r",
									"    //     pm.test(\"Assert value of createdAt FileNote\", function()\r",
									"    //     {\r",
									"            \r",
									"    //       if(typeof(valCreatedAt_dataSheet) == typeof(valCreatedAt_response)){\r",
									"    \r",
									"    //         pm.expect(valCreatedAt_response).to.eql(valCreatedAt_dataSheet); \r",
									"              \r",
									"    //       }\r",
									"    \r",
									"    //       else\r",
									"    //       {\r",
									"    //         valCallBack(valCreatedAt_response,valCreatedAt_dataSheet, function(){});\r",
									"           \r",
									"    //        var ConValueCreatedAt=conversionData;\r",
									"    //        pm.expect(valCreatedAt_response).to.eql({current});      \r",
									"    //         }\r",
									"    //     });\r",
									"    // }\r",
									"    // else{ postman.setNextRequest();}\r",
									"    // });\r",
									"\r",
									"\r",
									"    // //*******Assertion of Key : LastModifiedAt FileNote******\r",
									"    // pm.test(\"Assert Type of lastModifiedAt FileNote\", function(){\r",
									"    // var valLastModifiedAt_response=jsondata.lastModifiedAt;\r",
									"    // var valLastModifiedAt_dataSheet=pm.variables.get(\"fileNotes_lastModifiedAt\");\r",
									"    // var typeOfLastModifiedAt_dataSheet= pm.variables.get(\"typeOf_lastModifiedAt\");\r",
									"    // var typeOfLastModifiedAt_response=typeof valLastModifiedAt_response;\r",
									"    \r",
									"    // if(valLastModifiedAt_response==null){\r",
									"    // typeOfLastModifiedAt_dataSheet=\"object\";\r",
									"    // var testResult =  pm.expect(typeOfLastModifiedAt_dataSheet).to.be.eql(typeof valLastModifiedAt_response);\r",
									"    // }else{\r",
									"    // var testResult =  pm.expect(typeOfLastModifiedAt_dataSheet).to.be.eql(typeof valLastModifiedAt_response);\r",
									"    // }\r",
									"            \r",
									"    // if(testResult)\r",
									"    // {\r",
									"    //     pm.test(\"Assert value of lastModifiedAt FileNote\", function()\r",
									"    //     {\r",
									"            \r",
									"    //       if(typeof(valLastModifiedAt_dataSheet) == typeof(valLastModifiedAt_response)){\r",
									"    \r",
									"    //         pm.expect(valLastModifiedAt_response).to.eql(valLastModifiedAt_dataSheet); \r",
									"              \r",
									"    //       }\r",
									"    \r",
									"    //       else\r",
									"    //       {\r",
									"    //         valCallBack(valLastModifiedAt_response,valLastModifiedAt_dataSheet, function(){});\r",
									"           \r",
									"    //        var ConValueLastModifiedAt=conversionData;\r",
									"    //        pm.expect(valLastModifiedAt_response).to.eql(ConValueLastModifiedAt);      \r",
									"    //         }\r",
									"    //     });\r",
									"    // }\r",
									"    // else{ postman.setNextRequest();}\r",
									"    // });\r",
									"\r",
									"    //*******Assertion of Key : Body FileNote******\r",
									"    pm.test(\"Assert Type of body FileNote\", function(){\r",
									"    var valBody_response=jsondata.body;\r",
									"    var valBody_dataSheet=pm.variables.get(\"fileNotes_body\");\r",
									"    var typeOfBody_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    var typeOfBody_response=typeof valBody_response;\r",
									"    \r",
									"   \r",
									"    \r",
									"    var testResult =  pm.expect(typeOfBody_dataSheet).to.be.eql(typeof valBody_response);\r",
									"   \r",
									"            \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of body FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valBody_dataSheet) == typeof(valBody_response)){\r",
									"    \r",
									"            pm.expect(valBody_response).to.eql(valBody_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valBody_response,valBody_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueBody=conversionData;\r",
									"           pm.expect(valBody_response).to.eql(ConValueBody);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"\r",
									"    //*******Assertion of Key : AuthorInitials FileNote******\r",
									"    pm.test(\"Assert Type of authorInitials FileNote\", function(){\r",
									"    var valAuthorInitials_response=jsondata.authorInitials;\r",
									"    var valAuthorInitials_dataSheet=pm.variables.get(\"fileNotes_authorInitials\");\r",
									"    var typeOfAuthorInitials_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    var typeOfAuthorInitials_response=typeof valAuthorInitials_response;\r",
									"    \r",
									"    \r",
									"    var testResult =  pm.expect(typeOfAuthorInitials_dataSheet).to.be.eql(typeof valAuthorInitials_response);\r",
									"       \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of authorInitials FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valAuthorInitials_dataSheet) == typeof(valAuthorInitials_response)){\r",
									"    \r",
									"            pm.expect(valAuthorInitials_response).to.eql(valAuthorInitials_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valAuthorInitials_response,valAuthorInitials_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueAuthorInitials=conversionData;\r",
									"           pm.expect(valAuthorInitials_response).to.eql(ConValueAuthorInitials);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"\r",
									"    //*******Assertion of Key : TypeId FileNote******\r",
									"    pm.test(\"Assert Type of typeId FileNote\", function(){\r",
									"    var valTypeId_response=jsondata.typeId;\r",
									"    var valTypeId_dataSheet=pm.variables.get(\"fileNotes_typeId\");\r",
									"    var typeOfTypeId_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    var typeOfTypeId_response=typeof valTypeId_response;\r",
									"    \r",
									"    \r",
									"    var testResult =  pm.expect(typeOfTypeId_dataSheet).to.be.eql(typeof valTypeId_response);\r",
									"   \r",
									"            \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of typeId FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valTypeId_dataSheet) == typeof(valTypeId_response)){\r",
									"    \r",
									"            pm.expect(valTypeId_response).to.eql(valTypeId_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valTypeId_response,valTypeId_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueTypeId=conversionData;\r",
									"           pm.expect(valTypeId_response).to.eql(ConValueTypeId);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"\r",
									"    //*******Assertion of Key : CcUserIds FileNote******\r",
									"    pm.test(\"Assert Type of ccUserIds FileNote\", function(){\r",
									"    var valCcUserIds_response=jsondata.ccUserIds[0];\r",
									"    var valCcUserIds_dataSheet=pm.variables.get(\"fileNotes_ccUserIds\");\r",
									"    var typeOfCcUserIds_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    var typeOfCcUserIds_response=typeof valCcUserIds_response;\r",
									"    \r",
									"    \r",
									"    var testResult =  pm.expect(typeOfCcUserIds_dataSheet).to.be.eql(typeof valCcUserIds_response);\r",
									"       \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of ccUserIds FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valCcUserIds_dataSheet) == typeof(valCcUserIds_response)){\r",
									"    \r",
									"            pm.expect(valCcUserIds_response).to.eql(valCcUserIds_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valCcUserIds_response,valCcUserIds_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueCcUserIds=conversionData;\r",
									"           pm.expect(valCcUserIds_response).to.eql(ConValueCcUserIds);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"    \r",
									"\r",
									"\r",
									"    //*******Assertion of Key : Links FileNote******\r",
									"    pm.test(\"Assert Type of links FileNote\", function(){\r",
									"    var valLinks_response=jsondata.links[0].href;\r",
									"    var valLinks_dataSheet=pm.variables.get(\"fileNotes_links_href\");\r",
									"    var typeOfLinks_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    var typeOfLinks_response=typeof valLinks_response;\r",
									"    console.log(\"valLinks_response*****\"+valLinks_response)\r",
									"    \r",
									"    var testResult =  pm.expect(typeOfLinks_dataSheet).to.be.eql(typeof valLinks_response);\r",
									"   \r",
									"            \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of links FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valLinks_dataSheet) == typeof(valLinks_response)){\r",
									"    \r",
									"            pm.expect(valLinks_response).to.eql(valLinks_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valLinks_response,valLinks_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueLinks=conversionData;\r",
									"           pm.expect(valLinks_response).to.eql(ConValueLinks);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									"//4th test case\r",
									"pm.test(\"Check if response contains all provided keys\", function () {\r",
									"     pm.expect({\r",
									"    \r",
									"        \"error\": 0,\r",
									"        \"message\": null,\r",
									"        \"warnings\": null,\r",
									"        \"processingTimeMs\": 112\r",
									"    }).to.have.all.keys( 'error' , 'message' ,'warnings', 'processingTimeMs');\r",
									"    });\r",
									"    \r",
									"//5th test case(check all the keys are there in the response)\r",
									"jsondata=\r",
									"   \r",
									"{\r",
									"    \"id\": \"337988\",\r",
									"    \"createdAt\": \"2020-04-03T12:34:45.397\",\r",
									"    \"lastModifiedAt\": \"2020-04-03T12:34:45.397\",\r",
									"    \"body\": \"Lorem ipsum...\",\r",
									"    \"authorInitials\": \"singre\",\r",
									"    \"typeId\": \"104\",\r",
									"    \"ccUserIds\": [\r",
									"        \"kulshi\"\r",
									"    ],\r",
									"    \"links\": [\r",
									"        {\r",
									"            \"href\": \"/assignments/26230\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"var rit= Object.keys(jsondata);\r",
									"   \r",
									"console.log(\"All the keys in the JSON object are\" +Object.keys(jsondata));\r",
									"console.log(\"The no of keys in the object are\" +rit.length);\r",
									"pm.test(\"The Number of keys in the JSON object\" +rit.length);\r",
									"pm.test(\"The keys in the JSON object are\" +Object.keys(jsondata));\r",
									"\r",
									"\r",
									"\r",
									"}else if (responseCode.code == 401){\r",
									"    pm.test(\"Content type is present and its value is\" , function(){\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"   pm.response.headers.get(\"Content-Type\" , \"application/json\");\r",
									"    \r",
									"    \r",
									"});\r",
									"pm.test(\"Date is present in the header\", function () {\r",
									"    jsondata=responseHeaders.hasOwnProperty(\"Date\");\r",
									"    console.log('Type for the header Date is', typeof jsondata);\r",
									"    \r",
									"});\r",
									"if(jsondata === true){\r",
									"console.log(pm.response.headers.get('Date'));\r",
									"  }\r",
									"else{\r",
									"      console.log(\"Sorry No date found\");\r",
									"}\r",
									"\r",
									"//Content-Length in the response header\r",
									"\r",
									"if(jsondata === true){\r",
									"   \r",
									"console.log(pm.response.headers.get('Content-Length'));\r",
									"  }\r",
									"else{\r",
									"      console.log(\"Sorry No Content-Length found\");\r",
									"}\r",
									"}\r",
									"else{\r",
									"    pm.test(\"exit\");\r",
									"    \r",
									"};\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"body\": \"This is a filenote\",\r\n  \"authorInitials\": \"SINGRE\",\r\n  \"typeId\": \"104\",\r\n  \"ccUserIds\": [\r\n    \"kulshi\"\r\n  ],\r\n  \"links\": [\r\n    {\r\n      \"href\": \"/assignments/26177\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}//file-notes",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"file-notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_FileNote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//global declaration\r",
									"var jsondata = pm.response.json();\r",
									"var conversionData;\r",
									"\r",
									"\r",
									" \r",
									"\r",
									"// }else{\r",
									"//      pm.test(\"login credentials are not correct\");\r",
									"// }\r",
									"// jsondata=responseCode.code; \r",
									"//   console.log(\"We are getting 200 \" + typeof(responseCode.code));\r",
									"//   console.log(\"We are getting 200 here also \" + typeof(parseInt(pm.environment.get(\"responsestat_201\"))));\r",
									"\r",
									"// responseCode.code == parseInt(pm.environment.get(\"responsestat_201\"))\r",
									"//if response code is not 200 the remainning test cases should not execute\r",
									"if (responseCode.code == parseInt(pm.environment.get(\"responsestat_201\"))){\r",
									"\r",
									"    console.log(responseCode.code )\r",
									"////All the keys names in the JSON object\r",
									"var jsondataSchema=\r",
									"{\r",
									"    \"id\": \"337988\",\r",
									"    \"createdAt\": \"2020-04-03T12:34:45.397\",\r",
									"    \"lastModifiedAt\": \"2020-04-03T12:34:45.397\",\r",
									"    \"body\": \"Lorem ipsum...\",\r",
									"    \"authorInitials\": \"singre\",\r",
									"    \"typeId\": \"104\",\r",
									"    \"ccUserIds\": [\r",
									"        \"kulshi\"\r",
									"    ],\r",
									"    \"links\": [\r",
									"        {\r",
									"            \"href\": \"/assignments/26230\"\r",
									"        }\r",
									"    ]\r",
									"}  ;\r",
									"\r",
									"var rit= Object.keys(jsondataSchema);\r",
									"   \r",
									"console.log(\"All the keys in the JSON object are\" +Object.keys(jsondataSchema));\r",
									"console.log(\"The no of keys in the object are\" +rit.length);\r",
									"pm.test(\"The Number of keys in the JSON object\" +rit.length);\r",
									"pm.test(\"The keys in the JSON object are\" +Object.keys(jsondataSchema));\r",
									"\r",
									"//Check JSON Response body is not empty\r",
									"pm.test(\"Check JSON Response body is not empty\", function () {\r",
									"var jsondata = pm.response.json();\r",
									"// console.log(\"jsondata \"+jsondata);\r",
									"pm.expect(jsondata.length).to.not.eql(0);\r",
									"//console.log(typeof rit);\r",
									"//console.log(\"gggggggggg\" + rit);\r",
									"}); \r",
									"\r",
									"//............................................> static\r",
									"\r",
									"//count the elements\r",
									"\r",
									"\r",
									"// count number of objects in the JSON\r",
									"var jsondataBody=JSON.parse(responseBody);\r",
									"// rit=jsondata.value.length;\r",
									"var list = responseBody.length;\r",
									"var ritika=list.length;\r",
									"console.log(\"the no of key are\" +list);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//Response time \r",
									"Responsetime= {\r",
									"    Responsetime_value:5000\r",
									"};\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(Responsetime.Responsetime_value);\r",
									"  //console.log(pm.response);\r",
									"});    \r",
									"if(pm.response.responseTime >= Responsetime.Responsetime_value){\r",
									"   pm.test(\"The API took more time than expected\");\r",
									"}\r",
									"else{\r",
									"    pm.test(\"The API  took time as expected\");\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//\r",
									"\r",
									"\r",
									"//Extract the request params in the URI\r",
									"// const paramsString = request.url.split('?')[1];\r",
									"// const eachParamArray = paramsString.split('&');\r",
									"// let params = {};\r",
									"// eachParamArray.forEach((param) => {\r",
									"//     const key = param.split('=')[0];\r",
									"//     const value = param.split('=')[1];\r",
									"//     Object.assign(params, {[key]: value});\r",
									"// });\r",
									"// console.log(params); \r",
									"\r",
									"//Verify the expiry header in the response\r",
									"pm.test(\"Expires is present\", function () {\r",
									"    jsondata=responseHeaders.hasOwnProperty(\"Expires\");\r",
									"    console.log('Type for the Expires headers', typeof jsondata);\r",
									"    \r",
									"});\r",
									"if(jsondata === true){\r",
									"console.log(pm.response.headers.get('Expires'));\r",
									"  }\r",
									"else{\r",
									"      console.log(\"Sorry No Expires header found in the response headers\");\r",
									"}\r",
									"\r",
									"\r",
									"schema= \r",
									"   \r",
									" {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModifiedAt\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"body\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"authorInitials\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"typeId\": {\r",
									"      \"type\": \"string\",\r",
									"      \"description\": \"string\"\r",
									"    },\r",
									"    \"ccUserIds\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"description\": \"string\"\r",
									"    },\r",
									"    \"links\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"href\": {\r",
									"            \"type\": \"string\",\r",
									"            \"description\": \"string\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"href\"\r",
									"        ]\r",
									"      },\r",
									"      \"description\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"createdAt\",\r",
									"    \"lastModifiedAt\",\r",
									"    \"body\"\r",
									"  ]\r",
									"};\r",
									" \r",
									"\r",
									"// var schema = pm.environment.get(\"schema\");\r",
									"// pm.test(\"Expects response to match expected JSON Schema\", function() {\r",
									"//     pm.response.to.have.jsonSchema(schema);\r",
									"// });\r",
									"// pm.test('Schema is valid', function() {\r",
									"//     var jsondata = pm.response.json();\r",
									"//     pm.expect(tv4.validate(jsondata, schema)).to.be.false;\r",
									"// });\r",
									"pm.test(\"schema validation\", function(){\r",
									"    var result=tv4.validateResult(pm.response.json(),schema);\r",
									"    if(!result.valid){\r",
									"        console.log(\"..................\"+result);\r",
									"    }\r",
									"    pm.expect(result.valid).to.be.true;\r",
									"});\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        \r",
									"        switch(value.toLowerCase()) \r",
									"          {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"                break;  \r",
									"          \r",
									"      case \"number\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"} \r",
									"\r",
									"\r",
									"// var valData_response=jsondata;\r",
									"// console.log(\"valData_response**** \"+valData_response.length);\r",
									"// for (var j =0 ; j <valData_response.length ;j++){\r",
									"    \r",
									"    //*******Assertion of Key : Id FileNote******\r",
									"    var jsondata = pm.response.json();\r",
									"    pm.test(\"Assert Type of id FileNote\", function(){\r",
									"    var valId_response=jsondata.id;\r",
									"    var valId_dataSheet=pm.variables.get(\"id_addFileNote\");\r",
									"    var typeOfId_dataSheet= typeof pm.variables.get(\"typeOfString\");\r",
									"    var typeOfId_response =typeof valId_response;\r",
									"    console.log(jsondata.id)\r",
									"    console.log(\"type from response \"+typeof jsondata.id);\r",
									"    console.log(\"type from data \"+typeof pm.variables.get(\"typeOfString\") );\r",
									"    \r",
									"  \r",
									"    var testResult =  pm.expect(typeOfId_dataSheet).to.be.eql(typeOfId_response);\r",
									"   \r",
									"            \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of id FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valId_dataSheet) == typeof(valId_response)){\r",
									"    \r",
									"            pm.expect(valId_response).to.eql(valId_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valId_response,valId_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueId=conversionData;\r",
									"           pm.expect(valId_response).to.eql(ConValueId);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"\r",
									"    // //*******Assertion of Key : CreatedAt FileNote******\r",
									"    // pm.test(\"Assert Type of createdAt FileNote\", function(){\r",
									"    // var valCreatedAt_response=jsondata.createdAt;\r",
									"    // var valCreatedAt_dataSheet=pm.variables.get(\"fileNotes_createdAt\");\r",
									"    // var typeOfCreatedAt_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    \r",
									"    \r",
									"   \r",
									"    // var testResult =  pm.expect(typeOfCreatedAt_dataSheet).to.be.eql(typeof valCreatedAt_response);\r",
									"          \r",
									"    // if(testResult)\r",
									"    // {\r",
									"    //     pm.test(\"Assert value of createdAt FileNote\", function()\r",
									"    //     {\r",
									"            \r",
									"    //       if(typeof(valCreatedAt_dataSheet) == typeof(valCreatedAt_response)){\r",
									"    \r",
									"    //         pm.expect(valCreatedAt_response).to.eql(valCreatedAt_dataSheet); \r",
									"              \r",
									"    //       }\r",
									"    \r",
									"    //       else\r",
									"    //       {\r",
									"    //         valCallBack(valCreatedAt_response,valCreatedAt_dataSheet, function(){});\r",
									"           \r",
									"    //        var ConValueCreatedAt=conversionData;\r",
									"    //        pm.expect(valCreatedAt_response).to.eql({current});      \r",
									"    //         }\r",
									"    //     });\r",
									"    // }\r",
									"    // else{ postman.setNextRequest();}\r",
									"    // });\r",
									"\r",
									"\r",
									"    // //*******Assertion of Key : LastModifiedAt FileNote******\r",
									"    // pm.test(\"Assert Type of lastModifiedAt FileNote\", function(){\r",
									"    // var valLastModifiedAt_response=jsondata.lastModifiedAt;\r",
									"    // var valLastModifiedAt_dataSheet=pm.variables.get(\"fileNotes_lastModifiedAt\");\r",
									"    // var typeOfLastModifiedAt_dataSheet= pm.variables.get(\"typeOf_lastModifiedAt\");\r",
									"    // var typeOfLastModifiedAt_response=typeof valLastModifiedAt_response;\r",
									"    \r",
									"    // if(valLastModifiedAt_response==null){\r",
									"    // typeOfLastModifiedAt_dataSheet=\"object\";\r",
									"    // var testResult =  pm.expect(typeOfLastModifiedAt_dataSheet).to.be.eql(typeof valLastModifiedAt_response);\r",
									"    // }else{\r",
									"    // var testResult =  pm.expect(typeOfLastModifiedAt_dataSheet).to.be.eql(typeof valLastModifiedAt_response);\r",
									"    // }\r",
									"            \r",
									"    // if(testResult)\r",
									"    // {\r",
									"    //     pm.test(\"Assert value of lastModifiedAt FileNote\", function()\r",
									"    //     {\r",
									"            \r",
									"    //       if(typeof(valLastModifiedAt_dataSheet) == typeof(valLastModifiedAt_response)){\r",
									"    \r",
									"    //         pm.expect(valLastModifiedAt_response).to.eql(valLastModifiedAt_dataSheet); \r",
									"              \r",
									"    //       }\r",
									"    \r",
									"    //       else\r",
									"    //       {\r",
									"    //         valCallBack(valLastModifiedAt_response,valLastModifiedAt_dataSheet, function(){});\r",
									"           \r",
									"    //        var ConValueLastModifiedAt=conversionData;\r",
									"    //        pm.expect(valLastModifiedAt_response).to.eql(ConValueLastModifiedAt);      \r",
									"    //         }\r",
									"    //     });\r",
									"    // }\r",
									"    // else{ postman.setNextRequest();}\r",
									"    // });\r",
									"\r",
									"    //*******Assertion of Key : Body FileNote******\r",
									"    pm.test(\"Assert Type of body FileNote\", function(){\r",
									"    var valBody_response=jsondata.body;\r",
									"    var valBody_dataSheet=pm.variables.get(\"fileNotes_body\");\r",
									"    var typeOfBody_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    var typeOfBody_response=typeof valBody_response;\r",
									"    \r",
									"   \r",
									"    \r",
									"    var testResult =  pm.expect(typeOfBody_dataSheet).to.be.eql(typeof valBody_response);\r",
									"   \r",
									"            \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of body FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valBody_dataSheet) == typeof(valBody_response)){\r",
									"    \r",
									"            pm.expect(valBody_response).to.eql(valBody_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valBody_response,valBody_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueBody=conversionData;\r",
									"           pm.expect(valBody_response).to.eql(ConValueBody);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"\r",
									"    //*******Assertion of Key : AuthorInitials FileNote******\r",
									"    pm.test(\"Assert Type of authorInitials FileNote\", function(){\r",
									"    var valAuthorInitials_response=jsondata.authorInitials;\r",
									"    var valAuthorInitials_dataSheet=pm.variables.get(\"fileNotes_authorInitials\");\r",
									"    var typeOfAuthorInitials_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    var typeOfAuthorInitials_response=typeof valAuthorInitials_response;\r",
									"    \r",
									"    \r",
									"    var testResult =  pm.expect(typeOfAuthorInitials_dataSheet).to.be.eql(typeof valAuthorInitials_response);\r",
									"       \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of authorInitials FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valAuthorInitials_dataSheet) == typeof(valAuthorInitials_response)){\r",
									"    \r",
									"            pm.expect(valAuthorInitials_response).to.eql(valAuthorInitials_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valAuthorInitials_response,valAuthorInitials_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueAuthorInitials=conversionData;\r",
									"           pm.expect(valAuthorInitials_response).to.eql(ConValueAuthorInitials);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"\r",
									"    //*******Assertion of Key : TypeId FileNote******\r",
									"    pm.test(\"Assert Type of typeId FileNote\", function(){\r",
									"    var valTypeId_response=jsondata.typeId;\r",
									"    var valTypeId_dataSheet=pm.variables.get(\"fileNotes_typeId\");\r",
									"    var typeOfTypeId_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    var typeOfTypeId_response=typeof valTypeId_response;\r",
									"    \r",
									"    \r",
									"    var testResult =  pm.expect(typeOfTypeId_dataSheet).to.be.eql(typeof valTypeId_response);\r",
									"   \r",
									"            \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of typeId FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valTypeId_dataSheet) == typeof(valTypeId_response)){\r",
									"    \r",
									"            pm.expect(valTypeId_response).to.eql(valTypeId_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valTypeId_response,valTypeId_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueTypeId=conversionData;\r",
									"           pm.expect(valTypeId_response).to.eql(ConValueTypeId);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"\r",
									"    //*******Assertion of Key : CcUserIds FileNote******\r",
									"    pm.test(\"Assert Type of ccUserIds FileNote\", function(){\r",
									"    var valCcUserIds_response=jsondata.ccUserIds[0];\r",
									"    var valCcUserIds_dataSheet=pm.variables.get(\"fileNotes_ccUserIds\");\r",
									"    var typeOfCcUserIds_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    var typeOfCcUserIds_response=typeof valCcUserIds_response;\r",
									"    \r",
									"    \r",
									"    var testResult =  pm.expect(typeOfCcUserIds_dataSheet).to.be.eql(typeof valCcUserIds_response);\r",
									"       \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of ccUserIds FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valCcUserIds_dataSheet) == typeof(valCcUserIds_response)){\r",
									"    \r",
									"            pm.expect(valCcUserIds_response).to.eql(valCcUserIds_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valCcUserIds_response,valCcUserIds_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueCcUserIds=conversionData;\r",
									"           pm.expect(valCcUserIds_response).to.eql(ConValueCcUserIds);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"    \r",
									"\r",
									"\r",
									"    //*******Assertion of Key : Links FileNote******\r",
									"    pm.test(\"Assert Type of links FileNote\", function(){\r",
									"    var valLinks_response=jsondata.links[0].href;\r",
									"    var valLinks_dataSheet=pm.variables.get(\"fileNotes_links_href\");\r",
									"    var typeOfLinks_dataSheet= pm.variables.get(\"typeOfString\");\r",
									"    var typeOfLinks_response=typeof valLinks_response;\r",
									"    console.log(\"valLinks_response*****\"+valLinks_response)\r",
									"    \r",
									"    var testResult =  pm.expect(typeOfLinks_dataSheet).to.be.eql(typeof valLinks_response);\r",
									"   \r",
									"            \r",
									"    if(testResult)\r",
									"    {\r",
									"        pm.test(\"Assert value of links FileNote\", function()\r",
									"        {\r",
									"            \r",
									"          if(typeof(valLinks_dataSheet) == typeof(valLinks_response)){\r",
									"    \r",
									"            pm.expect(valLinks_response).to.eql(valLinks_dataSheet); \r",
									"              \r",
									"          }\r",
									"    \r",
									"          else\r",
									"          {\r",
									"            valCallBack(valLinks_response,valLinks_dataSheet, function(){});\r",
									"           \r",
									"           var ConValueLinks=conversionData;\r",
									"           pm.expect(valLinks_response).to.eql(ConValueLinks);      \r",
									"            }\r",
									"        });\r",
									"    }\r",
									"    else{ postman.setNextRequest();}\r",
									"    });\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									"//4th test case\r",
									"pm.test(\"Check if response contains all provided keys\", function () {\r",
									"     pm.expect({\r",
									"    \r",
									"        \"error\": 0,\r",
									"        \"message\": null,\r",
									"        \"warnings\": null,\r",
									"        \"processingTimeMs\": 112\r",
									"    }).to.have.all.keys( 'error' , 'message' ,'warnings', 'processingTimeMs');\r",
									"    });\r",
									"    \r",
									"//5th test case(check all the keys are there in the response)\r",
									"jsondata=\r",
									"   \r",
									"{\r",
									"    \"id\": \"337988\",\r",
									"    \"createdAt\": \"2020-04-03T12:34:45.397\",\r",
									"    \"lastModifiedAt\": \"2020-04-03T12:34:45.397\",\r",
									"    \"body\": \"Lorem ipsum...\",\r",
									"    \"authorInitials\": \"singre\",\r",
									"    \"typeId\": \"104\",\r",
									"    \"ccUserIds\": [\r",
									"        \"kulshi\"\r",
									"    ],\r",
									"    \"links\": [\r",
									"        {\r",
									"            \"href\": \"/assignments/26230\"\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"\r",
									"var rit= Object.keys(jsondata);\r",
									"   \r",
									"console.log(\"All the keys in the JSON object are\" +Object.keys(jsondata));\r",
									"console.log(\"The no of keys in the object are\" +rit.length);\r",
									"pm.test(\"The Number of keys in the JSON object\" +rit.length);\r",
									"pm.test(\"The keys in the JSON object are\" +Object.keys(jsondata));\r",
									"\r",
									"\r",
									"\r",
									"}else if (responseCode.code == 401){\r",
									"    pm.test(\"Content type is present and its value is\" , function(){\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"   pm.response.headers.get(\"Content-Type\" , \"application/json\");\r",
									"    \r",
									"    \r",
									"});\r",
									"pm.test(\"Date is present in the header\", function () {\r",
									"    jsondata=responseHeaders.hasOwnProperty(\"Date\");\r",
									"    console.log('Type for the header Date is', typeof jsondata);\r",
									"    \r",
									"});\r",
									"if(jsondata === true){\r",
									"console.log(pm.response.headers.get('Date'));\r",
									"  }\r",
									"else{\r",
									"      console.log(\"Sorry No date found\");\r",
									"}\r",
									"\r",
									"//Content-Length in the response header\r",
									"\r",
									"if(jsondata === true){\r",
									"   \r",
									"console.log(pm.response.headers.get('Content-Length'));\r",
									"  }\r",
									"else{\r",
									"      console.log(\"Sorry No Content-Length found\");\r",
									"}\r",
									"}\r",
									"else{\r",
									"    pm.test(\"exit\");\r",
									"    \r",
									"};\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}//file-notes/{{fileNote_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"file-notes",
								"{{fileNote_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT_EditFileNote",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Auth}}"
							},
							{
								"key": "userId",
								"type": "text",
								"value": "{{userid}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "/*[\r\n  {\r\n    \"id\": \"341336\",\r\n    \"createdAt\": \"2021-03-23T08:04:02.930\",\r\n    \"lastModifiedAt\": \"2021-03-23T08:04:02.930\",\r\n    \"body\": \"Test q tet 123\",\r\n    \"authorInitials\": \"singre\",\r\n    \"typeId\": \"104\",\r\n    \"ccUserIds\": [\r\n    ],\r\n    \"links\": [\r\n        {\r\n            \"href\": \"/assignments/14172\"\r\n        }\r\n    ]\r\n    }\r\n]*/\r\n{\r\n  \"body\": \"Changed\",\r\n  \"authorInitials\": \"SINGRE\",\r\n  \"typeId\": \"104\",\r\n  \"ahId\": \"341406\",\r\n  \"ahUpdatedOn\": \"2021-03-30T10:52:16.417\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}//file-notes/{{fileNote_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"file-notes",
								"{{fileNote_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assignments",
			"item": [
				{
					"name": "Post_Add Client Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"var conversionData;\r",
									"var jsonValue=jsonData;\r",
									"\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean'){\r",
									"        switch(typeof value){\r",
									"            case \"string\":\r",
									"               switch(value.toLowerCase()) \r",
									"                         {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"\r",
									"                callback(conversionData);\r",
									"                break;  \r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"    switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        \r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for (j=0;j<jsonData.length;j++){\r",
									"\r",
									"  jsonValue=jsonData[j];\r",
									"  var k=0;\r",
									"\r",
									"  pm.environment.set(\"candidateListsStatusId\",jsonValue.candidateListsStatusId);\r",
									"  pm.environment.set(\"candidateListsStatusUpdatedOn\",jsonValue.candidateListsStatusUpdatedOn);\r",
									"  pm.environment.set(\"fileNoteId\", jsonData[j].fileNoteId);\r",
									"\r",
									"  pm.test(\"Check if Assignment object contains all provided keys\",function()\r",
									"    {\r",
									"      pm.expect(jsonValue).to.have.all.keys('salaryDontAsk','createdAt','lastModifiedAt','id','companyName','country','positionTitle','type','proposalSentAt','isCompetitivePitch','openAt','closedAt','firstPresentationAt','clientContact','relatedUrls','clientContacts','typeId');\r",
									"  }); \r",
									"\r",
									"//    pm.test(\"Check if ETP Relationship assistant object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.assistant).to.have.all.keys('phoneNumber','fullName','email','extension');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship qualifications object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.qualifications).to.have.all.keys('earnedAt','title','institution','country');\r",
									"//   }); \r",
									"\r",
									"// pm.test(\"Check if ETP Relationship contactDetails object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.contactDetails).to.have.all.keys('label','value','icon','isDefault','lastModifiedAt');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship workHistory object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.workHistory).to.have.all.keys('startedAt','endedAt','title','company','country','isPrimary','isHired','isNED','sequenceNumber','compensation');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship Launguages object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.languages).to.have.all.keys('languageId','fluencyId');\r",
									"//   });\r",
									"\r",
									"//*******Assertion of Key : salaryDontAsks   *********\r",
									"  pm.test(\"Assert Type of salaryDontAsk\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.salaryDontAsk).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of salaryDontAsk\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.salaryDontAsk === typeof data['clientContact_salaryDontAsk'+j]) {\r",
									"          pm.expect(data['clientContact_salaryDontAsk'+j]).to.eql(jsonValue.salaryDontAsk);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.salaryDontAsk, data['clientContact_salaryDontAsk'+j], function () { });\r",
									"\r",
									"          var consalaryDontAsk = conversionData;\r",
									"          pm.expect(jsonValue.salaryDontAsk).to.eql(consalaryDontAsk);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"// //*******Assertion of Key : createdAts   *********\r",
									"//   pm.test(\"Assert Type of createdAt\"+j, function () {\r",
									"//     var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"//     if (testResult) {\r",
									"//       pm.test(\"Assert value of createdAt\"+j, function () {\r",
									"\r",
									"//         if (typeof jsonValue.createdAt === typeof data['clientContact_createdAt'+j]) {\r",
									"//           pm.expect(data['clientContact_createdAt'+j]).to.eql(jsonValue.createdAt);\r",
									"\r",
									"//         }\r",
									"//         else {\r",
									"//           valCallBack(jsonValue.createdAt, data['clientContact_createdAt'+j], function () { });\r",
									"\r",
									"//           var concreatedAt = conversionData;\r",
									"//           pm.expect(jsonValue.createdAt).to.eql(concreatedAt);\r",
									"//         }\r",
									"//       });\r",
									"//     }\r",
									"//     else { postman.setNextRequest(); }\r",
									"//   });\r",
									"\r",
									"// //*******Assertion of Key : lastModifiedAts   *********\r",
									"//   pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"//     var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"//     if (testResult) {\r",
									"//       pm.test(\"Assert value of lastModifiedAt\"+j, function () {\r",
									"\r",
									"//         if (typeof jsonValue.lastModifiedAt === typeof data['clientContact_lastModifiedAt'+j]) {\r",
									"//           pm.expect(data['clientContact_lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);\r",
									"\r",
									"//         }\r",
									"//         else {\r",
									"//           valCallBack(jsonValue.lastModifiedAt, data['clientContact_lastModifiedAt'+j], function () { });\r",
									"\r",
									"//           var conlastModifiedAt = conversionData;\r",
									"//           pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"//         }\r",
									"//       });\r",
									"//     }\r",
									"//     else { postman.setNextRequest(); }\r",
									"//   });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : ids   *********\r",
									"  pm.test(\"Assert Type of id\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of id\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.id === typeof data['clientContact_id'+j]) {\r",
									"          pm.expect(data['clientContact_id'+j]).to.eql(jsonValue.id);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.id, data['clientContact_id'+j], function () { });\r",
									"\r",
									"          var conid = conversionData;\r",
									"          pm.expect(jsonValue.id).to.eql(conid);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : companyNames   *********\r",
									"  pm.test(\"Assert Type of companyName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.companyName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of companyName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.companyName === typeof data['clientContact_companyName'+j]) {\r",
									"          pm.expect(data['clientContact_companyName'+j]).to.eql(jsonValue.companyName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.companyName, data['clientContact_companyName'+j], function () { });\r",
									"\r",
									"          var concompanyName = conversionData;\r",
									"          pm.expect(jsonValue.companyName).to.eql(concompanyName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : countrys   *********\r",
									"  pm.test(\"Assert Type of country\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.country).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of country\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.country === typeof data['clientContact_country'+j]) {\r",
									"          pm.expect(data['clientContact_country'+j]).to.eql(jsonValue.country);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.country, data['clientContact_country'+j], function () { });\r",
									"\r",
									"          var concountry = conversionData;\r",
									"          pm.expect(jsonValue.country).to.eql(concountry);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : positionTitles   *********\r",
									"  pm.test(\"Assert Type of positionTitle\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.positionTitle).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of positionTitle\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.positionTitle === typeof data['clientContact_positionTitle'+j]) {\r",
									"          pm.expect(data['clientContact_positionTitle'+j]).to.eql(jsonValue.positionTitle);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.positionTitle, data['clientContact_positionTitle'+j], function () { });\r",
									"\r",
									"          var conpositionTitle = conversionData;\r",
									"          pm.expect(jsonValue.positionTitle).to.eql(conpositionTitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : types   *********\r",
									"  pm.test(\"Assert Type of type\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.type).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of type\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.type === typeof data['clientContact_type'+j]) {\r",
									"          pm.expect(data['clientContact_type'+j]).to.eql(jsonValue.type);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.type, data['clientContact_type'+j], function () { });\r",
									"\r",
									"          var contype = conversionData;\r",
									"          pm.expect(jsonValue.type).to.eql(contype);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : proposalSentAts   *********\r",
									"  pm.test(\"Assert Type of proposalSentAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.proposalSentAt).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of proposalSentAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.proposalSentAt === typeof data['clientCompany_proposalSentAt'+j]) {\r",
									"          pm.expect(data['clientCompany_proposalSentAt'+j]).to.eql(jsonValue.proposalSentAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.proposalSentAt, data['clientCompany_proposalSentAt'+j], function () { });\r",
									"\r",
									"          var conproposalSentAt = conversionData;\r",
									"          pm.expect(jsonValue.proposalSentAt).to.eql(conproposalSentAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isCompetitivePitchs   *********\r",
									"  pm.test(\"Assert Type of isCompetitivePitch\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.isCompetitivePitch).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isCompetitivePitch\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.isCompetitivePitch === typeof data['clientContact_isCompetitivePitch'+j]) {\r",
									"          pm.expect(data['clientContact_isCompetitivePitch'+j]).to.eql(jsonValue.isCompetitivePitch);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.isCompetitivePitch, data['clientContact_isCompetitivePitch'+j], function () { });\r",
									"\r",
									"          var conisCompetitivePitch = conversionData;\r",
									"          pm.expect(jsonValue.isCompetitivePitch).to.eql(conisCompetitivePitch);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : openAts   *********\r",
									"  pm.test(\"Assert Type of openAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.openAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of openAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.openAt === typeof data['clientContact_openAt'+j]) {\r",
									"          pm.expect(data['clientContact_openAt'+j]).to.eql(jsonValue.openAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.openAt, data['clientContact_openAt'+j], function () { });\r",
									"\r",
									"          var conopenAt = conversionData;\r",
									"          pm.expect(jsonValue.openAt).to.eql(conopenAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : closedAts   *********\r",
									"  pm.test(\"Assert Type of closedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.closedAt).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of closedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.closedAt === typeof data['clientContact_closedAt'+j]) {\r",
									"          pm.expect(data['clientContact_closedAt'+j]).to.eql(jsonValue.closedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.closedAt, data['clientContact_closedAt'+j], function () { });\r",
									"\r",
									"          var conclosedAt = conversionData;\r",
									"          pm.expect(jsonValue.closedAt).to.eql(conclosedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : firstPresentationAts   *********\r",
									"  pm.test(\"Assert Type of firstPresentationAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.firstPresentationAt).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of firstPresentationAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.firstPresentationAt === typeof data['firstPresentationAt'+j]) {\r",
									"          pm.expect(data['firstPresentationAt'+j]).to.eql(jsonValue.firstPresentationAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.firstPresentationAt, data['firstPresentationAt'+j], function () { });\r",
									"\r",
									"          var confirstPresentationAt = conversionData;\r",
									"          pm.expect(jsonValue.firstPresentationAt).to.eql(confirstPresentationAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"for(var m=0;m<jsonValue.clientContact.length;m++){\r",
									"jsonContact=jsonValue.clientContact[m];\r",
									"//*******Assertion of Key : firstNames   *********\r",
									"  pm.test(\"Assert Type of firstName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonContact.firstName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of firstName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonContact.firstName === typeof data['clientContact_firstName'+j]) {\r",
									"          pm.expect(data['clientContact_firstName'+j]).to.eql(jsonContact.firstName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonContact.firstName, data['clientContact_firstName'+j], function () { });\r",
									"\r",
									"          var confirstName = conversionData;\r",
									"          pm.expect(jsonContact.firstName).to.eql(confirstName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastNames   *********\r",
									"  pm.test(\"Assert Type of lastName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonContact.lastName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonContact.lastName === typeof data['clientContact_lastName'+j]) {\r",
									"          pm.expect(data['clientContact_lastName'+j]).to.eql(jsonContact.lastName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonContact.lastName, data['clientContact_lastName'+j], function () { });\r",
									"\r",
									"          var conlastName = conversionData;\r",
									"          pm.expect(jsonContact.lastName).to.eql(conlastName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : positions   *********\r",
									"  pm.test(\"Assert Type of position\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonContact.position).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of position\"+j, function () {\r",
									"\r",
									"        if (typeof jsonContact.position === typeof data['clientContact_position'+j]) {\r",
									"          pm.expect(data['clientContact_position'+j]).to.eql(jsonContact.position);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonContact.position, data['clientContact_position'+j], function () { });\r",
									"\r",
									"          var conposition = conversionData;\r",
									"          pm.expect(jsonContact.position).to.eql(conposition);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : mobilePhones   *********\r",
									"  pm.test(\"Assert Type of mobilePhone\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonContact.mobilePhone).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of mobilePhone\"+j, function () {\r",
									"\r",
									"        if (typeof jsonContact.mobilePhone === typeof data['clientContact_mobilePhone'+j]) {\r",
									"          pm.expect(data['clientContact_mobilePhone'+j]).to.eql(jsonContact.mobilePhone);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonContact.mobilePhone, data['clientContact_mobilePhone'+j], function () { });\r",
									"\r",
									"          var conmobilePhone = conversionData;\r",
									"          pm.expect(jsonContact.mobilePhone).to.eql(conmobilePhone);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : directPhones   *********\r",
									"  pm.test(\"Assert Type of directPhone\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonContact.directPhone).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of directPhone\"+j, function () {\r",
									"\r",
									"        if (typeof jsonContact.directPhone === typeof data['clientContact_directPhone'+j]) {\r",
									"          pm.expect(data['clientContact_directPhone'+j]).to.eql(jsonContact.directPhone);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonContact.directPhone, data['clientContact_directPhone'+j], function () { });\r",
									"\r",
									"          var condirectPhone = conversionData;\r",
									"          pm.expect(jsonContact.directPhone).to.eql(condirectPhone);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : emails   *********\r",
									"  pm.test(\"Assert Type of email\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonContact.email).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of email\"+j, function () {\r",
									"\r",
									"        if (typeof jsonContact.email === typeof data['clientContact_email'+j]) {\r",
									"          pm.expect(data['clientContact_email'+j]).to.eql(jsonContact.email);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonContact.email, data['clientContact_email'+j], function () { });\r",
									"\r",
									"          var conemail = conversionData;\r",
									"          pm.expect(jsonContact.email).to.eql(conemail);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//*******Assertion of Key : relatedUrlss   *********\r",
									"  pm.test(\"Assert Type of relatedUrls\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.relatedUrls).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of relatedUrls\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.relatedUrls === typeof data['relatedUrls'+j]) {\r",
									"          pm.expect(data['relatedUrls'+j]).to.eql(jsonValue.relatedUrls);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.relatedUrls, data['relatedUrls'+j], function () { });\r",
									"\r",
									"          var conrelatedUrls = conversionData;\r",
									"          pm.expect(jsonValue.relatedUrls).to.eql(conrelatedUrls);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"for(var n=0;n<jsonValue.clientContacts.length;n++){\r",
									"  jsonContacts=jsonValue.clientContacts[n];\r",
									"  //*******Assertion of Key : ids   *********\r",
									"  pm.test(\"Assert Type of id\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonContacts.id).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of id\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonContacts.id === typeof data['clientContact_id'+j+n]) {\r",
									"          pm.expect(data['clientContact_id'+j+n]).to.eql(jsonContacts.id);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonContacts.id, data['clientContact_id'+j+n], function () { });\r",
									"\r",
									"          var conid = conversionData;\r",
									"          pm.expect(jsonContacts.id).to.eql(conid);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isPrimarys   *********\r",
									"  pm.test(\"Assert Type of isPrimary\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonContacts.isPrimary).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isPrimary\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonContacts.isPrimary === typeof data['clientContacts_isPrimary'+j+n]) {\r",
									"          pm.expect(data['clientContacts_isPrimary'+j+n]).to.eql(jsonContacts.isPrimary);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonContacts.isPrimary, data['clientContacts_isPrimary'+j+n], function () { });\r",
									"\r",
									"          var conisPrimary = conversionData;\r",
									"          pm.expect(jsonContacts.isPrimary).to.eql(conisPrimary);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonContacts.lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonContacts.lastModifiedAt === typeof data['clientContacts_lastModifiedAt'+j+n]) {\r",
									"          pm.expect(data['clientContacts_lastModifiedAt'+j+n]).to.eql(jsonContacts.lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonContacts.lastModifiedAt, data['clientContacts_lastModifiedAt'+j+n], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonContacts.lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"}\r",
									"//*******Assertion of Key : typeIds   *********\r",
									"  pm.test(\"Assert Type of typeId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.typeId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of typeId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.typeId === typeof data['clientContacts_typeId'+j]) {\r",
									"          pm.expect(data['clientContacts_typeId'+j]).to.eql(jsonValue.typeId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.typeId, data['clientContacts_typeId'+j], function () { });\r",
									"\r",
									"          var contypeId = conversionData;\r",
									"          pm.expect(jsonValue.typeId).to.eql(contypeId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": \"{{clientContact_id0}}\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/assignments/26177/client-contacts",
							"host": [
								"{{url}}"
							],
							"path": [
								"assignments",
								"26177",
								"client-contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post_Add Worklist Stage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"var conversionData;\r",
									"var jsonValue=jsonData;\r",
									"\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean'){\r",
									"        switch(typeof value){\r",
									"            case \"string\":\r",
									"               switch(value.toLowerCase()) \r",
									"                         {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"\r",
									"                callback(conversionData);\r",
									"                break;  \r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"    switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        \r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for (j=0;j<jsonData.length;j++){\r",
									"\r",
									"  jsonValue=jsonData[j];\r",
									"  var k=0;\r",
									"\r",
									"  pm.environment.set(\"candidateListsStatusId\",jsonValue.candidateListsStatusId);\r",
									"  pm.environment.set(\"candidateListsStatusUpdatedOn\",jsonValue.candidateListsStatusUpdatedOn);\r",
									"  pm.environment.set(\"fileNoteId\", jsonData[j].fileNoteId);\r",
									"\r",
									"  pm.test(\"Check if Assignment object contains all provided keys\",function()\r",
									"    {\r",
									"      pm.expect(jsonValue).to.have.all.keys('boardexStatus','boardexData','DCFStatus','createdAt','lastModifiedAt','id','firstName','lastName','group1','group2','priorityId','statusIsActive','todoNote','pipelineStage','linkedinProfileUrl','candidateListsStatusId','candidateListsStatusUpdatedOn','assistant','qualifications','contactDetails','workHistory','blocks','worklistStages','geoMobilityNotes','birthday','principalNationalityId','languages','homeCountryId','maritalStatusId','statusId','spouseName','children','whoKnowsBest','relationships','assignmentIds');\r",
									"  }); \r",
									"\r",
									"//    pm.test(\"Check if ETP Relationship assistant object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.assistant).to.have.all.keys('phoneNumber','fullName','email','extension');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship qualifications object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.qualifications).to.have.all.keys('earnedAt','title','institution','country');\r",
									"//   }); \r",
									"\r",
									"// pm.test(\"Check if ETP Relationship contactDetails object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.contactDetails).to.have.all.keys('label','value','icon','isDefault','lastModifiedAt');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship workHistory object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.workHistory).to.have.all.keys('startedAt','endedAt','title','company','country','isPrimary','isHired','isNED','sequenceNumber','compensation');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship Launguages object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.languages).to.have.all.keys('languageId','fluencyId');\r",
									"//   });\r",
									"\r",
									"  //*******Assertion of Key : boardexStatuss   *********\r",
									"  pm.test(\"Assert Type of boardexStatus\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.boardexStatus).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of boardexStatus\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.boardexStatus === typeof data['callList_boardexStatus'+j]) {\r",
									"          pm.expect(data['callList_boardexStatus'+j]).to.eql(jsonValue.boardexStatus);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.boardexStatus, data['callList_boardexStatus'+j], function () { });\r",
									"\r",
									"          var conboardexStatus = conversionData;\r",
									"          pm.expect(jsonValue.boardexStatus).to.eql(conboardexStatus);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : boardexDatas   *********\r",
									"  pm.test(\"Assert Type of boardexData\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.boardexData).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of boardexData\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.boardexData === typeof data['boardexData'+j]) {\r",
									"          pm.expect(data['boardexData'+j]).to.eql(jsonValue.boardexData);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.boardexData, data['boardexData'+j], function () { });\r",
									"\r",
									"          var conboardexData = conversionData;\r",
									"          pm.expect(jsonValue.boardexData).to.eql(conboardexData);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"  //*******Assertion of Key : DCFStatuss   *********\r",
									"  pm.test(\"Assert Type of DCFStatus\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.DCFStatus).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of DCFStatus\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.DCFStatus === typeof data['callList_DCFStatus'+j]) {\r",
									"          pm.expect(data['callList_DCFStatus'+j]).to.eql(jsonValue.DCFStatus);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.DCFStatus, data['callList_DCFStatus'+j], function () { });\r",
									"\r",
									"          var conDCFStatus = conversionData;\r",
									"          pm.expect(jsonValue.DCFStatus).to.eql(conDCFStatus);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : createdAts   *********\r",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of createdAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.createdAt === typeof data['createdAt'+j]) {\r",
									"          pm.expect(data['createdAt'+j]).to.eql(jsonValue.createdAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.createdAt, data['createdAt'+j], function () { });\r",
									"\r",
									"          var concreatedAt = conversionData;\r",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.lastModifiedAt === typeof data['lastModifiedAt'+j]) {\r",
									"          pm.expect(data['lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.lastModifiedAt, data['lastModifiedAt'+j], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : ids   *********\r",
									"  pm.test(\"Assert Type of id\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of id\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.id === typeof data['id'+j]) {\r",
									"          pm.expect(data['id'+j]).to.eql(jsonValue.id);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.id, data['id'+j], function () { });\r",
									"\r",
									"          var conid = conversionData;\r",
									"          pm.expect(jsonValue.id).to.eql(conid);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : firstNames   *********\r",
									"  pm.test(\"Assert Type of firstName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.firstName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of firstName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.firstName === typeof data['firstName'+j]) {\r",
									"          pm.expect(data['firstName'+j]).to.eql(jsonValue.firstName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.firstName, data['firstName'+j], function () { });\r",
									"\r",
									"          var confirstName = conversionData;\r",
									"          pm.expect(jsonValue.firstName).to.eql(confirstName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastNames   *********\r",
									"  pm.test(\"Assert Type of lastName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.lastName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.lastName === typeof data['lastName'+j]) {\r",
									"          pm.expect(data['lastName'+j]).to.eql(jsonValue.lastName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.lastName, data['lastName'+j], function () { });\r",
									"\r",
									"          var conlastName = conversionData;\r",
									"          pm.expect(jsonValue.lastName).to.eql(conlastName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : group1s   *********\r",
									"  pm.test(\"Assert Type of group1\"+j, function () {\r",
									"    if(jsonValue.group1===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of group1\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.group1 === typeof data['group1'+j]) {\r",
									"          pm.expect(data['group1'+j]).to.eql(jsonValue.group1);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.group1, data['group1'+j], function () { });\r",
									"\r",
									"          var congroup1 = conversionData;\r",
									"          pm.expect(jsonValue.group1).to.eql(congroup1);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : group2s   *********\r",
									"  pm.test(\"Assert Type of group2\"+j, function () {\r",
									"     if(jsonValue.group2===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of group2\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.group2 === typeof data['group2'+j]) {\r",
									"          pm.expect(data['group2'+j]).to.eql(jsonValue.group2);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.group2, data['group2'+j], function () { });\r",
									"\r",
									"          var congroup2 = conversionData;\r",
									"          pm.expect(jsonValue.group2).to.eql(congroup2);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : priorityIds   *********\r",
									"  pm.test(\"Assert Type of priorityId\"+j, function () {\r",
									"     if(jsonValue.priorityId===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"\r",
									"    var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of priorityId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.priorityId === typeof data['priorityId'+j]) {\r",
									"          pm.expect(data['priorityId'+j]).to.eql(jsonValue.priorityId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.priorityId, data['priorityId'+j], function () { });\r",
									"\r",
									"          var conpriorityId = conversionData;\r",
									"          pm.expect(jsonValue.priorityId).to.eql(conpriorityId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : statusIsActives   *********\r",
									"  pm.test(\"Assert Type of statusIsActive\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.statusIsActive).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of statusIsActive\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.statusIsActive === typeof data['statusIsActive'+j]) {\r",
									"          pm.expect(data['statusIsActive'+j]).to.eql(jsonValue.statusIsActive);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.statusIsActive, data['statusIsActive'+j], function () { });\r",
									"\r",
									"          var constatusIsActive = conversionData;\r",
									"          pm.expect(jsonValue.statusIsActive).to.eql(constatusIsActive);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : todoNotes   *********\r",
									"  pm.test(\"Assert Type of todoNote\"+j, function () {\r",
									"     if(jsonValue.todoNote===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of todoNote\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.todoNote === typeof data['todoNote'+j]) {\r",
									"          pm.expect(data['todoNote'+j]).to.eql(jsonValue.todoNote);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.todoNote, data['todoNote'+j], function () { });\r",
									"\r",
									"          var contodoNote = conversionData;\r",
									"          pm.expect(jsonValue.todoNote).to.eql(contodoNote);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : pipelineStages   *********\r",
									"  pm.test(\"Assert Type of pipelineStage\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.pipelineStage).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of pipelineStage\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.pipelineStage === typeof data['pipelineStage'+j]) {\r",
									"          pm.expect(data['pipelineStage'+j]).to.eql(jsonValue.pipelineStage);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.pipelineStage, data['pipelineStage'+j], function () { });\r",
									"\r",
									"          var conpipelineStage = conversionData;\r",
									"          pm.expect(jsonValue.pipelineStage).to.eql(conpipelineStage);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : linkedinProfileUrls   *********\r",
									"  pm.test(\"Assert Type of linkedinProfileUrl\"+j, function () {\r",
									"    if(jsonValue.linkedinProfileUrl===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of linkedinProfileUrl\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.linkedinProfileUrl === typeof data['linkedinProfileUrl'+j]) {\r",
									"          pm.expect(data['linkedinProfileUrl'+j]).to.eql(jsonValue.linkedinProfileUrl);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.linkedinProfileUrl, data['linkedinProfileUrl'+j], function () { });\r",
									"\r",
									"          var conlinkedinProfileUrl = conversionData;\r",
									"          pm.expect(jsonValue.linkedinProfileUrl).to.eql(conlinkedinProfileUrl);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : candidateListsStatusIds   *********\r",
									"  pm.test(\"Assert Type of candidateListsStatusId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.candidateListsStatusId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of candidateListsStatusId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.candidateListsStatusId === typeof pm.environment.get(\"candidateListsStatusId\")) {\r",
									"          pm.expect(pm.environment.get(\"candidateListsStatusId\")).to.eql(jsonValue.candidateListsStatusId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.candidateListsStatusId, pm.environment.get(\"candidateListsStatusId\"), function () { });\r",
									"\r",
									"          var concandidateListsStatusId = conversionData;\r",
									"          pm.expect(jsonValue.candidateListsStatusId).to.eql(concandidateListsStatusId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : candidateListsStatusUpdatedOns   *********\r",
									"  pm.test(\"Assert Type of candidateListsStatusUpdatedOn\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.candidateListsStatusUpdatedOn).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of candidateListsStatusUpdatedOn\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.candidateListsStatusUpdatedOn === typeof pm.environment.get(\"candidateListsStatusUpdatedOn\")) {\r",
									"          pm.expect(pm.environment.get(\"candidateListsStatusUpdatedOn\")).to.eql(jsonValue.candidateListsStatusUpdatedOn);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.candidateListsStatusUpdatedOn, pm.environment.get(\"candidateListsStatusUpdatedOn\"), function () { });\r",
									"\r",
									"          var concandidateListsStatusUpdatedOn = conversionData;\r",
									"          pm.expect(jsonValue.candidateListsStatusUpdatedOn).to.eql(concandidateListsStatusUpdatedOn);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"  //verifying the Assistant assertion: \r",
									"\r",
									"  for(var u=0;u<jsonValue.assistant.length;u++){\r",
									"//*******Assertion of Key : phoneNumbers   *********\r",
									"  pm.test(\"Assert Type of phoneNumber\"+j, function () {\r",
									"    if(jsonValue.assistant[u].phoneNumber===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of phoneNumber\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].phoneNumber === typeof data['assistant_phoneNumber'+j+u]) {\r",
									"          pm.expect(data['assistant_phoneNumber'+j+u]).to.eql(jsonValue.assistant[u].phoneNumber);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].phoneNumber, data['assistant_phoneNumber'+j+u], function () { });\r",
									"\r",
									"          var conphoneNumber = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].phoneNumber).to.eql(conphoneNumber);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : fullNames   *********\r",
									"  pm.test(\"Assert Type of fullName\"+j, function () {\r",
									"    if(jsonValue.assistant[u].fullName===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of fullName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].fullName === typeof data['assistant_fullName'+j+u]) {\r",
									"          pm.expect(data['assistant_fullName'+j+u]).to.eql(jsonValue.assistant[u].fullName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].fullName, data['assistant_fullName'+j+u], function () { });\r",
									"\r",
									"          var confullName = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].fullName).to.eql(confullName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : emails   *********\r",
									"  pm.test(\"Assert Type of email\"+j, function () {\r",
									"    if(jsonValue.assistant[u].email===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of email\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].email === typeof data['assistant_email'+j+u]) {\r",
									"          pm.expect(data['assistant_email'+j+u]).to.eql(jsonValue.assistant[u].email);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].email, data['assistant_email'+j+u], function () { });\r",
									"\r",
									"          var conemail = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].email).to.eql(conemail);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : extensions   *********\r",
									"  pm.test(\"Assert Type of extension\"+j, function () {\r",
									"    if(jsonValue.assistant[u].extension===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of extension\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].extension === typeof data['assistant_extension'+j+u]) {\r",
									"          pm.expect(data['assistant_extension'+j+u]).to.eql(jsonValue.assistant[u].extension);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].extension, data['assistant_extension'+j+u], function () { });\r",
									"\r",
									"          var conextension = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].extension).to.eql(conextension);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"}\r",
									"\r",
									"// Verifying Qualification assertions:\r",
									"for(var m=0;m<jsonValue.qualifications.length;m++){\r",
									"\r",
									"  //*******Assertion of Key : earnedAts   *********\r",
									"  pm.test(\"Assert Type of earnedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].earnedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of earnedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].earnedAt === typeof data['qualifications_earnedAt'+j+m]) {\r",
									"          pm.expect(data['qualifications_earnedAt'+j+m]).to.eql(jsonValue.qualifications[m].earnedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].earnedAt, data['qualifications_earnedAt'+j+m], function () { });\r",
									"\r",
									"          var conearnedAt = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].earnedAt).to.eql(conearnedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].title === typeof data['qualifications_title'+j+m]) {\r",
									"          pm.expect(data['qualifications_title'+j+m]).to.eql(jsonValue.qualifications[m].title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].title, data['qualifications_title'+j+m], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : institutions   *********\r",
									"  pm.test(\"Assert Type of institution\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].institution).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of institution\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].institution === typeof data['qualifications_institution'+j+m]) {\r",
									"          pm.expect(data['qualifications_institution'+j+m]).to.eql(jsonValue.qualifications[m].institution);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].institution, data['qualifications_institution'+j+m], function () { });\r",
									"\r",
									"          var coninstitution = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].institution).to.eql(coninstitution);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : countrys   *********\r",
									"  pm.test(\"Assert Type of country\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].country).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of country\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].country === typeof data['qualifications_country'+j+m]) {\r",
									"          pm.expect(data['qualifications_country'+j+m]).to.eql(jsonValue.qualifications[m].country);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].country, data['qualifications_country'+j+m], function () { });\r",
									"\r",
									"          var concountry = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].country).to.eql(concountry);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"}\r",
									"\r",
									"//verifying the contactDetails assertions:\r",
									"\r",
									"for(var n=0;n<jsonValue.contactDetails.length;n++){\r",
									"\r",
									"//*******Assertion of Key : labels   *********\r",
									"  pm.test(\"Assert Type of label\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].label).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of label\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].label === typeof data['contactDetails_label'+j+n]) {\r",
									"          pm.expect(data['contactDetails_label'+j+n]).to.eql(jsonValue.contactDetails[n].label);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].label, data['contactDetails_label'+j+n], function () { });\r",
									"\r",
									"          var conlabel = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].label).to.eql(conlabel);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : values   *********\r",
									"  pm.test(\"Assert Type of value\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].value).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of value\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].value === typeof data['contactDetails_value'+j+n]) {\r",
									"          pm.expect(data['contactDetails_value'+j+n]).to.eql(jsonValue.contactDetails[n].value);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].value, data['contactDetails_value'+j+n], function () { });\r",
									"\r",
									"          var convalue = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].value).to.eql(convalue);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : icons   *********\r",
									"  pm.test(\"Assert Type of icon\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].icon).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of icon\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].icon === typeof data['contactDetails_icon'+j+n]) {\r",
									"          pm.expect(data['contactDetails_icon'+j+n]).to.eql(jsonValue.contactDetails[n].icon);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].icon, data['contactDetails_icon'+j+n], function () { });\r",
									"\r",
									"          var conicon = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].icon).to.eql(conicon);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isDefaults   *********\r",
									"  pm.test(\"Assert Type of isDefault\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].isDefault).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isDefault\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].isDefault === typeof data['contactDetails_isDefault'+j+n]) {\r",
									"          pm.expect(data['contactDetails_isDefault'+j+n]).to.eql(jsonValue.contactDetails[n].isDefault);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].isDefault, data['contactDetails_isDefault'+j+n], function () { });\r",
									"\r",
									"          var conisDefault = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].isDefault).to.eql(conisDefault);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].lastModifiedAt === typeof data['contactDetails_lastModifiedAt'+j+n]) {\r",
									"          pm.expect(data['contactDetails_lastModifiedAt'+j+n]).to.eql(jsonValue.contactDetails[n].lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].lastModifiedAt, data['contactDetails_lastModifiedAt'+j+n], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//Workhistory assertions:\r",
									"\r",
									"for(var t=0;t<jsonValue.workHistory.length;t++){\r",
									"\r",
									"//*******Assertion of Key : startedAts   *********\r",
									"  pm.test(\"Assert Type of startedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].startedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of startedAt\"+j+t, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].startedAt === typeof data['workHistory_startedAt'+j+t]) {\r",
									"          pm.expect(data['workHistory_startedAt'+j+t]).to.eql(jsonValue.workHistory[t].startedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].startedAt, data['workHistory_startedAt'+j+t], function () { });\r",
									"\r",
									"          var constartedAt = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].startedAt).to.eql(constartedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : endedAts   *********\r",
									"  pm.test(\"Assert Type of endedAt\"+j, function () {\r",
									"    if(jsonValue.workHistory[t].endedAt===null){\r",
									"       var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of endedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].endedAt === typeof data['workHistory_endedAt'+j+t]) {\r",
									"          pm.expect(data['workHistory_endedAt'+j+t]).to.eql(jsonValue.workHistory[t].endedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].endedAt, data['workHistory_endedAt'+j+t], function () { });\r",
									"\r",
									"          var conendedAt = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].endedAt).to.eql(conendedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].title === typeof data['workHistory_title'+j+t]) {\r",
									"          pm.expect(data['workHistory_title'+j+t]).to.eql(jsonValue.workHistory[t].title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].title, data['workHistory_title'+j+t], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : companys   *********\r",
									"  pm.test(\"Assert Type of company\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].company).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of company\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].company === typeof data['workHistory_company'+j+t]) {\r",
									"          pm.expect(data['workHistory_company'+j+t]).to.eql(jsonValue.workHistory[t].company);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].company, data['workHistory_company'+j+t], function () { });\r",
									"\r",
									"          var concompany = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].company).to.eql(concompany);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : countrys   *********\r",
									"  pm.test(\"Assert Type of country\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].country).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of country\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].country === typeof data['workHistory_country'+j+t]) {\r",
									"          pm.expect(data['workHistory_country'+j+t]).to.eql(jsonValue.workHistory[t].country);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].country, data['workHistory_country'+j+t], function () { });\r",
									"\r",
									"          var concountry = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].country).to.eql(concountry);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isHireds   *********\r",
									"  pm.test(\"Assert Type of isHired\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isHired).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isHired\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].isHired === typeof data['workHistory_isHired'+j+t]) {\r",
									"          pm.expect(data['workHistory_isHired'+j+t]).to.eql(jsonValue.workHistory[t].isHired);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].isHired, data['workHistory_isHired'+j+t], function () { });\r",
									"\r",
									"          var conisHired = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].isHired).to.eql(conisHired);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isNEDs   *********\r",
									"  pm.test(\"Assert Type of isNED\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isNED).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isNED\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].isNED === typeof data['workHistory_isNED'+j+t]) {\r",
									"          pm.expect(data['workHistory_isNED'+j+t]).to.eql(jsonValue.workHistory[t].isNED);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].isNED, data['workHistory_isNED'+j+t], function () { });\r",
									"\r",
									"          var conisNED = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].isNED).to.eql(conisNED);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : sequenceNumbers   *********\r",
									"  pm.test(\"Assert Type of sequenceNumber\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].sequenceNumber).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of sequenceNumber\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].sequenceNumber === typeof data['workHistory_sequenceNumber'+j+t]) {\r",
									"          pm.expect(data['workHistory_sequenceNumber'+j+t]).to.eql(jsonValue.workHistory[t].sequenceNumber);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].sequenceNumber, data['workHistory_sequenceNumber'+j+t], function () { });\r",
									"\r",
									"          var consequenceNumber = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].sequenceNumber).to.eql(consequenceNumber);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"// Workhistory Compensation assertion\r",
									"jsonWorkHistory=jsonValue.workHistory[t]\r",
									"if(jsonWorkHistory.compensation===null){\r",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation).to.be.eql(data['typeOfObject']);\r",
									"  });\r",
									"}else{\r",
									"\r",
									"//*******Assertion of Key : currencyIds   *********\r",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.currencyId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of currencyId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.currencyId === typeof data['workHistory_compensation_currencyId'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_currencyId'+j+t]).to.eql(jsonWorkHistory.compensation.currencyId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.currencyId, data['workHistory_compensation_currencyId'+j+t], function () { });\r",
									"\r",
									"          var concurrencyId = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.currencyId).to.eql(concurrencyId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : baseSalarys   *********\r",
									"  pm.test(\"Assert Type of baseSalary\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.baseSalary).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of baseSalary\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.baseSalary === typeof data['workHistory_compensation_baseSalary'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_baseSalary'+j+t]).to.eql(jsonWorkHistory.compensation.baseSalary);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.baseSalary, data['workHistory_compensation_baseSalary'+j+t], function () { });\r",
									"\r",
									"          var conbaseSalary = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.baseSalary).to.eql(conbaseSalary);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : totalEstimatedCompensations   *********\r",
									"  pm.test(\"Assert Type of totalEstimatedCompensation\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.totalEstimatedCompensation).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of totalEstimatedCompensation\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.totalEstimatedCompensation === typeof data['workHistory_compensation_totalEstimatedCompensation'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_totalEstimatedCompensation'+j+t]).to.eql(jsonWorkHistory.compensation.totalEstimatedCompensation);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.totalEstimatedCompensation, data['workHistory_compensation_totalEstimatedCompensation'+j+t], function () { });\r",
									"\r",
									"          var contotalEstimatedCompensation = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.totalEstimatedCompensation).to.eql(contotalEstimatedCompensation);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : compensationDates   *********\r",
									"  pm.test(\"Assert Type of compensationDate\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.compensationDate).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of compensationDate\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.compensationDate === typeof data['workHistory_compensation_compensationDate'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_compensationDate'+j+t]).to.eql(jsonWorkHistory.compensation.compensationDate);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.compensationDate, data['workHistory_compensation_compensationDate'+j+t], function () { });\r",
									"\r",
									"          var concompensationDate = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.compensationDate).to.eql(concompensationDate);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"}\r",
									"\r",
									"// //*******Assertion of Key : blocks   *********\r",
									"//   pm.test(\"Assert Type of blocks\"+j, function () {\r",
									"    \r",
									"//     var testResult = pm.expect(typeof jsonValue.blocks).to.be.eql(data['typeOfObject']);\r",
									"//     if (testResult) {\r",
									"//       pm.test(\"Assert value of blocks\"+j, function () {\r",
									"\r",
									"//         if (typeof jsonValue.blocks === typeof data['blocks'+j]) {\r",
									"//           pm.expect(data['blocks'+j]).to.eql(jsonValue.blocks);\r",
									"\r",
									"//         }\r",
									"//         else {\r",
									"//           valCallBack(jsonValue.blocks, data['blocks'+j], function () { });\r",
									"\r",
									"//           var conblocks = conversionData;\r",
									"//           pm.expect(jsonValue.blocks).to.eql(conblocks);\r",
									"//         }\r",
									"//       });\r",
									"//     }\r",
									"//     else { postman.setNextRequest(); }\r",
									"//   });\r",
									"\r",
									"//worklistStages assertions:\r",
									"for(var w=0;w<jsonValue.worklistStages.length;w++){\r",
									"\r",
									"//*******Assertion of Key : worklistStages   *********\r",
									"  pm.test(\"Assert Type of worklistStage\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.worklistStages[w].worklistStage).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of worklistStage\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.worklistStages[w].worklistStage === typeof data['worklistStage'+j+w]) {\r",
									"          pm.expect(data['worklistStage'+j+w]).to.eql(jsonValue.worklistStages[w].worklistStage);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.worklistStages[w].worklistStage, data['worklistStage'+j+w], function () { });\r",
									"\r",
									"          var conworklistStage = conversionData;\r",
									"          pm.expect(jsonValue.worklistStages[w].worklistStage).to.eql(conworklistStage);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : addedAts   *********\r",
									"  pm.test(\"Assert Type of addedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.worklistStages[w].addedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of addedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.worklistStages[w].addedAt === typeof data['worklistStages_addedAt'+j+w]) {\r",
									"          pm.expect(data['worklistStages_addedAt'+j+w]).to.eql(jsonValue.worklistStages[w].addedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.worklistStages[w].addedAt, data['worklistStages_addedAt'+j+w], function () { });\r",
									"\r",
									"          var conaddedAt = conversionData;\r",
									"          pm.expect(jsonValue.worklistStages[w].addedAt).to.eql(conaddedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"\r",
									"//*******Assertion of Key : geoMobilityNotess   *********\r",
									"  pm.test(\"Assert Type of geoMobilityNotes\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.geoMobilityNotes).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of geoMobilityNotes\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.geoMobilityNotes === typeof data['geoMobilityNotes'+j]) {\r",
									"          pm.expect(data['geoMobilityNotes'+j]).to.eql(jsonValue.geoMobilityNotes);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.geoMobilityNotes, data['geoMobilityNotes'+j], function () { });\r",
									"\r",
									"          var congeoMobilityNotes = conversionData;\r",
									"          pm.expect(jsonValue.geoMobilityNotes).to.eql(congeoMobilityNotes);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : birthdays   *********\r",
									"  pm.test(\"Assert Type of birthday\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.birthday).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of birthday\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.birthday === typeof data['birthday'+j]) {\r",
									"          pm.expect(data['birthday'+j]).to.eql(jsonValue.birthday);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.birthday, data['birthday'+j], function () { });\r",
									"\r",
									"          var conbirthday = conversionData;\r",
									"          pm.expect(jsonValue.birthday).to.eql(conbirthday);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : principalNationalityIds   *********\r",
									"  pm.test(\"Assert Type of principalNationalityId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.principalNationalityId).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of principalNationalityId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.principalNationalityId === typeof data['principalNationalityId'+j]) {\r",
									"          pm.expect(data['principalNationalityId'+j]).to.eql(jsonValue.principalNationalityId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.principalNationalityId, data['principalNationalityId'+j], function () { });\r",
									"\r",
									"          var conprincipalNationalityId = conversionData;\r",
									"          pm.expect(jsonValue.principalNationalityId).to.eql(conprincipalNationalityId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//Launguages assertions:\r",
									"for(var s=0;s<jsonValue.languages.length;s++){\r",
									"//*******Assertion of Key : languageIds   *********\r",
									"  pm.test(\"Assert Type of languageId\"+j+s, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].languageId).to.be.eql(data['typeOfObject']);\r",
									"   \r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of languageId\"+j+s, function () {\r",
									"\r",
									"        if (typeof jsonValue.languages[s].languageId === typeof data['languages_languageId'+j+s]) {\r",
									"          pm.expect(data['languages_languageId'+j+s]).to.eql(jsonValue.languages[s].languageId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.languages[s].languageId, data['languages_languageId'+j+s], function () { });\r",
									"\r",
									"          var conlanguageId = conversionData;\r",
									"          pm.expect(jsonValue.languages[s].languageId).to.eql(conlanguageId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : fluencyIds   *********\r",
									"  pm.test(\"Assert Type of fluencyId\"+j+s, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].fluencyId).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of fluencyId\"+j+s, function () {\r",
									"\r",
									"        if (typeof jsonValue.languages[s].fluencyId === typeof data['languages_fluencyId'+j+s]) {\r",
									"          pm.expect(data['languages_fluencyId'+j+s]).to.eql(jsonValue.languages[s].fluencyId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.languages[s].fluencyId, data['languages_fluencyId'+j+s], function () { });\r",
									"\r",
									"          var confluencyId = conversionData;\r",
									"          pm.expect(jsonValue.languages[s].fluencyId).to.eql(confluencyId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//*******Assertion of Key : homeCountryIds   *********\r",
									"  pm.test(\"Assert Type of homeCountryId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.homeCountryId).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of homeCountryId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.homeCountryId === typeof data['homeCountryId'+j]) {\r",
									"          pm.expect(data['homeCountryId'+j]).to.eql(jsonValue.homeCountryId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.homeCountryId, data['homeCountryId'+j], function () { });\r",
									"\r",
									"          var conhomeCountryId = conversionData;\r",
									"          pm.expect(jsonValue.homeCountryId).to.eql(conhomeCountryId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : maritalStatusIds   *********\r",
									"  pm.test(\"Assert Type of maritalStatusId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.maritalStatusId).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of maritalStatusId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.maritalStatusId === typeof data['maritalStatusId'+j]) {\r",
									"          pm.expect(data['maritalStatusId'+j]).to.eql(jsonValue.maritalStatusId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.maritalStatusId, data['maritalStatusId'+j], function () { });\r",
									"\r",
									"          var conmaritalStatusId = conversionData;\r",
									"          pm.expect(jsonValue.maritalStatusId).to.eql(conmaritalStatusId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : statusIds   *********\r",
									"  pm.test(\"Assert Type of statusId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.statusId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of statusId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.statusId === typeof data['statusId'+j]) {\r",
									"          pm.expect(data['statusId'+j]).to.eql(jsonValue.statusId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.statusId, data['statusId'+j], function () { });\r",
									"\r",
									"          var constatusId = conversionData;\r",
									"          pm.expect(jsonValue.statusId).to.eql(constatusId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : spouseNames   *********\r",
									"  pm.test(\"Assert Type of spouseName\"+j, function () {\r",
									"    if(jsonValue.spouseName===null){\r",
									"        var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of spouseName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.spouseName === typeof data['spouseName'+j]) {\r",
									"          pm.expect(data['spouseName'+j]).to.eql(jsonValue.spouseName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.spouseName, data['spouseName'+j], function () { });\r",
									"\r",
									"          var conspouseName = conversionData;\r",
									"          pm.expect(jsonValue.spouseName).to.eql(conspouseName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : childrens   *********\r",
									"  pm.test(\"Assert Type of children\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.children).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of children\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.children === typeof data['children'+j]) {\r",
									"          pm.expect(data['children'+j]).to.eql(jsonValue.children);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.children, data['children'+j], function () { });\r",
									"\r",
									"          var conchildren = conversionData;\r",
									"          pm.expect(jsonValue.children).to.eql(conchildren);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : whoKnowsBests   *********\r",
									"  pm.test(\"Assert Type of whoKnowsBest\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.whoKnowsBest).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of whoKnowsBest\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.whoKnowsBest === typeof data['whoKnowsBest'+j]) {\r",
									"          pm.expect(data['whoKnowsBest'+j]).to.eql(jsonValue.whoKnowsBest);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.whoKnowsBest, data['whoKnowsBest'+j], function () { });\r",
									"\r",
									"          var conwhoKnowsBest = conversionData;\r",
									"          pm.expect(jsonValue.whoKnowsBest).to.eql(conwhoKnowsBest);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : relationshipss   *********\r",
									"  pm.test(\"Assert Type of relationships\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.relationships).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of relationships\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.relationships === typeof data['relationships'+j]) {\r",
									"          pm.expect(data['relationships'+j]).to.eql(jsonValue.relationships);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.relationships, data['relationships'+j], function () { });\r",
									"\r",
									"          var conrelationships = conversionData;\r",
									"          pm.expect(jsonValue.relationships).to.eql(conrelationships);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"  \r",
									"//*******Assertion of Key : assignmentIdss   *********\r",
									"for(var v=0;v<jsonValue.assignmentIds.length;v++){\r",
									"\r",
									"  pm.test(\"Assert Type of assignmentIds\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.assignmentIds).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of assignmentIds\"+v+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assignmentIds[v] === typeof data['assignmentIds'+v+j]) {\r",
									"          pm.expect(data['assignmentIds'+v+j]).to.eql(jsonValue.assignmentIds[0]);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assignmentIds[v], data['assignmentIds'+j], function () { });\r",
									"\r",
									"          var conassignmentIds = conversionData;\r",
									"          pm.expect(jsonValue.assignmentIds[v]).to.eql(conassignmentIds);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": \"10464\",\r\n    \"worklistStage\": \"Interested\",\r\n    \"isMove\": true \r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/assignments/26177/candidates/worklist",
							"host": [
								"{{url}}"
							],
							"path": [
								"assignments",
								"26177",
								"candidates",
								"worklist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put_Edit Candidates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"var conversionData;\r",
									"var jsonValue=jsonData;\r",
									"\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean'){\r",
									"        switch(typeof value){\r",
									"            case \"string\":\r",
									"               switch(value.toLowerCase()) \r",
									"                         {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"\r",
									"                callback(conversionData);\r",
									"                break;  \r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"    switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        \r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for (j=0;j<jsonData.length;j++){\r",
									"\r",
									"  jsonValue=jsonData[j];\r",
									"  var k=0;\r",
									"\r",
									"  // pm.environment.set(\"candidateListsStatusId\",jsonValue.candidateListsStatusId);\r",
									"  // pm.environment.set(\"candidateListsStatusUpdatedOn\",jsonValue.candidateListsStatusUpdatedOn);\r",
									"  // pm.environment.set(\"fileNoteId\", jsonData[j].fileNoteId);\r",
									"\r",
									"  pm.test(\"Check if Assignment object contains all provided keys\",function()\r",
									"    {\r",
									"      pm.expect(jsonValue).to.have.all.keys('boardexStatus','boardexData','DCFStatus','createdAt','lastModifiedAt','id','firstName','lastName','group1','group2','priorityId','statusIsActive','todoNote','pipelineStage','linkedinProfileUrl','candidateListsStatusId','candidateListsStatusUpdatedOn','assistant','qualifications','contactDetails','workHistory','blocks','worklistStages','geoMobilityNotes','birthday','principalNationalityId','languages','homeCountryId','maritalStatusId','statusId','spouseName','children','whoKnowsBest','relationships','assignmentIds');\r",
									"  }); \r",
									"\r",
									"//    pm.test(\"Check if ETP Relationship assistant object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.assistant).to.have.all.keys('phoneNumber','fullName','email','extension');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship qualifications object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.qualifications).to.have.all.keys('earnedAt','title','institution','country');\r",
									"//   }); \r",
									"\r",
									"// pm.test(\"Check if ETP Relationship contactDetails object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.contactDetails).to.have.all.keys('label','value','icon','isDefault','lastModifiedAt');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship workHistory object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.workHistory).to.have.all.keys('startedAt','endedAt','title','company','country','isPrimary','isHired','isNED','sequenceNumber','compensation');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship Launguages object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.languages).to.have.all.keys('languageId','fluencyId');\r",
									"//   });\r",
									"\r",
									"  //*******Assertion of Key : boardexStatuss   *********\r",
									"  pm.test(\"Assert Type of boardexStatus\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.boardexStatus).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of boardexStatus\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.boardexStatus === typeof data['callList_boardexStatus'+j]) {\r",
									"          pm.expect(data['callList_boardexStatus'+j]).to.eql(jsonValue.boardexStatus);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.boardexStatus, data['callList_boardexStatus'+j], function () { });\r",
									"\r",
									"          var conboardexStatus = conversionData;\r",
									"          pm.expect(jsonValue.boardexStatus).to.eql(conboardexStatus);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : boardexDatas   *********\r",
									"  pm.test(\"Assert Type of boardexData\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.boardexData).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of boardexData\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.boardexData === typeof data['boardexData'+j]) {\r",
									"          pm.expect(data['boardexData'+j]).to.eql(jsonValue.boardexData);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.boardexData, data['boardexData'+j], function () { });\r",
									"\r",
									"          var conboardexData = conversionData;\r",
									"          pm.expect(jsonValue.boardexData).to.eql(conboardexData);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"  //*******Assertion of Key : DCFStatuss   *********\r",
									"  pm.test(\"Assert Type of DCFStatus\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.DCFStatus).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of DCFStatus\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.DCFStatus === typeof data['callList_DCFStatus'+j]) {\r",
									"          pm.expect(data['callList_DCFStatus'+j]).to.eql(jsonValue.DCFStatus);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.DCFStatus, data['callList_DCFStatus'+j], function () { });\r",
									"\r",
									"          var conDCFStatus = conversionData;\r",
									"          pm.expect(jsonValue.DCFStatus).to.eql(conDCFStatus);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : createdAts   *********\r",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of createdAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.createdAt === typeof data['createdAt'+j]) {\r",
									"          pm.expect(data['createdAt'+j]).to.eql(jsonValue.createdAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.createdAt, data['createdAt'+j], function () { });\r",
									"\r",
									"          var concreatedAt = conversionData;\r",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.lastModifiedAt === typeof data['lastModifiedAt'+j]) {\r",
									"          pm.expect(data['lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.lastModifiedAt, data['lastModifiedAt'+j], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : ids   *********\r",
									"  pm.test(\"Assert Type of id\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of id\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.id === typeof data['id'+j]) {\r",
									"          pm.expect(data['id'+j]).to.eql(jsonValue.id);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.id, data['id'+j], function () { });\r",
									"\r",
									"          var conid = conversionData;\r",
									"          pm.expect(jsonValue.id).to.eql(conid);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : firstNames   *********\r",
									"  pm.test(\"Assert Type of firstName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.firstName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of firstName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.firstName === typeof data['firstName'+j]) {\r",
									"          pm.expect(data['firstName'+j]).to.eql(jsonValue.firstName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.firstName, data['firstName'+j], function () { });\r",
									"\r",
									"          var confirstName = conversionData;\r",
									"          pm.expect(jsonValue.firstName).to.eql(confirstName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastNames   *********\r",
									"  pm.test(\"Assert Type of lastName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.lastName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.lastName === typeof data['lastName'+j]) {\r",
									"          pm.expect(data['lastName'+j]).to.eql(jsonValue.lastName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.lastName, data['lastName'+j], function () { });\r",
									"\r",
									"          var conlastName = conversionData;\r",
									"          pm.expect(jsonValue.lastName).to.eql(conlastName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : group1s   *********\r",
									"  pm.test(\"Assert Type of group1\"+j, function () {\r",
									"    if(jsonValue.group1===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of group1\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.group1 === typeof data['group1'+j]) {\r",
									"          pm.expect(data['group1'+j]).to.eql(jsonValue.group1);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.group1, data['group1'+j], function () { });\r",
									"\r",
									"          var congroup1 = conversionData;\r",
									"          pm.expect(jsonValue.group1).to.eql(congroup1);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : group2s   *********\r",
									"  pm.test(\"Assert Type of group2\"+j, function () {\r",
									"     if(jsonValue.group2===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of group2\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.group2 === typeof data['group2'+j]) {\r",
									"          pm.expect(data['group2'+j]).to.eql(jsonValue.group2);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.group2, data['group2'+j], function () { });\r",
									"\r",
									"          var congroup2 = conversionData;\r",
									"          pm.expect(jsonValue.group2).to.eql(congroup2);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : priorityIds   *********\r",
									"  pm.test(\"Assert Type of priorityId\"+j, function () {\r",
									"     if(jsonValue.priorityId===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"\r",
									"    var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of priorityId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.priorityId === typeof data['priorityId'+j]) {\r",
									"          pm.expect(data['priorityId'+j]).to.eql(jsonValue.priorityId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.priorityId, data['priorityId'+j], function () { });\r",
									"\r",
									"          var conpriorityId = conversionData;\r",
									"          pm.expect(jsonValue.priorityId).to.eql(conpriorityId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : statusIsActives   *********\r",
									"  pm.test(\"Assert Type of statusIsActive\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.statusIsActive).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of statusIsActive\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.statusIsActive === typeof data['statusIsActive'+j]) {\r",
									"          pm.expect(data['statusIsActive'+j]).to.eql(jsonValue.statusIsActive);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.statusIsActive, data['statusIsActive'+j], function () { });\r",
									"\r",
									"          var constatusIsActive = conversionData;\r",
									"          pm.expect(jsonValue.statusIsActive).to.eql(constatusIsActive);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : todoNotes   *********\r",
									"  pm.test(\"Assert Type of todoNote\"+j, function () {\r",
									"     if(jsonValue.todoNote===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of todoNote\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.todoNote === typeof data['todoNote'+j]) {\r",
									"          pm.expect(data['todoNote'+j]).to.eql(jsonValue.todoNote);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.todoNote, data['todoNote'+j], function () { });\r",
									"\r",
									"          var contodoNote = conversionData;\r",
									"          pm.expect(jsonValue.todoNote).to.eql(contodoNote);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : pipelineStages   *********\r",
									"  pm.test(\"Assert Type of pipelineStage\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.pipelineStage).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of pipelineStage\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.pipelineStage === typeof data['pipelineStage'+j]) {\r",
									"          pm.expect(data['pipelineStage'+j]).to.eql(jsonValue.pipelineStage);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.pipelineStage, data['pipelineStage'+j], function () { });\r",
									"\r",
									"          var conpipelineStage = conversionData;\r",
									"          pm.expect(jsonValue.pipelineStage).to.eql(conpipelineStage);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : linkedinProfileUrls   *********\r",
									"  pm.test(\"Assert Type of linkedinProfileUrl\"+j, function () {\r",
									"    if(jsonValue.linkedinProfileUrl===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of linkedinProfileUrl\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.linkedinProfileUrl === typeof data['linkedinProfileUrl'+j]) {\r",
									"          pm.expect(data['linkedinProfileUrl'+j]).to.eql(jsonValue.linkedinProfileUrl);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.linkedinProfileUrl, data['linkedinProfileUrl'+j], function () { });\r",
									"\r",
									"          var conlinkedinProfileUrl = conversionData;\r",
									"          pm.expect(jsonValue.linkedinProfileUrl).to.eql(conlinkedinProfileUrl);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : candidateListsStatusIds   *********\r",
									"  pm.test(\"Assert Type of candidateListsStatusId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.candidateListsStatusId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of candidateListsStatusId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.candidateListsStatusId === typeof pm.environment.get(\"candidateListsStatusId\")) {\r",
									"          pm.expect(pm.environment.get(\"candidateListsStatusId\")).to.eql(jsonValue.candidateListsStatusId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.candidateListsStatusId, pm.environment.get(\"candidateListsStatusId\"), function () { });\r",
									"\r",
									"          var concandidateListsStatusId = conversionData;\r",
									"          pm.expect(jsonValue.candidateListsStatusId).to.eql(concandidateListsStatusId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : candidateListsStatusUpdatedOns   *********\r",
									"  pm.test(\"Assert Type of candidateListsStatusUpdatedOn\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.candidateListsStatusUpdatedOn).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of candidateListsStatusUpdatedOn\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.candidateListsStatusUpdatedOn === typeof pm.environment.get(\"candidateListsStatusUpdatedOn\")) {\r",
									"          pm.expect(pm.environment.get(\"candidateListsStatusUpdatedOn\")).to.eql(jsonValue.candidateListsStatusUpdatedOn);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.candidateListsStatusUpdatedOn, pm.environment.get(\"candidateListsStatusUpdatedOn\"), function () { });\r",
									"\r",
									"          var concandidateListsStatusUpdatedOn = conversionData;\r",
									"          pm.expect(jsonValue.candidateListsStatusUpdatedOn).to.eql(concandidateListsStatusUpdatedOn);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"  //verifying the Assistant assertion: \r",
									"\r",
									"  for(var u=0;u<jsonValue.assistant.length;u++){\r",
									"//*******Assertion of Key : phoneNumbers   *********\r",
									"  pm.test(\"Assert Type of phoneNumber\"+j, function () {\r",
									"    if(jsonValue.assistant[u].phoneNumber===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of phoneNumber\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].phoneNumber === typeof data['assistant_phoneNumber'+j+u]) {\r",
									"          pm.expect(data['assistant_phoneNumber'+j+u]).to.eql(jsonValue.assistant[u].phoneNumber);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].phoneNumber, data['assistant_phoneNumber'+j+u], function () { });\r",
									"\r",
									"          var conphoneNumber = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].phoneNumber).to.eql(conphoneNumber);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : fullNames   *********\r",
									"  pm.test(\"Assert Type of fullName\"+j, function () {\r",
									"    if(jsonValue.assistant[u].fullName===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of fullName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].fullName === typeof data['assistant_fullName'+j+u]) {\r",
									"          pm.expect(data['assistant_fullName'+j+u]).to.eql(jsonValue.assistant[u].fullName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].fullName, data['assistant_fullName'+j+u], function () { });\r",
									"\r",
									"          var confullName = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].fullName).to.eql(confullName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : emails   *********\r",
									"  pm.test(\"Assert Type of email\"+j, function () {\r",
									"    if(jsonValue.assistant[u].email===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of email\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].email === typeof data['assistant_email'+j+u]) {\r",
									"          pm.expect(data['assistant_email'+j+u]).to.eql(jsonValue.assistant[u].email);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].email, data['assistant_email'+j+u], function () { });\r",
									"\r",
									"          var conemail = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].email).to.eql(conemail);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : extensions   *********\r",
									"  pm.test(\"Assert Type of extension\"+j, function () {\r",
									"    if(jsonValue.assistant[u].extension===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of extension\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].extension === typeof data['assistant_extension'+j+u]) {\r",
									"          pm.expect(data['assistant_extension'+j+u]).to.eql(jsonValue.assistant[u].extension);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].extension, data['assistant_extension'+j+u], function () { });\r",
									"\r",
									"          var conextension = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].extension).to.eql(conextension);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"}\r",
									"\r",
									"// Verifying Qualification assertions:\r",
									"for(var m=0;m<jsonValue.qualifications.length;m++){\r",
									"\r",
									"  //*******Assertion of Key : earnedAts   *********\r",
									"  pm.test(\"Assert Type of earnedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].earnedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of earnedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].earnedAt === typeof data['qualifications_earnedAt'+j+m]) {\r",
									"          pm.expect(data['qualifications_earnedAt'+j+m]).to.eql(jsonValue.qualifications[m].earnedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].earnedAt, data['qualifications_earnedAt'+j+m], function () { });\r",
									"\r",
									"          var conearnedAt = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].earnedAt).to.eql(conearnedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].title === typeof data['qualifications_title'+j+m]) {\r",
									"          pm.expect(data['qualifications_title'+j+m]).to.eql(jsonValue.qualifications[m].title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].title, data['qualifications_title'+j+m], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : institutions   *********\r",
									"  pm.test(\"Assert Type of institution\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].institution).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of institution\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].institution === typeof data['qualifications_institution'+j+m]) {\r",
									"          pm.expect(data['qualifications_institution'+j+m]).to.eql(jsonValue.qualifications[m].institution);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].institution, data['qualifications_institution'+j+m], function () { });\r",
									"\r",
									"          var coninstitution = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].institution).to.eql(coninstitution);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : countrys   *********\r",
									"  pm.test(\"Assert Type of country\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].country).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of country\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].country === typeof data['qualifications_country'+j+m]) {\r",
									"          pm.expect(data['qualifications_country'+j+m]).to.eql(jsonValue.qualifications[m].country);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].country, data['qualifications_country'+j+m], function () { });\r",
									"\r",
									"          var concountry = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].country).to.eql(concountry);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"}\r",
									"\r",
									"//verifying the contactDetails assertions:\r",
									"\r",
									"for(var n=0;n<jsonValue.contactDetails.length;n++){\r",
									"\r",
									"//*******Assertion of Key : labels   *********\r",
									"  pm.test(\"Assert Type of label\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].label).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of label\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].label === typeof data['contactDetails_label'+j+n]) {\r",
									"          pm.expect(data['contactDetails_label'+j+n]).to.eql(jsonValue.contactDetails[n].label);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].label, data['contactDetails_label'+j+n], function () { });\r",
									"\r",
									"          var conlabel = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].label).to.eql(conlabel);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : values   *********\r",
									"  pm.test(\"Assert Type of value\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].value).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of value\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].value === typeof data['contactDetails_value'+j+n]) {\r",
									"          pm.expect(data['contactDetails_value'+j+n]).to.eql(jsonValue.contactDetails[n].value);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].value, data['contactDetails_value'+j+n], function () { });\r",
									"\r",
									"          var convalue = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].value).to.eql(convalue);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : icons   *********\r",
									"  pm.test(\"Assert Type of icon\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].icon).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of icon\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].icon === typeof data['contactDetails_icon'+j+n]) {\r",
									"          pm.expect(data['contactDetails_icon'+j+n]).to.eql(jsonValue.contactDetails[n].icon);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].icon, data['contactDetails_icon'+j+n], function () { });\r",
									"\r",
									"          var conicon = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].icon).to.eql(conicon);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isDefaults   *********\r",
									"  pm.test(\"Assert Type of isDefault\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].isDefault).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isDefault\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].isDefault === typeof data['contactDetails_isDefault'+j+n]) {\r",
									"          pm.expect(data['contactDetails_isDefault'+j+n]).to.eql(jsonValue.contactDetails[n].isDefault);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].isDefault, data['contactDetails_isDefault'+j+n], function () { });\r",
									"\r",
									"          var conisDefault = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].isDefault).to.eql(conisDefault);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].lastModifiedAt === typeof data['contactDetails_lastModifiedAt'+j+n]) {\r",
									"          pm.expect(data['contactDetails_lastModifiedAt'+j+n]).to.eql(jsonValue.contactDetails[n].lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].lastModifiedAt, data['contactDetails_lastModifiedAt'+j+n], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//Workhistory assertions:\r",
									"\r",
									"for(var t=0;t<jsonValue.workHistory.length;t++){\r",
									"\r",
									"//*******Assertion of Key : startedAts   *********\r",
									"  pm.test(\"Assert Type of startedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].startedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of startedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].startedAt === typeof data['workHistory_startedAt'+j+t]) {\r",
									"          pm.expect(data['workHistory_startedAt'+j+t]).to.eql(jsonValue.workHistory[t].startedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].startedAt, data['workHistory_startedAt'+j+t], function () { });\r",
									"\r",
									"          var constartedAt = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].startedAt).to.eql(constartedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : endedAts   *********\r",
									"  pm.test(\"Assert Type of endedAt\"+j, function () {\r",
									"    if(jsonValue.workHistory[t].endedAt===null){\r",
									"       var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of endedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].endedAt === typeof data['workHistory_endedAt'+j+t]) {\r",
									"          pm.expect(data['workHistory_endedAt'+j+t]).to.eql(jsonValue.workHistory[t].endedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].endedAt, data['workHistory_endedAt'+j+t], function () { });\r",
									"\r",
									"          var conendedAt = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].endedAt).to.eql(conendedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].title === typeof data['workHistory_title'+j+t]) {\r",
									"          pm.expect(data['workHistory_title'+j+t]).to.eql(jsonValue.workHistory[t].title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].title, data['workHistory_title'+j+t], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : companys   *********\r",
									"  pm.test(\"Assert Type of company\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].company).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of company\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].company === typeof data['workHistory_company'+j+t]) {\r",
									"          pm.expect(data['workHistory_company'+j+t]).to.eql(jsonValue.workHistory[t].company);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].company, data['workHistory_company'+j+t], function () { });\r",
									"\r",
									"          var concompany = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].company).to.eql(concompany);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : countrys   *********\r",
									"  pm.test(\"Assert Type of country\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].country).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of country\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].country === typeof data['workHistory_country'+j+t]) {\r",
									"          pm.expect(data['workHistory_country'+j+t]).to.eql(jsonValue.workHistory[t].country);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].country, data['workHistory_country'+j+t], function () { });\r",
									"\r",
									"          var concountry = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].country).to.eql(concountry);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isHireds   *********\r",
									"  pm.test(\"Assert Type of isHired\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isHired).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isHired\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].isHired === typeof data['workHistory_isHired'+j+t]) {\r",
									"          pm.expect(data['workHistory_isHired'+j+t]).to.eql(jsonValue.workHistory[t].isHired);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].isHired, data['workHistory_isHired'+j+t], function () { });\r",
									"\r",
									"          var conisHired = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].isHired).to.eql(conisHired);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isNEDs   *********\r",
									"  pm.test(\"Assert Type of isNED\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isNED).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isNED\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].isNED === typeof data['workHistory_isNED'+j+t]) {\r",
									"          pm.expect(data['workHistory_isNED'+j+t]).to.eql(jsonValue.workHistory[t].isNED);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].isNED, data['workHistory_isNED'+j+t], function () { });\r",
									"\r",
									"          var conisNED = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].isNED).to.eql(conisNED);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : sequenceNumbers   *********\r",
									"  pm.test(\"Assert Type of sequenceNumber\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].sequenceNumber).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of sequenceNumber\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].sequenceNumber === typeof data['workHistory_sequenceNumber'+j+t]) {\r",
									"          pm.expect(data['workHistory_sequenceNumber'+j+t]).to.eql(jsonValue.workHistory[t].sequenceNumber);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].sequenceNumber, data['workHistory_sequenceNumber'+j+t], function () { });\r",
									"\r",
									"          var consequenceNumber = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].sequenceNumber).to.eql(consequenceNumber);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"// Workhistory Compensation assertion\r",
									"jsonWorkHistory=jsonValue.workHistory[t]\r",
									"if(jsonWorkHistory.compensation===null){\r",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation).to.be.eql(data['typeOfObject']);\r",
									"  });\r",
									"}else{\r",
									"\r",
									"//*******Assertion of Key : currencyIds   *********\r",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.currencyId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of currencyId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.currencyId === typeof data['workHistory_compensation_currencyId'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_currencyId'+j+t]).to.eql(jsonWorkHistory.compensation.currencyId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.currencyId, data['workHistory_compensation_currencyId'+j+t], function () { });\r",
									"\r",
									"          var concurrencyId = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.currencyId).to.eql(concurrencyId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : baseSalarys   *********\r",
									"  pm.test(\"Assert Type of baseSalary\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.baseSalary).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of baseSalary\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.baseSalary === typeof data['workHistory_compensation_baseSalary'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_baseSalary'+j+t]).to.eql(jsonWorkHistory.compensation.baseSalary);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.baseSalary, data['workHistory_compensation_baseSalary'+j+t], function () { });\r",
									"\r",
									"          var conbaseSalary = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.baseSalary).to.eql(conbaseSalary);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : totalEstimatedCompensations   *********\r",
									"  pm.test(\"Assert Type of totalEstimatedCompensation\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.totalEstimatedCompensation).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of totalEstimatedCompensation\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.totalEstimatedCompensation === typeof data['workHistory_compensation_totalEstimatedCompensation'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_totalEstimatedCompensation'+j+t]).to.eql(jsonWorkHistory.compensation.totalEstimatedCompensation);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.totalEstimatedCompensation, data['workHistory_compensation_totalEstimatedCompensation'+j+t], function () { });\r",
									"\r",
									"          var contotalEstimatedCompensation = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.totalEstimatedCompensation).to.eql(contotalEstimatedCompensation);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : compensationDates   *********\r",
									"  pm.test(\"Assert Type of compensationDate\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.compensationDate).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of compensationDate\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.compensationDate === typeof data['workHistory_compensation_compensationDate'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_compensationDate'+j+t]).to.eql(jsonWorkHistory.compensation.compensationDate);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.compensationDate, data['workHistory_compensation_compensationDate'+j+t], function () { });\r",
									"\r",
									"          var concompensationDate = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.compensationDate).to.eql(concompensationDate);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"}\r",
									"\r",
									"//*******Assertion of Key : blocks   *********\r",
									"  pm.test(\"Assert Type of blocks\"+j, function () {\r",
									"    \r",
									"    var testResult = pm.expect(typeof jsonValue.blocks).to.be.eql(data['typeOfObject']);\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of blocks\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.blocks === typeof data['blocks'+j]) {\r",
									"          pm.expect(data['blocks'+j]).to.eql(jsonValue.blocks);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.blocks, data['blocks'+j], function () { });\r",
									"\r",
									"          var conblocks = conversionData;\r",
									"          pm.expect(jsonValue.blocks).to.eql(conblocks);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//worklistStages assertions:\r",
									"for(var w=0;w<jsonValue.worklistStages.length;w++){\r",
									"\r",
									"//*******Assertion of Key : worklistStages   *********\r",
									"  pm.test(\"Assert Type of worklistStage\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.worklistStages[w].worklistStage).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of worklistStage\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.worklistStages[w].worklistStage === typeof data['worklistStages_worklistStage'+j+w]) {\r",
									"          pm.expect(data['worklistStages_worklistStage'+j+w]).to.eql(jsonValue.worklistStages[w].worklistStage);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.worklistStages[w].worklistStage, data['worklistStages_worklistStage'+j+w], function () { });\r",
									"\r",
									"          var conworklistStage = conversionData;\r",
									"          pm.expect(jsonValue.worklistStages[w].worklistStage).to.eql(conworklistStage);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : addedAts   *********\r",
									"  pm.test(\"Assert Type of addedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.worklistStages[w].addedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of addedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.worklistStages[w].addedAt === typeof data['worklistStages_addedAt'+j+w]) {\r",
									"          pm.expect(data['worklistStages_addedAt'+j+w]).to.eql(jsonValue.worklistStages[w].addedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.worklistStages[w].addedAt, data['worklistStages_addedAt'+j+w], function () { });\r",
									"\r",
									"          var conaddedAt = conversionData;\r",
									"          pm.expect(jsonValue.worklistStages[w].addedAt).to.eql(conaddedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"\r",
									"//*******Assertion of Key : geoMobilityNotess   *********\r",
									"  pm.test(\"Assert Type of geoMobilityNotes\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.geoMobilityNotes).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of geoMobilityNotes\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.geoMobilityNotes === typeof data['geoMobilityNotes'+j]) {\r",
									"          pm.expect(data['geoMobilityNotes'+j]).to.eql(jsonValue.geoMobilityNotes);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.geoMobilityNotes, data['geoMobilityNotes'+j], function () { });\r",
									"\r",
									"          var congeoMobilityNotes = conversionData;\r",
									"          pm.expect(jsonValue.geoMobilityNotes).to.eql(congeoMobilityNotes);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : birthdays   *********\r",
									"  pm.test(\"Assert Type of birthday\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.birthday).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of birthday\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.birthday === typeof data['birthday'+j]) {\r",
									"          pm.expect(data['birthday'+j]).to.eql(jsonValue.birthday);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.birthday, data['birthday'+j], function () { });\r",
									"\r",
									"          var conbirthday = conversionData;\r",
									"          pm.expect(jsonValue.birthday).to.eql(conbirthday);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : principalNationalityIds   *********\r",
									"  pm.test(\"Assert Type of principalNationalityId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.principalNationalityId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of principalNationalityId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.principalNationalityId === typeof data['principalNationalityId'+j]) {\r",
									"          pm.expect(data['principalNationalityId'+j]).to.eql(jsonValue.principalNationalityId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.principalNationalityId, data['principalNationalityId'+j], function () { });\r",
									"\r",
									"          var conprincipalNationalityId = conversionData;\r",
									"          pm.expect(jsonValue.principalNationalityId).to.eql(conprincipalNationalityId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//Launguages assertions:\r",
									"for(var s=0;s<jsonValue.languages.length;s++){\r",
									"//*******Assertion of Key : languageIds   *********\r",
									"  pm.test(\"Assert Type of languageId\"+j+s, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].languageId).to.be.eql(data['typeOfString']);\r",
									"   \r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of languageId\"+j+s, function () {\r",
									"\r",
									"        if (typeof jsonValue.languages[s].languageId === typeof data['languages_languageId'+j+s]) {\r",
									"          pm.expect(data['languages_languageId'+j+s]).to.eql(jsonValue.languages[s].languageId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.languages[s].languageId, data['languages_languageId'+j+s], function () { });\r",
									"\r",
									"          var conlanguageId = conversionData;\r",
									"          pm.expect(jsonValue.languages[s].languageId).to.eql(conlanguageId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : fluencyIds   *********\r",
									"  pm.test(\"Assert Type of fluencyId\"+j+s, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].fluencyId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of fluencyId\"+j+s, function () {\r",
									"\r",
									"        if (typeof jsonValue.languages[s].fluencyId === typeof data['languages_fluencyId'+j+s]) {\r",
									"          pm.expect(data['languages_fluencyId'+j+s]).to.eql(jsonValue.languages[s].fluencyId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.languages[s].fluencyId, data['languages_fluencyId'+j+s], function () { });\r",
									"\r",
									"          var confluencyId = conversionData;\r",
									"          pm.expect(jsonValue.languages[s].fluencyId).to.eql(confluencyId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//*******Assertion of Key : homeCountryIds   *********\r",
									"  pm.test(\"Assert Type of homeCountryId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.homeCountryId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of homeCountryId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.homeCountryId === typeof data['homeCountryId'+j]) {\r",
									"          pm.expect(data['homeCountryId'+j]).to.eql(jsonValue.homeCountryId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.homeCountryId, data['homeCountryId'+j], function () { });\r",
									"\r",
									"          var conhomeCountryId = conversionData;\r",
									"          pm.expect(jsonValue.homeCountryId).to.eql(conhomeCountryId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : maritalStatusIds   *********\r",
									"  pm.test(\"Assert Type of maritalStatusId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.maritalStatusId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of maritalStatusId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.maritalStatusId === typeof data['maritalStatusId'+j]) {\r",
									"          pm.expect(data['maritalStatusId'+j]).to.eql(jsonValue.maritalStatusId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.maritalStatusId, data['maritalStatusId'+j], function () { });\r",
									"\r",
									"          var conmaritalStatusId = conversionData;\r",
									"          pm.expect(jsonValue.maritalStatusId).to.eql(conmaritalStatusId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : statusIds   *********\r",
									"  pm.test(\"Assert Type of statusId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.statusId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of statusId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.statusId === typeof data['statusId'+j]) {\r",
									"          pm.expect(data['statusId'+j]).to.eql(jsonValue.statusId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.statusId, data['statusId'+j], function () { });\r",
									"\r",
									"          var constatusId = conversionData;\r",
									"          pm.expect(jsonValue.statusId).to.eql(constatusId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : spouseNames   *********\r",
									"  pm.test(\"Assert Type of spouseName\"+j, function () {\r",
									"    if(jsonValue.spouseName===null){\r",
									"        var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of spouseName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.spouseName === typeof data['spouseName'+j]) {\r",
									"          pm.expect(data['spouseName'+j]).to.eql(jsonValue.spouseName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.spouseName, data['spouseName'+j], function () { });\r",
									"\r",
									"          var conspouseName = conversionData;\r",
									"          pm.expect(jsonValue.spouseName).to.eql(conspouseName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : childrens   *********\r",
									"  pm.test(\"Assert Type of children\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.children).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of children\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.children === typeof data['children'+j]) {\r",
									"          pm.expect(data['children'+j]).to.eql(jsonValue.children);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.children, data['children'+j], function () { });\r",
									"\r",
									"          var conchildren = conversionData;\r",
									"          pm.expect(jsonValue.children).to.eql(conchildren);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : whoKnowsBests   *********\r",
									"  pm.test(\"Assert Type of whoKnowsBest\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.whoKnowsBest).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of whoKnowsBest\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.whoKnowsBest === typeof data['whoKnowsBest'+j]) {\r",
									"          pm.expect(data['whoKnowsBest'+j]).to.eql(jsonValue.whoKnowsBest);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.whoKnowsBest, data['whoKnowsBest'+j], function () { });\r",
									"\r",
									"          var conwhoKnowsBest = conversionData;\r",
									"          pm.expect(jsonValue.whoKnowsBest).to.eql(conwhoKnowsBest);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : relationshipss   *********\r",
									"  pm.test(\"Assert Type of relationships\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.relationships).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of relationships\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.relationships === typeof data['relationships'+j]) {\r",
									"          pm.expect(data['relationships'+j]).to.eql(jsonValue.relationships);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.relationships, data['relationships'+j], function () { });\r",
									"\r",
									"          var conrelationships = conversionData;\r",
									"          pm.expect(jsonValue.relationships).to.eql(conrelationships);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"  \r",
									"//*******Assertion of Key : assignmentIdss   *********\r",
									"for(var v=0;v<jsonValue.assignmentIds.length;v++){\r",
									"\r",
									"  pm.test(\"Assert Type of assignmentIds\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.assignmentIds).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of assignmentIds\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assignmentIds[v] === typeof data['assignmentIds'+v]) {\r",
									"          pm.expect(data['assignmentIds'+v]).to.eql(jsonValue.assignmentIds[v]);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assignmentIds[v], data['assignmentIds'+j], function () { });\r",
									"\r",
									"          var conassignmentIds = conversionData;\r",
									"          pm.expect(jsonValue.assignmentIds[v]).to.eql(conassignmentIds);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": \"10466\",\r\n    \"lastModifiedAt\": {{lastModifiedAt0}},\r\n    \"todoNote\":{{todoNote0}},\r\n    \"group1\": {{group10}},\r\n    \"group2\": {{group20}},\r\n    \"priorityId\": \"{{priorityId}}\",\r\n    \"statusId\": {{statusId0}},\r\n    \"candidateListsStatusId\": \"{{candidateListsStatusId}}\",\r\n    \"candidateListsStatusUpdatedOn\": \"{{candidateListsStatusUpdatedOn}}\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/assignments/{{assignmentId}}/candidates",
							"host": [
								"{{url}}"
							],
							"path": [
								"assignments",
								"{{assignmentId}}",
								"candidates"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CV/Documents",
			"item": [
				{
					"name": "Post_Share Document",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"documents\": [\n        {\n            \"documentId\": \"38755\",\n            \"lastModifiedAt\": \"2016-06-21T02:53:22.450\"\n        }\n    ],\n    \"assignmentId\": \"24983\",\n    \"to\": [\n        {\n            \"personId\": \"19280\",\n            \"email\": \"reema.singh@egonzehnder.com\"\n        }\n    ],\n    \"subject\": \"TEST Document\",\n    \"body\": \"Test Document\",\n    \"fromUserId\": \"10464\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/documents/share",
							"host": [
								"{{url}}"
							],
							"path": [
								"documents",
								"share"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Retrieve a Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"var conversionData;\r",
									"var jsonValue;\r",
									"\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean'){\r",
									"        switch(typeof value){\r",
									"            case \"string\":\r",
									"               switch(value.toLowerCase()) \r",
									"                         {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"\r",
									"                callback(conversionData);\r",
									"                break;  \r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"    switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        \r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"}\r",
									"\r",
									"\r",
									" jsonValue=jsonData;\r",
									" var j=0;\r",
									" var k=0;\r",
									"  \r",
									"pm.test(\"Check if Document object contains all provided keys\",function()\r",
									"    {\r",
									"      pm.expect(jsonValue).to.have.all.keys('createdAt','lastModifiedAt','title','url','owner','id','typeId','links');\r",
									"}); \r",
									"\r",
									"//*******Assertion of Key : createdAt   *********\r",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of createdAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.createdAt === typeof data['document_createdAt'+j]) {\r",
									"          pm.expect(data['document_createdAt'+j]).to.eql(jsonValue.createdAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.createdAt, data['document_createdAt'+j], function () { });\r",
									"\r",
									"          var concreatedAt = conversionData;\r",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.lastModifiedAt === typeof data['document_lastModifiedAt'+j]) {\r",
									"          pm.expect(data['document_lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.lastModifiedAt, data['document_lastModifiedAt'+j], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.title === typeof data['document_title'+j]) {\r",
									"          pm.expect(data['document_title'+j]).to.eql(jsonValue.title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.title, data['document_title'+j], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"  //*******Assertion of Key : urls   *********\r",
									"  pm.test(\"Assert Type of url\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.url).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of url\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.url === typeof data['document_url'+j]) {\r",
									"          pm.expect(data['document_url'+j]).to.eql(jsonValue.url);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.url, data['document_url'+j], function () { });\r",
									"\r",
									"          var conurl = conversionData;\r",
									"          pm.expect(jsonValue.url).to.eql(conurl);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : owners   *********\r",
									"  pm.test(\"Assert Type of owner\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.owner).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of owner\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.owner === typeof data['owner'+j]) {\r",
									"          pm.expect(data['owner'+j]).to.eql(jsonValue.owner);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.owner, data['owner'+j], function () { });\r",
									"\r",
									"          var conowner = conversionData;\r",
									"          pm.expect(jsonValue.owner).to.eql(conowner);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"    //*******Assertion of Key : ids   *********\r",
									"  pm.test(\"Assert Type of id\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of id\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.id === typeof data['documentId'+j]) {\r",
									"          pm.expect(data['documentId'+j]).to.eql(jsonValue.id);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.id, data['documentId'+j], function () { });\r",
									"\r",
									"          var conid = conversionData;\r",
									"          pm.expect(jsonValue.id).to.eql(conid);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : typeIds   *********\r",
									"  pm.test(\"Assert Type of typeId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.typeId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of typeId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.typeId === typeof data['document_typeId'+j]) {\r",
									"          pm.expect(data['document_typeId'+j]).to.eql(jsonValue.typeId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.typeId, data['document_typeId'+j], function () { });\r",
									"\r",
									"          var contypeId = conversionData;\r",
									"          pm.expect(jsonValue.typeId).to.eql(contypeId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : hrefs   *********\r",
									"  pm.test(\"Assert Type of href\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.links[k].href).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of href\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.links[k].href === typeof data['document_links_href'+j]) {\r",
									"          pm.expect(data['document_links_href'+j]).to.eql(jsonValue.links[k].href);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.links[k].href, data['document_links_href'+j], function () { });\r",
									"\r",
									"          var conhref = conversionData;\r",
									"          pm.expect(jsonValue.links[k].href).to.eql(conhref);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userid",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}//documents/{{documentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"documents",
								"{{documentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Retrieve a CV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"var conversionData;\r",
									"var jsonValue=jsonData;\r",
									"\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean'){\r",
									"        switch(typeof value){\r",
									"            case \"string\":\r",
									"               switch(value.toLowerCase()) \r",
									"                         {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"\r",
									"                callback(conversionData);\r",
									"                break;  \r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"    switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        \r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"  jsonValue=jsonData;\r",
									"  j=0;\r",
									"  var k=0;\r",
									"  pm.test(\"Check if CV object contains all provided keys\",function()\r",
									"    {\r",
									"      pm.expect(jsonValue).to.have.all.keys('id','title','url','createdAt','links');\r",
									"  }); \r",
									"\r",
									"    //*******Assertion of Key : ids   *********\r",
									"  pm.test(\"Assert Type of id\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of id\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.id === typeof data['cvId'+j]) {\r",
									"          pm.expect(data['cvId'+j]).to.eql(jsonValue.id);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.id, data['cvId'+j], function () { });\r",
									"\r",
									"          var conid = conversionData;\r",
									"          pm.expect(jsonValue.id).to.eql(conid);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"  //*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.title === typeof data['cv_title'+j]) {\r",
									"          pm.expect(data['cv_title'+j]).to.eql(jsonValue.title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.title, data['cv_title'+j], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : urls   *********\r",
									"  pm.test(\"Assert Type of url\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.url).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of url\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.url === typeof data['cv_url'+j]) {\r",
									"          pm.expect(data['cv_url'+j]).to.eql(jsonValue.url);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.url, data['cv_url'+j], function () { });\r",
									"\r",
									"          var conurl = conversionData;\r",
									"          pm.expect(jsonValue.url).to.eql(conurl);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : createdAts   *********\r",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of createdAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.createdAt === typeof data['cv_createdAt'+j]) {\r",
									"          pm.expect(data['cv_createdAt'+j]).to.eql(jsonValue.createdAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.createdAt, data['cv_createdAt'+j], function () { });\r",
									"\r",
									"          var concreatedAt = conversionData;\r",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : hrefs   *********\r",
									"  pm.test(\"Assert Type of href\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.links[k].href).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of href\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.links[j].href === typeof data['cv_links_href'+j]) {\r",
									"          pm.expect(data['cv_links_href'+j]).to.eql(jsonValue.links[k].href);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.links[k].href, data['cv_links_href'+j], function () { });\r",
									"\r",
									"          var conhref = conversionData;\r",
									"          pm.expect(jsonValue.links[k].href).to.eql(conhref);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/cvs/{{cvId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"cvs",
								"{{cvId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Retrieve Document List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"var conversionData;\r",
									"var jsonValue=jsonData;\r",
									"\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean'){\r",
									"        switch(typeof value){\r",
									"            case \"string\":\r",
									"               switch(value.toLowerCase()) \r",
									"                         {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"\r",
									"                callback(conversionData);\r",
									"                break;  \r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"    switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        \r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"console.log(\"jsonData*********\"+jsonData.length)\r",
									"for(var j =0 ; j<jsonData.length  ; j++){\r",
									"  jsonValue=jsonData[j];\r",
									"  var k=0;\r",
									"\r",
									"pm.test(\"Check if Document object contains all provided keys\",function()\r",
									"    {\r",
									"      \r",
									"      pm.expect(jsonValue).to.have.all.keys('createdAt','lastModifiedAt','title','url','owner','id','typeId','links');\r",
									"}); \r",
									"\r",
									"  \r",
									"//*******Assertion of Key : createdAt   *********\r",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of createdAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.createdAt === typeof data['document_createdAt'+j]) {\r",
									"          pm.expect(data['document_createdAt'+j]).to.eql(jsonValue.createdAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.createdAt, data['document_createdAt'+j], function () { });\r",
									"\r",
									"          var concreatedAt = conversionData;\r",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.lastModifiedAt === typeof data['document_lastModifiedAt'+j]) {\r",
									"          pm.expect(data['document_lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.lastModifiedAt, data['document_lastModifiedAt'+j], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.title === typeof data['document_title'+j]) {\r",
									"          pm.expect(data['document_title'+j]).to.eql(jsonValue.title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.title, data['document_title'+j], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"  //*******Assertion of Key : urls   *********\r",
									"  pm.test(\"Assert Type of url\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.url).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of url\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.url === typeof data['document_url'+j]) {\r",
									"          pm.expect(data['document_url'+j]).to.eql(jsonValue.url);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.url, data['document_url'+j], function () { });\r",
									"\r",
									"          var conurl = conversionData;\r",
									"          pm.expect(jsonValue.url).to.eql(conurl);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : owners   *********\r",
									"  pm.test(\"Assert Type of owner\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.owner).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of owner\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.owner === typeof data['owner'+j]) {\r",
									"          pm.expect(data['owner'+j]).to.eql(jsonValue.owner);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.owner, data['owner'+j], function () { });\r",
									"\r",
									"          var conowner = conversionData;\r",
									"          pm.expect(jsonValue.owner).to.eql(conowner);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"    //*******Assertion of Key : ids   *********\r",
									"  pm.test(\"Assert Type of id\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of id\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.id === typeof data['documentId'+j]) {\r",
									"          pm.expect(data['documentId'+j]).to.eql(jsonValue.id);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.id, data['documentId'+j], function () { });\r",
									"\r",
									"          var conid = conversionData;\r",
									"          pm.expect(jsonValue.id).to.eql(conid);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : typeIds   *********\r",
									"  pm.test(\"Assert Type of typeId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.typeId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of typeId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.typeId === typeof data['document_typeId'+j]) {\r",
									"          pm.expect(data['document_typeId'+j]).to.eql(jsonValue.typeId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.typeId, data['document_typeId'+j], function () { });\r",
									"\r",
									"          var contypeId = conversionData;\r",
									"          pm.expect(jsonValue.typeId).to.eql(contypeId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : hrefs   *********\r",
									"  pm.test(\"Assert Type of href\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.links[k].href).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of href\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.links[k].href === typeof data['document_links_href'+j]) {\r",
									"          pm.expect(data['document_links_href'+j]).to.eql(jsonValue.links[k].href);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.links[k].href, data['document_links_href'+j], function () { });\r",
									"\r",
									"          var conhref = conversionData;\r",
									"          pm.expect(jsonValue.links[k].href).to.eql(conhref);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/documents/?ids=38756,38761",
							"host": [
								"{{url}}"
							],
							"path": [
								"documents",
								""
							],
							"query": [
								{
									"key": "ids",
									"value": "38756,38761"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Retrieve CV List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"var conversionData;\r",
									"var jsonValue=jsonData;\r",
									"\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean'){\r",
									"        switch(typeof value){\r",
									"            case \"string\":\r",
									"               switch(value.toLowerCase()) \r",
									"                         {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"\r",
									"                callback(conversionData);\r",
									"                break;  \r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"    switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        \r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"}\r",
									"\r",
									"\r",
									"console.log(\"jsonData*********\"+jsonData.length)\r",
									"for(var j =0 ; j<jsonData.length  ; j++){\r",
									"  jsonValue=jsonData[j];\r",
									"  var k=0;\r",
									"  pm.test(\"Check if CV object contains all provided keys\",function()\r",
									"    {\r",
									"      pm.expect(jsonValue).to.have.all.keys('id','title','url','createdAt','links');\r",
									"  }); \r",
									"\r",
									"    //*******Assertion of Key : ids   *********\r",
									"  pm.test(\"Assert Type of id\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of id\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.id === typeof data['cvId'+j]) {\r",
									"          pm.expect(data['cvId'+j]).to.eql(jsonValue.id);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.id, data['cvId'+j], function () { });\r",
									"\r",
									"          var conid = conversionData;\r",
									"          pm.expect(jsonValue.id).to.eql(conid);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"  //*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.title === typeof data['cv_title'+j]) {\r",
									"          pm.expect(data['cv_title'+j]).to.eql(jsonValue.title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.title, data['cv_title'+j], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : urls   *********\r",
									"  pm.test(\"Assert Type of url\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.url).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of url\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.url === typeof data['cv_url'+j]) {\r",
									"          pm.expect(data['cv_url'+j]).to.eql(jsonValue.url);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.url, data['cv_url'+j], function () { });\r",
									"\r",
									"          var conurl = conversionData;\r",
									"          pm.expect(jsonValue.url).to.eql(conurl);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : createdAts   *********\r",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of createdAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.createdAt === typeof data['cv_createdAt'+j]) {\r",
									"          pm.expect(data['cv_createdAt'+j]).to.eql(jsonValue.createdAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.createdAt, data['cv_createdAt'+j], function () { });\r",
									"\r",
									"          var concreatedAt = conversionData;\r",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : hrefs   *********\r",
									"  pm.test(\"Assert Type of href\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.links[k].href).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of href\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.links[k].href === typeof data['cv_links_href'+j]) {\r",
									"          pm.expect(data['cv_links_href'+j]).to.eql(jsonValue.links[k].href);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.links[k].href, data['cv_links_href'+j], function () { });\r",
									"\r",
									"          var conhref = conversionData;\r",
									"          pm.expect(jsonValue.links[k].href).to.eql(conhref);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/cvs/?ids={{cvIds}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"cvs",
								""
							],
							"query": [
								{
									"key": "ids",
									"value": "{{cvIds}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "People",
			"item": [
				{
					"name": "Get_Execute Person Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var conversionData;",
									"var jsonValue;",
									"",
									"function valCallBack(type,value,callback)",
									"{",
									"    if(typeof(type)==='string')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        conversionData=value.toString();",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    else if(typeof(type)==='boolean'){",
									"        switch(typeof value){",
									"            case \"string\":",
									"               switch(value.toLowerCase()) ",
									"                         {",
									"            case \"false\": ",
									"                conversionData= false;",
									"                callback(conversionData);",
									"                break;   ",
									"            case \"true\": ",
									"                conversionData= true;",
									"                callback(conversionData);",
									"                break; ",
									"            default: conversionData=true;",
									"                callback(conversionData);",
									"              ",
									"          }",
									"",
									"                callback(conversionData);",
									"                break;  ",
									"        }",
									"    }",
									"    else if(typeof(type)==='number')",
									"    {",
									"        ",
									"    switch (typeof(value)) ",
									"        {",
									"      case \"string\":",
									"        conversionData=parseInt(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }else if(typeof(type)==='undefined')",
									"    {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    }else if(typeof(type)==='object')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        var num1=value.toString();",
									"        conversionData=JSON.parse(num1);",
									"        callback(conversionData);",
									"        break;",
									"      case \"string\":",
									"        conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    ",
									"    else if(typeof(type)==='function')",
									"    {",
									"        ",
									"        callback(conversionData);",
									"    }",
									"    return  conversionData;",
									"}",
									"",
									"// console.log(\"Test******************\");",
									"",
									"// // //Response code is 200 or 201 as per the request type",
									"// // var jsonRequestData=pm.request.method;",
									"// // //Response code is 200 or 201 as per the request type",
									"// // if(jsonRequestData === \"GET\" ){",
									"// // var responseCodeAssertion=pm.test(\"API call successfull.:Access token created\", function () {",
									"    ",
									"// //     var code= parseInt(pm.environment.get(\"responsestat_200\"));",
									"// //     pm.response.to.have.status(code);",
									"    ",
									"// //     pm.test(\"Body is not Blank\", function () {",
									"// //     jsonBodyData=pm.response.to.have.body();",
									"// //     pm.expect(jsonBodyData).to.not.be.empty;",
									"// // });",
									"",
									"// // //Assert the current environment",
									"// // pm.test(\"Check if environment is production\", function () {",
									"// //       pm.expect(pm.environment.get(\"env\")).to.equal(\"OM\");",
									"// //       console.log(pm.environment.get(\"env\"));",
									"// //   });",
									"// // //Assert the key count with assertions ",
									"// // pm.test(\"Assert the key count with number of assertion\", function () {",
									"// //       var count_keys0 = Object.keys(jsonData[0]);",
									"// //       var count_keys1 = Object.keys(jsonData[1]);",
									"// //       console.log(\"count of keys object 0 : \"+count_keys0.length +\"count of keys object 1 : \"+count_keys1.length);",
									"      ",
									"// //       pm.expect(pm.environment.get(\"env\")).to.equal(\"OM\");",
									"// //       console.log(pm.environment.get(\"env\"));",
									"// //   });",
									"",
									"// // });",
									"    ",
									"// // }",
									"// /*else if(jsonRequestData === \"POST\"){",
									"// pm.test(\"API call successful12345.:Access token created\", function () {",
									"//    var code= parseInt(pm.environment.get(\"responsestat_201\"));    ",
									"//     pm.response.to.have.status(code);",
									"    ",
									"//     pm.test(\"Body is not Blank\", function () {",
									"//     jsonBodyData=pm.response.to.have.body();",
									"//     pm.expect(jsonBodyData).to.not.be.empty;",
									"// });*/",
									"",
									"// //Assert the current environment",
									"// /*pm.test(\"Check if environment is production\", function () {",
									"//       pm.expect(pm.environment.get(\"env\")).to.equal(\"OM\");",
									"    ",
									"//       console.log(pm.environment.get(\"env\"));",
									"//   });",
									"",
									"// });",
									"    ",
									"// }*/",
									"",
									"// /*if(responseCodeAssertion){",
									"//    const paramsString = request.url.split('ids=')[1];",
									"//    console.log(paramsString)",
									"//    var params = paramsString.split(\",\")",
									"// //   params.length",
									"",
									"// console.log(\"count of id as parameter : \"+params.length);",
									"// }*/",
									"// console.log(\"jsonData*********\"+jsonData.results.length)",
									" for(var j =0 ; j<jsonData.results.length  ; j++){",
									"    console.log(\"length of object \" + jsonData.results.length)",
									" jsonValue=jsonData.results[j];",
									"    ",
									"//*******Assertion of Key : boardexStatus People_ids******",
									"pm.test(\"Assert Type of boardexStatus People_ids \"+j, function(){",
									"var valBoardexStatus_response=jsonValue.boardexStatus;",
									"var valBoardexStatus_dataSheet=pm.variables.get(\"person_boardexStatus\"+j);",
									"var typeOfBoardexStatus_dataSheet= pm.variables.get(\"typeOfNumber\");",
									"var typeOfBoardexStatus_response=typeof valBoardexStatus_response;",
									"",
									"console.log(\"jsonValue.boardexStatus **\"+typeof(jsonValue.boardexStatus));",
									"console.log(\"data sheet value **** \"+ data['typeOfNumber']);",
									"",
									"var testResult = pm.expect(typeof (jsonValue.boardexStatus)).to.be.eql(data['typeOfNumber']);",
									"",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of boardexStatus People_ids\" +j, function()",
									"    {",
									"        ",
									"      if(typeof(data['person_boardexStatus0']) == typeof(jsonValue.boardexStatus)){",
									"",
									"        pm.expect(jsonValue.boardexStatus).to.eql(data['person_boardexStatus0']); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(jsonValue.boardexStatus,data['person_boardexStatus'+j], function(){});",
									"         var ConValueBoardexStatus=conversionData;",
									"       pm.expect(jsonValue.boardexStatus).to.eql(ConValueBoardexStatus);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : boardexData People_ids******",
									"",
									"pm.test(\"Assert Type of boardexData People_ids\"+j, function(){",
									"var valBoardexData_response=jsonValue.boardexData;",
									"var valBoardexData_dataSheet=pm.variables.get(\"boardexData\"+j);",
									"var typeOfBoardexData_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfBoardexData_response=typeof valBoardexData_response;",
									"",
									"console.log(\"jsonValue.boardexData **\"+typeof(jsonValue.boardexData));",
									"console.log(\"data sheet value **** \"+ data['typeOfObject']);",
									"console.log(\"BoardexData sheet Value\"+data['person_boardexData'+j]);",
									"",
									"var testResult =  pm.expect(data['typeOfObject']).to.be.eql(typeof jsonValue.boardexData);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of boardexData People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(data[\"person_boardexData\"+j]) == typeof(jsonValue.boardexData)){",
									"",
									"        pm.expect(jsonValue.boardexData).to.eql(data[\"person_boardexData\"+j]); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBoardexData_response,valBoardexData_dataSheet, function(){});",
									"       ",
									"       var ConValueBoardexData=conversionData;",
									"       pm.expect(valBoardexData_response).to.eql(ConValueBoardexData);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : DCFStatus People_ids******",
									"pm.test(\"Assert Type of DCFStatus People_ids\"+j, function(){",
									"var valDCFStatus_response=jsonValue.DCFStatus;",
									"var valDCFStatus_dataSheet=pm.variables.get(\"person_DCFStatus\"+j);",
									"var typeOfDCFStatus_dataSheet= pm.variables.get(\"typeOfNumber\");",
									"var typeOfDCFStatus_response=typeof valDCFStatus_response;",
									"",
									"var testResult =  pm.expect(typeOfDCFStatus_dataSheet).to.be.eql(typeOfDCFStatus_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of DCFStatus People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valDCFStatus_dataSheet) == typeof(valDCFStatus_response)){",
									"",
									"        pm.expect(valDCFStatus_response).to.eql(valDCFStatus_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valDCFStatus_response,valDCFStatus_dataSheet, function(){});",
									"       ",
									"       var ConValueDCFStatus=conversionData;",
									"       pm.expect(valDCFStatus_response).to.eql(ConValueDCFStatus);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : createdAt People_ids******",
									"",
									"pm.test(\"Assert Type of createdAt People_ids\"+j, function(){",
									"var valCreatedAt_response=jsonValue.createdAt;",
									"var valCreatedAt_dataSheet=pm.variables.get(\"person_createdAt\"+j);",
									"var typeOfCreatedAt_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfCreatedAt_response=typeof valCreatedAt_response;",
									"",
									"var testResult =  pm.expect(typeOfCreatedAt_dataSheet).to.be.eql(typeof valCreatedAt_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of createdAt People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valCreatedAt_dataSheet) == typeof(valCreatedAt_response)){",
									"",
									"        pm.expect(valCreatedAt_response).to.eql(valCreatedAt_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valCreatedAt_response,valCreatedAt_dataSheet, function(){});",
									"       ",
									"       var ConValueCreatedAt=conversionData;",
									"       pm.expect(valCreatedAt_response).to.eql(ConValueCreatedAt);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : lastModifiedAt People_ids******",
									"pm.test(\"Assert Type of lastModifiedAt People_ids\"+j, function(){",
									"var valLastModifiedAt_response=jsonValue.lastModifiedAt;",
									"var valLastModifiedAt_dataSheet=pm.variables.get(\"person_lastModifiedAt\"+j);",
									"var typeOfLastModifiedAt_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfLastModifiedAt_response=typeof valLastModifiedAt_response;",
									"",
									"var testResult =  pm.expect(typeOfLastModifiedAt_dataSheet).to.be.eql(typeof valLastModifiedAt_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of lastModifiedAt People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLastModifiedAt_dataSheet) == typeof(valLastModifiedAt_response)){",
									"",
									"        pm.expect(valLastModifiedAt_response).to.eql(valLastModifiedAt_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLastModifiedAt_response,valLastModifiedAt_dataSheet, function(){});",
									"       ",
									"       var ConValueLastModifiedAt=conversionData;",
									"       pm.expect(valLastModifiedAt_response).to.eql(ConValueLastModifiedAt);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : id People_ids******",
									"pm.test(\"Assert Type of id People_ids\"+j, function(){",
									"var valId_response=jsonValue.id;",
									"var valId_dataSheet=pm.variables.get(\"person_id\"+j);",
									"var typeOfId_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfId_response=typeof valId_response;",
									"",
									"var testResult =  pm.expect(typeOfId_dataSheet).to.be.eql(typeof valId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of id People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valId_dataSheet) == typeof(valId_response)){",
									"",
									"        pm.expect(valId_response).to.eql(valId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valId_response,valId_dataSheet, function(){});",
									"       ",
									"       var ConValueId=conversionData;",
									"       pm.expect(valId_response).to.eql(ConValueId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : firstName People_ids******",
									"",
									"",
									"pm.test(\"Assert Type of firstName People_ids\"+j, function(){",
									"var valFirstName_response=jsonValue.firstName;",
									"var valFirstName_dataSheet=pm.variables.get(\"person_firstName\"+j);",
									"var typeOfFirstName_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfFirstName_response=typeof valFirstName_response;",
									"",
									"var testResult =  pm.expect(typeOfFirstName_dataSheet).to.be.eql(typeof valFirstName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of firstName People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valFirstName_dataSheet) == typeof(valFirstName_response)){",
									"",
									"        pm.expect(valFirstName_response).to.eql(valFirstName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valFirstName_response,valFirstName_dataSheet, function(){});",
									"       ",
									"       var ConValueFirstName=conversionData;",
									"       pm.expect(valFirstName_response).to.eql(ConValueFirstName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : lastName People_ids******",
									"",
									"pm.test(\"Assert Type of lastName People_ids\"+j, function(){",
									"var valLastName_response=jsonValue.lastName;",
									"var valLastName_dataSheet=pm.variables.get(\"person_lastName\"+j);",
									"var typeOfLastName_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfLastName_response=typeof valLastName_response;",
									"",
									"var testResult =  pm.expect(typeOfLastName_dataSheet).to.be.eql(typeof valLastName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of lastName People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLastName_dataSheet) == typeof(valLastName_response)){",
									"",
									"        pm.expect(valLastName_response).to.eql(valLastName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLastName_response,valLastName_dataSheet, function(){});",
									"       ",
									"       var ConValueLastName=conversionData;",
									"       pm.expect(valLastName_response).to.eql(ConValueLastName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : group1 People_ids******",
									"pm.test(\"Assert Type of group1 People_ids\"+j, function(){",
									"var valGroup1_response=jsonValue.group1;",
									"var valGroup1_dataSheet=pm.variables.get(\"person_group1\"+j);",
									"var typeOfGroup1_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfGroup1_response=typeof valGroup1_response;",
									"",
									"var testResult =  pm.expect(typeOfGroup1_dataSheet).to.be.eql(typeof valGroup1_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of group1 People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGroup1_dataSheet) == typeof(valGroup1_response)){",
									"",
									"        pm.expect(valGroup1_response).to.eql(valGroup1_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGroup1_response,valGroup1_dataSheet, function(){});",
									"       ",
									"       var ConValueGroup1=conversionData;",
									"       pm.expect(valGroup1_response).to.eql(ConValueGroup1);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : group2 People_ids******",
									"",
									"pm.test(\"Assert Type of group2 People_ids\"+j, function(){",
									"var valGroup2_response=jsonValue.group2;",
									"var valGroup2_dataSheet=pm.variables.get(\"person_group2\"+j);",
									"var typeOfGroup2_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfGroup2_response=typeof valGroup2_response;",
									"",
									"var testResult =  pm.expect(typeOfGroup2_dataSheet).to.be.eql(typeof valGroup2_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of group2 People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGroup2_dataSheet) == typeof(valGroup2_response)){",
									"",
									"        pm.expect(valGroup2_response).to.eql(valGroup2_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGroup2_response,valGroup2_dataSheet, function(){});",
									"       ",
									"       var ConValueGroup2=conversionData;",
									"       pm.expect(valGroup2_response).to.eql(ConValueGroup2);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : priorityId People_ids******",
									"",
									"pm.test(\"Assert Type of priorityId People_ids\"+j, function(){",
									"var valPriorityId_response=jsonValue.priorityId;",
									"var valPriorityId_dataSheet=pm.variables.get(\"person_priorityId\"+j);",
									"var typeOfPriorityId_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfPriorityId_response=typeof valPriorityId_response;",
									"",
									"var testResult =  pm.expect(typeOfPriorityId_dataSheet).to.be.eql(typeof valPriorityId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of priorityId People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valPriorityId_dataSheet) == typeof(valPriorityId_response)){",
									"",
									"        pm.expect(valPriorityId_response).to.eql(valPriorityId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valPriorityId_response,valPriorityId_dataSheet, function(){});",
									"       ",
									"       var ConValuePriorityId=conversionData;",
									"       pm.expect(valPriorityId_response).to.eql(ConValuePriorityId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : todoNote People_ids******",
									"",
									"pm.test(\"Assert Type of todoNote People_ids\"+j, function(){",
									"var valTodoNote_response=jsonValue.todoNote;",
									"var valTodoNote_dataSheet=pm.variables.get(\"person_todoNote\"+j);",
									"var typeOfTodoNote_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfTodoNote_response=typeof valTodoNote_response;",
									"",
									"var testResult =  pm.expect(typeOfTodoNote_dataSheet).to.be.eql(typeof valTodoNote_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of todoNote People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valTodoNote_dataSheet) == typeof(valTodoNote_response)){",
									"",
									"        pm.expect(valTodoNote_response).to.eql(valTodoNote_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valTodoNote_response,valTodoNote_dataSheet, function(){});",
									"       ",
									"       var ConValueTodoNote=conversionData;",
									"       pm.expect(valTodoNote_response).to.eql(ConValueTodoNote);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : linkedinProfileUrl People_ids******",
									"",
									"pm.test(\"Assert Type of linkedinProfileUrl People_ids\"+j, function(){",
									"var valLinkedinProfileUrl_response=jsonValue.linkedinProfileUrl;",
									"var valLinkedinProfileUrl_dataSheet=pm.variables.get(\"person_linkedinProfileUrl\"+j);",
									"var typeOfLinkedinProfileUrl_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfLinkedinProfileUrl_response=typeof valLinkedinProfileUrl_response;",
									"",
									"var testResult =  pm.expect(typeOfLinkedinProfileUrl_dataSheet).to.be.eql(typeof valLinkedinProfileUrl_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of linkedinProfileUrl People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLinkedinProfileUrl_dataSheet) == typeof(valLinkedinProfileUrl_response)){",
									"",
									"        pm.expect(valLinkedinProfileUrl_response).to.eql(valLinkedinProfileUrl_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLinkedinProfileUrl_response,valLinkedinProfileUrl_dataSheet, function(){});",
									"       ",
									"       var ConValueLinkedinProfileUrl=conversionData;",
									"       pm.expect(valLinkedinProfileUrl_response).to.eql(ConValueLinkedinProfileUrl);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"for(var n=0;n<jsonValue.assistant.length;n++){",
									"//*******Assertion of Key : assistant People_ids******",
									"pm.test(\"Assert Type of assistant phone number\"+j, function(){",
									"var valAssistant_response=jsonValue.assistant[n].phoneNumber;",
									"var valAssistant_dataSheet=pm.variables.get(\"assistant_phoneNumber\"+j+n);",
									"var typeOfAssistant_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfAssistant_response=typeof valAssistant_response;",
									"",
									"var testResult =  pm.expect(typeOfAssistant_dataSheet).to.be.eql(typeof valAssistant_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of assistant People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valAssistant_dataSheet) == typeof(valAssistant_response)){",
									"",
									"        pm.expect(valAssistant_response).to.eql(valAssistant_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valAssistant_response,valAssistant_dataSheet, function(){});",
									"       ",
									"       var ConValueAssistant=conversionData;",
									"       pm.expect(valAssistant_response).to.eql(ConValueAssistant);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"}",
									"",
									"",
									"for(var n=0;n<jsonValue.assistant.length;n++){",
									"//*******Assertion of Key : assistant People_ids******",
									"pm.test(\"Assert Type of assistant fullName\"+j, function(){",
									"var valAssistant_response=jsonValue.assistant[n].fullName;",
									"var valAssistant_dataSheet=pm.variables.get(\"assistant_fullName\"+j+n);",
									"var typeOfAssistant_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfAssistant_response=typeof valAssistant_response;",
									"",
									"var testResult =  pm.expect(typeOfAssistant_dataSheet).to.be.eql(typeof valAssistant_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of assistant fullName\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valAssistant_dataSheet) == typeof(valAssistant_response)){",
									"",
									"        pm.expect(valAssistant_response).to.eql(valAssistant_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valAssistant_response,valAssistant_dataSheet, function(){});",
									"       ",
									"       var ConValueAssistant=conversionData;",
									"       pm.expect(valAssistant_response).to.eql(ConValueAssistant);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"}",
									"",
									"for(var n=0;n<jsonValue.assistant.length;n++){",
									"//*******Assertion of Key : assistant People_ids******",
									"pm.test(\"Assert Type of assistant email\"+j, function(){",
									"var valAssistant_response=jsonValue.assistant[n].email;",
									"var valAssistant_dataSheet=pm.variables.get(\"assistant_email\"+j+n);",
									"var typeOfAssistant_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfAssistant_response=typeof valAssistant_response;",
									"",
									"var testResult =  pm.expect(typeOfAssistant_dataSheet).to.be.eql(typeof valAssistant_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of assistant email\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valAssistant_dataSheet) == typeof(valAssistant_response)){",
									"",
									"        pm.expect(valAssistant_response).to.eql(valAssistant_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valAssistant_response,valAssistant_dataSheet, function(){});",
									"       ",
									"       var ConValueAssistant=conversionData;",
									"       pm.expect(valAssistant_response).to.eql(ConValueAssistant);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"}",
									"",
									"",
									"for(var n=0;n<jsonValue.assistant.length;n++){",
									"//*******Assertion of Key : assistant extension******",
									"pm.test(\"Assert Type of assistant extension\"+j, function(){",
									"var valAssistant_response=jsonValue.assistant[n].extension;",
									"var valAssistant_dataSheet=pm.variables.get(\"assistant_extension\"+j+n);",
									"var typeOfAssistant_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfAssistant_response=typeof valAssistant_response;",
									"",
									"var testResult =  pm.expect(typeOfAssistant_dataSheet).to.be.eql(typeof valAssistant_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of assistant email\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valAssistant_dataSheet) == typeof(valAssistant_response)){",
									"",
									"        pm.expect(valAssistant_response).to.eql(valAssistant_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valAssistant_response,valAssistant_dataSheet, function(){});",
									"       ",
									"       var ConValueAssistant=conversionData;",
									"       pm.expect(valAssistant_response).to.eql(ConValueAssistant);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"}",
									"",
									"",
									"//*******Assertion of Key : qualifications People_ids******",
									"for(var n=0;n<jsonValue.qualifications.length;n++){",
									"pm.test(\"Assert Type of qualifications People_ids\"+j, function(){",
									"var valQualifications_response=jsonValue.qualifications[n].earnedAt;",
									"var valQualifications_dataSheet=pm.variables.get(\"qualifications_earnedAt\"+j+n);",
									"var typeOfQualifications_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfQualifications_response=typeof valQualifications_response;",
									"",
									"var testResult =  pm.expect(typeOfQualifications_dataSheet).to.be.eql(typeof valQualifications_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of qualifications People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valQualifications_dataSheet) == typeof(valQualifications_response)){",
									"",
									"        pm.expect(valQualifications_response).to.eql(valQualifications_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valQualifications_response,valQualifications_dataSheet, function(){});",
									"       ",
									"       var ConValueQualifications=conversionData;",
									"       pm.expect(valQualifications_response).to.eql(ConValueQualifications);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"}",
									"",
									"for(var n=0;n<jsonValue.qualifications.length;n++){",
									"pm.test(\"Assert Type of qualifications People_ids\"+j, function(){",
									"var valQualifications_response=jsonValue.qualifications[n].title;",
									"var valQualifications_dataSheet=pm.variables.get(\"qualifications_title\"+j+n);",
									"var typeOfQualifications_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfQualifications_response=typeof valQualifications_response;",
									"",
									"var testResult =  pm.expect(typeOfQualifications_dataSheet).to.be.eql(typeof valQualifications_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of qualifications People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valQualifications_dataSheet) == typeof(valQualifications_response)){",
									"",
									"        pm.expect(valQualifications_response).to.eql(valQualifications_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valQualifications_response,valQualifications_dataSheet, function(){});",
									"       ",
									"       var ConValueQualifications=conversionData;",
									"       pm.expect(valQualifications_response).to.eql(ConValueQualifications);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"}",
									"",
									"for(var n=0;n<jsonValue.qualifications.length;n++){",
									"pm.test(\"Assert Type of qualifications institution\"+j, function(){",
									"var valQualifications_response=jsonValue.qualifications[n].institution;",
									"var valQualifications_dataSheet=pm.variables.get(\"qualifications_institution\"+j+n);",
									"var typeOfQualifications_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfQualifications_response=typeof valQualifications_response;",
									"",
									"var testResult =  pm.expect(typeOfQualifications_dataSheet).to.be.eql(typeof valQualifications_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of qualifications institution\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valQualifications_dataSheet) == typeof(valQualifications_response)){",
									"",
									"        pm.expect(valQualifications_response).to.eql(valQualifications_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valQualifications_response,valQualifications_dataSheet, function(){});",
									"       ",
									"       var ConValueQualifications=conversionData;",
									"       pm.expect(valQualifications_response).to.eql(ConValueQualifications);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"}",
									"",
									"for(var n=0;n<jsonValue.qualifications.length;n++){",
									"pm.test(\"Assert Type of qualifications institution\"+j, function(){",
									"var valQualifications_response=jsonValue.qualifications[n].institution;",
									"var valQualifications_dataSheet=pm.variables.get(\"qualifications_institution\"+j+n);",
									"var typeOfQualifications_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfQualifications_response=typeof valQualifications_response;",
									"",
									"var testResult =  pm.expect(typeOfQualifications_dataSheet).to.be.eql(typeof valQualifications_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of qualifications institution\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valQualifications_dataSheet) == typeof(valQualifications_response)){",
									"",
									"        pm.expect(valQualifications_response).to.eql(valQualifications_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valQualifications_response,valQualifications_dataSheet, function(){});",
									"       ",
									"       var ConValueQualifications=conversionData;",
									"       pm.expect(valQualifications_response).to.eql(ConValueQualifications);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"}",
									"// //*******Assertion of type of : contactDetails People_ids******",
									"",
									"// var valContactDetails_response=jsonValue.contactDetails;",
									"// var lengthOfResponse = valContactDetails_response.length;",
									"",
									"// var typeOfContactDetails_dataSheet= pm.variables.get(\"typeOfContactDetails\");",
									"// var typeOfContactDetails_response=typeof valContactDetails_response;",
									"// var typeOfContactDetails_label_dataSheet= pm.variables.get(\"typeOfContactDetails_label\");",
									"// var typeOfContactDetails_value_dataSheet= pm.variables.get(\"typeOfContactDetails_value\");",
									"// var typeOfContactDetails_icon_dataSheet= pm.variables.get(\"typeOfContactDetails_icon\");",
									"// var typeOfContactDetails_isDefault_dataSheet= pm.variables.get(\"typeOfContactDetails_isDefault\");",
									"// var typeOfContactDetails_lastModifiedAt_dataSheet= pm.variables.get(\"typeOfContactDetails_lastModifiedAt\");",
									"// var testResultTypeOf;",
									"// pm.test(\"Assert Type of contactDetails People_ids\"+j, function(){",
									"// var testResultTypeOf = pm.expect(typeOfContactDetails_dataSheet).to.be.eql(typeof valContactDetails_response);",
									"",
									"",
									"",
									"//*******Assertion of Key : contactDetails_label People_ids******",
									"",
									"if(testResultTypeOf){",
									"    ",
									"    console.log(\"length.......\"+lengthOfResponse);",
									"    if(lengthOfResponse!=0){",
									"    ",
									"   for(var i=0;i<lengthOfResponse;i++){",
									"    pm.test(\"Assert keys inside contactDetails\",function()",
									"        {",
									"       ",
									"        pm.expect(jsonValue.contactDetails[i]).to.have.all.keys('label','icon','value','isDefault','lastModifiedAt');",
									"        }); ",
									"    pm.test(\"Assert type of contactDetails_label People_ids \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_label_response = typeof (jsonValue.contactDetails[i].label);",
									"        var valContactDetails_label_datasheet = pm.variables.get(\"person_contactDetails_label\"+j+i) ;",
									"        var testResultTypeOfLabel = pm.expect(typeOfContactDetails_label_response ).to.be.eql(pm.variables.get(\"typeOfString\"));",
									"     ",
									"    if(testResultTypeOfLabel){",
									"    pm.test(\"Assert value contactDetails_label People_ids\"+j, function(){",
									"        pm.expect(jsonValue.contactDetails[i].label).to.be.eql(valContactDetails_label_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"\t",
									"\t//*******Assertion of Key : contactDetails_value People_ids******",
									"\t",
									"\t  pm.test(\"Assert type of contactDetails_value People_ids \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_value_response = typeof (jsonValue.contactDetails[i].value);",
									"        var valContactDetails_value_datasheet = pm.variables.get(\"person_contactDetails_value\"+j+i) ;",
									"        var testResultTypeOfLabel = pm.expect(typeOfContactDetails_value_response ).to.be.eql(pm.variables.get(\"typeOfString\"));",
									"     ",
									"    if(testResultTypeOfLabel){",
									"    pm.test(\"Assert value contactDetails_value People_ids\"+j, function(){",
									"        pm.expect(jsonValue.contactDetails[i].value).to.be.eql(valContactDetails_value_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"\t//*******Assertion of Key : contactDetails_icon People_ids******",
									"\t",
									"\t  pm.test(\"Assert type of contactDetails_icon People_ids \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_icon_response = typeof (jsonValue.contactDetails[i].icon);",
									"        var valContactDetails_icon_datasheet = pm.variables.get(\"person_contactDetails_icon\"+j+i) ;",
									"        var testResultTypeOfIcon = pm.expect(typeOfContactDetails_icon_response ).to.be.eql(pm.variables.get(\"typeOfString\"));",
									"     ",
									"    if(testResultTypeOfIcon){",
									"    pm.test(\"Assert value contactDetails_icon People_ids\"+j, function(){",
									"        pm.expect(jsonValue.contactDetails[i].icon).to.be.eql(valContactDetails_icon_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t//*******Assertion of Key : contactDetails_isDefault People_ids******",
									"\t\t  pm.test(\"Assert type of contactDetails_isDefault People_ids \"+j , function(){",
									"        var valContactDetails_isDefault_response = jsonValue.contactDetails[i].isDefault;",
									"        var typeOfContactDetails_isDefault_response = typeof (jsonValue.contactDetails[i].isDefault);",
									"        var valContactDetails_isDefault_dataSheet = pm.variables.get(\"person_contactDetails_isDefault\"+j+i) ;",
									"        var testResultTypeOfIsDefault = pm.expect(typeOfContactDetails_isDefault_response ).to.be.eql(pm.variables.get(\"typeOfBoolean\"));",
									"     ",
									"    if(testResultTypeOfIsDefault){",
									"\t\t if(typeof(valContactDetails_isDefault_dataSheet) == typeof(valContactDetails_isDefault_response))",
									"              {",
									"        ",
									"                pm.expect(valContactDetails_isDefault_response).to.eql(valContactDetails_isDefault_dataSheet); ",
									"                  ",
									"              }",
									"\t\telse",
									"              {",
									"                valCallBack(valContactDetails_isDefault_response,valContactDetails_isDefault_dataSheet, function(){});",
									"               ",
									"               var ConValueContactDetails_isDefault=conversionData;",
									"               pm.expect(valContactDetails_isDefault_response).to.eql(ConValueContactDetails_isDefault);      ",
									"                }",
									"\t}",
									"   else{ postman.setNextRequest();}\t",
									"\t});",
									"",
									"\t//*******Assertion of Key : contactDetails_lastModified People_ids******",
									"\t",
									"\t\t",
									"\t  pm.test(\"Assert type of contactDetails_lastModifiedAt People_ids \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_lastModifiedAt_response = typeof (jsonValue.contactDetails[i].lastModifiedAt);",
									"        var valContactDetails_lastModifiedAt_datasheet = pm.variables.get(\"person_contactDetails_lastModifiedAt\"+j+i) ;",
									"        var testResultTypeOfLastModifiedAt = pm.expect(typeOfContactDetails_lastModifiedAt_response ).to.be.eql(pm.variables.get(\"typeOfString\"));",
									"     ",
									"    if(testResultTypeOfLastModifiedAt){",
									"    pm.test(\"Assert value contactDetails_lastModifiedAt People_ids\"+j, function(){",
									"        pm.expect(jsonValue.contactDetails[i].lastModifiedAt).to.be.eql(valContactDetails_lastModifiedAt_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"",
									"",
									"//    }",
									"// }",
									"",
									"",
									"// else {",
									"    ",
									"//     pm.test(\"Assert value of contactDetails when empty People_ids\"+j, function()",
									"//     {",
									"//      var valContactDetails_response=jsonValue.contactDetails;",
									"// var valContactDetails_dataSheet=pm.variables.get(\"contactDetails\"+j);",
									"// var typeOfContactDetails_dataSheet= pm.variables.get(\"typeOfContactDetails\");",
									"// var typeOfContactDetails_response=typeof valContactDetails_response;",
									"",
									"// var testResult =  pm.expect(typeOfContactDetails_dataSheet).to.be.eql(typeof valContactDetails_response);",
									"",
									"",
									"//       if(typeof(valContactDetails_dataSheet) == typeof(valContactDetails_response)){",
									"",
									"//         pm.expect(valContactDetails_response).to.eql(valContactDetails_dataSheet); ",
									"          ",
									"//       }",
									"",
									"//       else",
									"//       {",
									"//         valCallBack(valContactDetails_response,valContactDetails_dataSheet, function(){});",
									"       ",
									"//        var ConValueContactDetails=conversionData;",
									"//        pm.expect(valContactDetails_response).to.eql(ConValueContactDetails);      ",
									"//         }",
									"//     });",
									"",
									"// }",
									"// }",
									"// else{ postman.setNextRequest();",
									"    ",
									"// }",
									"",
									"// });",
									"",
									"// //*******Assertion of Key : workHistory People_ids******",
									"",
									"// pm.test(\"Assert Type of workHistory People_ids\"+j, function(){",
									"// var valWorkHistory_response=jsonValue.workHistory;",
									"// var valWorkHistory_dataSheet=pm.variables.get(\"workHistory\"+j);",
									"// var typeOfWorkHistory_dataSheet= pm.variables.get(\"typeOfWorkHistory\");",
									"// var typeOfWorkHistory_response=typeof valWorkHistory_response;",
									"",
									"// var testResult =  pm.expect(typeOfWorkHistory_dataSheet).to.be.eql(typeof valWorkHistory_response);",
									"        ",
									"// if(testResult)",
									"// {",
									"//     pm.test(\"Assert value of workHistory People_ids\"+j, function()",
									"//     {",
									"        ",
									"//       if(typeof(valWorkHistory_dataSheet) == typeof(valWorkHistory_response)){",
									"",
									"//         pm.expect(valWorkHistory_response).to.eql(valWorkHistory_dataSheet); ",
									"          ",
									"//       }",
									"",
									"//       else",
									"//       {",
									"//         valCallBack(valWorkHistory_response,valWorkHistory_dataSheet, function(){});",
									"       ",
									"//        var ConValueWorkHistory=conversionData;",
									"//        pm.expect(valWorkHistory_response).to.eql(ConValueWorkHistory);      ",
									"//         }",
									"//     });",
									"// }",
									"// else{ postman.setNextRequest();}",
									"// });",
									"",
									"//*******Assertion of Key : geoMobilityNotes People_ids******",
									"",
									"pm.test(\"Assert Type of geoMobilityNotes People_ids\"+j, function(){",
									"var valGeoMobilityNotes_response=jsonValue.geoMobilityNotes;",
									"var valGeoMobilityNotes_dataSheet=pm.variables.get(\"person_geoMobilityNotes\"+j);",
									"var typeOfGeoMobilityNotes_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfGeoMobilityNotes_response=typeof valGeoMobilityNotes_response;",
									"",
									"var testResult =  pm.expect(typeOfGeoMobilityNotes_dataSheet).to.be.eql(typeof valGeoMobilityNotes_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of geoMobilityNotes People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGeoMobilityNotes_dataSheet) == typeof(valGeoMobilityNotes_response)){",
									"",
									"        pm.expect(valGeoMobilityNotes_response).to.eql(valGeoMobilityNotes_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGeoMobilityNotes_response,valGeoMobilityNotes_dataSheet, function(){});",
									"       ",
									"       var ConValueGeoMobilityNotes=conversionData;",
									"       pm.expect(valGeoMobilityNotes_response).to.eql(ConValueGeoMobilityNotes);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : birthday People_ids******",
									"",
									"pm.test(\"Assert Type of birthday People_ids\"+j, function(){",
									"var valBirthday_response=jsonValue.birthday;",
									"var valBirthday_dataSheet=pm.variables.get(\"person_birthday\"+j);",
									"var typeOfBirthday_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfBirthday_response=typeof valBirthday_response;",
									"",
									"var testResult =  pm.expect(typeOfBirthday_dataSheet).to.be.eql(typeof valBirthday_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of birthday People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valBirthday_dataSheet) == typeof(valBirthday_response)){",
									"",
									"        pm.expect(valBirthday_response).to.eql(valBirthday_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBirthday_response,valBirthday_dataSheet, function(){});",
									"       ",
									"       var ConValueBirthday=conversionData;",
									"       pm.expect(valBirthday_response).to.eql(ConValueBirthday);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : principalNationalityId People_ids******",
									"",
									"pm.test(\"Assert Type of principalNationalityId People_ids\"+j, function(){",
									"var valPrincipalNationalityId_response=jsonValue.principalNationalityId;",
									"var valPrincipalNationalityId_dataSheet=pm.variables.get(\"person_principalNationalityId\"+j);",
									"var typeOfPrincipalNationalityId_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfPrincipalNationalityId_response=typeof valPrincipalNationalityId_response;",
									"",
									"var testResult =  pm.expect(typeOfPrincipalNationalityId_dataSheet).to.be.eql(typeof valPrincipalNationalityId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of principalNationalityId People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valPrincipalNationalityId_dataSheet) == typeof(valPrincipalNationalityId_response)){",
									"",
									"        pm.expect(valPrincipalNationalityId_response).to.eql(valPrincipalNationalityId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valPrincipalNationalityId_response,valPrincipalNationalityId_dataSheet, function(){});",
									"       ",
									"       var ConValuePrincipalNationalityId=conversionData;",
									"       pm.expect(valPrincipalNationalityId_response).to.eql(ConValuePrincipalNationalityId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"",
									"",
									"//*******Assertion of Key : languages People_ids******",
									"",
									"",
									"pm.test(\"Assert Type of languages People_ids\"+j, function(){",
									"var valLanguages_response=jsonValue.languages;",
									"var valLanguages_dataSheet=pm.variables.get(\"person_languages\"+j);",
									"var typeOfLanguages_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfLanguages_response=typeof valLanguages_response;",
									"",
									"var testResult =  pm.expect(typeOfLanguages_dataSheet).to.be.eql(typeof valLanguages_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of languages People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLanguages_dataSheet) == typeof(valLanguages_response)){",
									"",
									"        pm.expect(valLanguages_response).to.eql(valLanguages_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLanguages_response,valLanguages_dataSheet, function(){});",
									"       ",
									"       var ConValueLanguages=conversionData;",
									"       pm.expect(valLanguages_response).to.eql(ConValueLanguages);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : homeCountryId People_ids******",
									"",
									"pm.test(\"Assert Type of homeCountryId People_ids\"+j, function(){",
									"var valHomeCountryId_response=jsonValue.homeCountryId;",
									"var valHomeCountryId_dataSheet=pm.variables.get(\"person_homeCountryId\"+j);",
									"var typeOfHomeCountryId_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfHomeCountryId_response=typeof valHomeCountryId_response;",
									"",
									"var testResult =  pm.expect(typeOfHomeCountryId_dataSheet).to.be.eql(typeof valHomeCountryId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of homeCountryId People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valHomeCountryId_dataSheet) == typeof(valHomeCountryId_response)){",
									"",
									"        pm.expect(valHomeCountryId_response).to.eql(valHomeCountryId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valHomeCountryId_response,valHomeCountryId_dataSheet, function(){});",
									"       ",
									"       var ConValueHomeCountryId=conversionData;",
									"       pm.expect(valHomeCountryId_response).to.eql(ConValueHomeCountryId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : maritalStatusId People_ids******",
									"",
									"pm.test(\"Assert Type of maritalStatusId People_ids\"+j, function(){",
									"var valMaritalStatusId_response=jsonValue.maritalStatusId;",
									"var valMaritalStatusId_dataSheet=pm.variables.get(\"person_maritalStatusId\"+j);",
									"var typeOfMaritalStatusId_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfMaritalStatusId_response=typeof valMaritalStatusId_response;",
									"",
									"var testResult =  pm.expect(typeOfMaritalStatusId_dataSheet).to.be.eql(typeof valMaritalStatusId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of maritalStatusId People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valMaritalStatusId_dataSheet) == typeof(valMaritalStatusId_response)){",
									"",
									"        pm.expect(valMaritalStatusId_response).to.eql(valMaritalStatusId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valMaritalStatusId_response,valMaritalStatusId_dataSheet, function(){});",
									"       ",
									"       var ConValueMaritalStatusId=conversionData;",
									"       pm.expect(valMaritalStatusId_response).to.eql(ConValueMaritalStatusId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"",
									"//*******Assertion of Key : spouseName People_ids******",
									"",
									"",
									"pm.test(\"Assert Type of spouseName People_ids\"+j, function(){",
									"var valSpouseName_response=jsonValue.spouseName;",
									"var valSpouseName_dataSheet=pm.variables.get(\"person_spouseName\"+j);",
									"var typeOfSpouseName_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfSpouseName_response=typeof valSpouseName_response;",
									"",
									"var testResult =  pm.expect(typeOfSpouseName_dataSheet).to.be.eql(typeof valSpouseName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of spouseName People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valSpouseName_dataSheet) == typeof(valSpouseName_response)){",
									"",
									"        pm.expect(valSpouseName_response).to.eql(valSpouseName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valSpouseName_response,valSpouseName_dataSheet, function(){});",
									"       ",
									"       var ConValueSpouseName=conversionData;",
									"       pm.expect(valSpouseName_response).to.eql(ConValueSpouseName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : children People_ids******",
									"",
									"",
									"pm.test(\"Assert Type of children People_ids\"+j, function(){",
									"var valChildren_response=jsonValue.children;",
									"var valChildren_dataSheet=pm.variables.get(\"person_children\"+j);",
									"var typeOfChildren_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfChildren_response=typeof valChildren_response;",
									"",
									"var testResult =  pm.expect(typeOfChildren_dataSheet).to.be.eql(typeof valChildren_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of children People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valChildren_dataSheet) == typeof(valChildren_response)){",
									"",
									"        pm.expect(valChildren_response).to.eql(valChildren_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valChildren_response,valChildren_dataSheet, function(){});",
									"       ",
									"       var ConValueChildren=conversionData;",
									"       pm.expect(valChildren_response).to.eql(ConValueChildren);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : whoKnowsBest People_ids******",
									"",
									"pm.test(\"Assert Type of whoKnowsBest People_ids\"+j, function(){",
									"var valWhoKnowsBest_response=jsonValue.whoKnowsBest;",
									"var valWhoKnowsBest_dataSheet=pm.variables.get(\"person_whoKnowsBest\"+j);",
									"var typeOfWhoKnowsBest_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfWhoKnowsBest_response=typeof valWhoKnowsBest_response;",
									"",
									"var testResult =  pm.expect(typeOfWhoKnowsBest_dataSheet).to.be.eql(typeof valWhoKnowsBest_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of whoKnowsBest People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valWhoKnowsBest_dataSheet) == typeof(valWhoKnowsBest_response)){",
									"",
									"        pm.expect(valWhoKnowsBest_response).to.eql(valWhoKnowsBest_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valWhoKnowsBest_response,valWhoKnowsBest_dataSheet, function(){});",
									"       ",
									"       var ConValueWhoKnowsBest=conversionData;",
									"       pm.expect(valWhoKnowsBest_response).to.eql(ConValueWhoKnowsBest);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"// //*******Assertion of Key : Blocks People_ids *****",
									"// pm.test(\"Assert of Blocks People_ids\"+j, function(){",
									"// var valBlocks_response=jsonValue.blocks;",
									"",
									"// var typeOfBlocks_Type_dataSheet= pm.variables.get(\"typeOfBlocks_Type\");",
									"// var typeOfBlocks_ExpirationDate_dataSheet= pm.variables.get(\"typeOfBlocks_ExpirationDate\");",
									"",
									"",
									"//     var i;",
									"",
									"//     for(i=0;i<valBlocks_response.length;i++){",
									"",
									"//         pm.test(\"Assert keys inside Blocks\",function()",
									"//         {",
									"//         pm.expect(jsonValue.blocks[i]).to.have.all.keys('type','expirationDate');",
									"//         });",
									"",
									"// //*******Assertion of Key : Blocks_Type People_ids *****",
									"// pm.test(\"Assert Type of Blocks_Type\" +i+ \"People_ids\", function(){",
									"// var valBlocks_Type_response=jsonValue.blocks[i].type;",
									"// var valBlocks_Type_dataSheet=pm.variables.get(\"blocks_type\"+j+i);",
									"// var typeOfBlocks_Type_response=typeof valBlocks_Type_response;",
									"// var typeOfBlocks_Type_dataSheet = pm.variables.get(\"typeOfBlocks_type\");",
									"// var testResult =  pm.expect(typeOfBlocks_Type_dataSheet).to.be.eql(typeof valBlocks_Type_response);",
									"        ",
									"// if(testResult)",
									"// {",
									"    ",
									"//     pm.test(\"Assert value of blocks_type \"+i+  \"People_ids\", function()",
									"//     {",
									"        ",
									"//       if(typeof(valBlocks_Type_dataSheet) == typeof(valBlocks_Type_response)){",
									"",
									"//         pm.expect(valBlocks_Type_response).to.eql(valBlocks_Type_dataSheet); ",
									"          ",
									"//       }",
									"",
									"//       else",
									"//       {",
									"//         valCallBack(valBlocks_Type_response,valBlocks_Type_dataSheet, function(){});",
									"       ",
									"//        var ConValueBlocks_Type=conversionData;",
									"//        pm.expect(valBlocks_Type_response).to.eql(ConValueBlocks_Type);      ",
									"//         }",
									"//     });",
									"// }",
									"// else{ postman.setNextRequest();}",
									"// });",
									"",
									"",
									"// //*******Assertion of Key : Blocks_ExpirationDate People_ids *****",
									"// pm.test(\"Assert Type of Blocks_ExpirationDate \" +i+\" People_ids\", function(){",
									"// var valBlocks_ExpirationDate_response=jsonValue.blocks[i].expirationDate;",
									"// var valBlocks_ExpirationDate_dataSheet=pm.variables.get(\"blocks_expirationDate\"+j+i);",
									"// var typeOfBlocks_ExpirationDate_response=typeof valBlocks_ExpirationDate_response;",
									"// var typeOfBlocks_ExpirationDate_dataSheet = pm.variables.get(\"typeOfBlocks_expirationDate\");",
									"",
									"// var testResult =  pm.expect(typeOfBlocks_ExpirationDate_dataSheet).to.be.eql(typeof valBlocks_ExpirationDate_response);",
									"        ",
									"// if(testResult)",
									"// {",
									"//     pm.test(\"Assert value of blocks_expirationDate\"+i+\" Relationship\", function()",
									"//     {",
									"        ",
									"//       if(typeof(valBlocks_ExpirationDate_dataSheet) == typeof(valBlocks_ExpirationDate_response)){",
									"",
									"//         pm.expect(valBlocks_ExpirationDate_response).to.eql(valBlocks_ExpirationDate_dataSheet); ",
									"          ",
									"//       }",
									"",
									"//       else",
									"//       {",
									"//         valCallBack(valBlocks_ExpirationDate_response,valBlocks_ExpirationDate_dataSheet, function(){});",
									"       ",
									"//        var ConValueBlocks_ExpirationDate=conversionData;",
									"//        pm.expect(valBlocks_ExpirationDate_response).to.eql(ConValueBlocks_ExpirationDate);      ",
									"//         }",
									"//     });",
									"// }",
									"// else{ postman.setNextRequest();}",
									"// });",
									"// }",
									"// });  ",
									"",
									"// var valRelationships_response=jsonData[0].relationships;",
									"// var lengthOfResponse = valRelationships_response.length;",
									"",
									"// var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"// var typeOfRelationships_response=typeof valRelationships_response;",
									"",
									"",
									"// //*******Assertion of type of : relationships People_ids******",
									"",
									"// var valRelationships_response=jsonValue.relationships;",
									"// var lengthOfResponse = valRelationships_response.length;",
									"",
									"// var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"// var typeOfRelationships_response=typeof valRelationships_response;",
									"// var typeOfRelationships_userId_dataSheet= pm.variables.get(\"typeOfRelationships_userId\");",
									"// var typeOfRelationships_relationshipTypeId_dataSheet= pm.variables.get(\"typeOfRelationships_relationshipTypeId\");",
									"// var testResultTypeOf;",
									"// pm.test(\"Assert Type of relationships People_ids\"+j, function(){",
									"// var testResultTypeOf = pm.expect(typeOfRelationships_dataSheet).to.be.eql(typeof valRelationships_response);",
									"",
									"",
									"",
									"// //*******Assertion of Key : relationships_userId People_ids******",
									"",
									"// if(testResultTypeOf){",
									"    ",
									"//     console.log(\"length.......\"+lengthOfResponse);",
									"//     if(lengthOfResponse!=0){",
									"    ",
									"//    for(var i=0;i<lengthOfResponse;i++){",
									"//     pm.test(\"Assert keys inside relations\",function()",
									"//         {",
									"       ",
									"//         pm.expect(jsonValue.relationships[i]).to.have.all.keys('userId','relationshipTypeId');",
									"//         }); ",
									"//     pm.test(\"Assert type of relationships_userId People_ids \"+j , function(){",
									"        ",
									"//         var typeOfRelationships_userId_response = typeof (jsonValue.relationships[i].userId);",
									"//         var valRelationships_userId_datasheet = pm.variables.get(\"relationships_userId\"+j+i) ;",
									"//         var testResultTypeOfUserId = pm.expect(typeOfRelationships_userId_response ).to.be.eql(pm.variables.get(\"typeOfRelationships_userId\"));",
									"     ",
									"//     if(testResultTypeOfUserId){",
									"//     pm.test(\"Assert value relationships_userId People_ids\"+j, function(){",
									"//         pm.expect(jsonValue.relationships[i].userId).to.be.eql(valRelationships_userId_datasheet.toString());",
									"//     });} }) ",
									"// //*******Assertion of Key : relationships_relationshipTypeId People_ids******    ",
									"//       pm.test(\"Assert type of relationships_relationshipTypeId People_ids \"+j , function(){",
									"//         var valRelationships_relationshipTypeId_datasheet = pm.variables.get(\"relationships_relationshipTypeId\"+j+i) ;",
									"//         var typeOfRelationships_relationshipTypeId_response = typeof (jsonValue.relationships[i].relationshipTypeId);",
									"        ",
									"//         var testResultTypeOfrelationshipTypeId = pm.expect(typeOfRelationships_relationshipTypeId_response ).to.be.eql(pm.variables.get(\"typeOfRelationships_relationshipTypeId\"));",
									"     ",
									"    ",
									"//     if(testResultTypeOfrelationshipTypeId){",
									"//     pm.test(\"Assert value relationships_relationshipTypeId People_ids\"+j, function(){",
									"//         pm.expect(jsonValue.relationships[i].relationshipTypeId).to.be.eql(valRelationships_relationshipTypeId_datasheet.toString());",
									"//     });} }) ;",
									"//    }",
									"// }",
									"// else {",
									"    ",
									"//     pm.test(\"Assert value of relationships when empty People_ids\"+j, function()",
									"//     {",
									"//      var valRelationships_response=jsonValue.relationships;",
									"// var valRelationships_dataSheet=pm.variables.get(\"relationships\"+j);",
									"// var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"// var typeOfRelationships_response=typeof valRelationships_response;",
									"",
									"// var testResult =  pm.expect(typeOfRelationships_dataSheet).to.be.eql(typeof valRelationships_response);",
									"",
									"",
									"//       if(typeof(valRelationships_dataSheet) == typeof(valRelationships_response)){",
									"",
									"//         pm.expect(valRelationships_response).to.eql(valRelationships_dataSheet); ",
									"          ",
									"//       }",
									"",
									"//       else",
									"//       {",
									"//         valCallBack(valRelationships_response,valRelationships_dataSheet, function(){});",
									"       ",
									"//        var ConValueRelationships=conversionData;",
									"//        pm.expect(valRelationships_response).to.eql(ConValueRelationships);      ",
									"//         }",
									"//     });",
									"",
									"// }",
									"// }",
									"// else{ postman.setNextRequest();",
									"    ",
									"// }",
									"",
									"// });",
									"//*******Assertion of Key : rassignmentIds People_ids********",
									"",
									"",
									"pm.test(\"Assert Type of assignmentIds People_ids\"+j, function(){",
									"var valAssignmentIds_response=jsonValue.assignmentIds;",
									"var valAssignmentIds_dataSheet=pm.variables.get(\"person_assignmentIds\"+j);",
									"var typeOfAssignmentIds_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var assignmentIds_count= pm.variables.get(\"assignmentIds_count\"+j);",
									"var typeOfAssignmentIds_response=typeof valAssignmentIds_response;",
									"",
									"var testResult =  pm.expect(typeOfAssignmentIds_dataSheet).to.be.eql(typeof valAssignmentIds_response);",
									"",
									"",
									"if(testResult)",
									"{",
									"pm.test(\"Assert count  of assignmentIds People_ids\"+j, function(){",
									"    var objToStr = JSON.stringify(valAssignmentIds_response);",
									"    var len = objToStr.split(\",\").length;",
									"    pm.expect(len).to.be.eql(assignmentIds_count);",
									"});",
									"}",
									"else{ postman.setNextRequest();",
									"}",
									"});",
									"",
									"",
									"pm.test(\"Assert Type of totalResults\", function(){",
									"var valAssignmentIds_response=jsonValue.totalResults;",
									"var valAssignmentIds_dataSheet=pm.variables.get(\"person_totalResults\"+j);",
									"var typeOfAssignmentIds_dataSheet= pm.variables.get(\"typeOfNumber\");",
									"var assignmentIds_count= pm.variables.get(\"person_totalResults\"+j);",
									"var typeOfAssignmentIds_response=typeof valAssignmentIds_response;",
									"",
									"var testResult =  pm.expect(typeOfAssignmentIds_response).to.be.eql(typeOfAssignmentIds_dataSheet);",
									"",
									"",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of totalResults \"+j, function()",
									"    {",
									"        ",
									"      if(typeOfAssignmentIds_response == (typeOfAssignmentIds_dataSheet)){",
									"",
									"        pm.expect(valAssignmentIds_response).to.eql(valAssignmentIds_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valWhoKnowsBest_response,valWhoKnowsBest_dataSheet, function(){});",
									"       ",
									"       var ConValueWhoKnowsBest=conversionData;",
									"       pm.expect(valWhoKnowsBest_response).to.eql(ConValueWhoKnowsBest);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"   }}}}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "token",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{url}}/peopleSearch?firstName=Reema&lastName=Last",
							"host": [
								"{{url}}"
							],
							"path": [
								"peopleSearch"
							],
							"query": [
								{
									"key": "fullName",
									"value": "Reema Singh",
									"disabled": true
								},
								{
									"key": "firstName",
									"value": "Reema"
								},
								{
									"key": "lastName",
									"value": "Last"
								},
								{
									"key": "company",
									"value": "Reema Test Compant",
									"disabled": true
								},
								{
									"key": "country",
									"value": "UK",
									"disabled": true
								},
								{
									"key": "doFuzzy",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Retrieve a Person",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var conversionData;",
									"",
									"function valCallBack(type,value,callback)",
									"{",
									"    if(typeof(type)==='string')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        conversionData=value.toString();",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    else if(typeof(type)==='boolean'){",
									"        switch(typeof value){",
									"            case \"string\":",
									"               switch(value.toLowerCase()) ",
									"                         {",
									"            case \"false\": ",
									"                conversionData= false;",
									"                callback(conversionData);",
									"                break;   ",
									"            case \"true\": ",
									"                conversionData= true;",
									"                callback(conversionData);",
									"                break; ",
									"            default: conversionData=true;",
									"                callback(conversionData);",
									"              ",
									"          }",
									"",
									"                callback(conversionData);",
									"                break;  ",
									"        }",
									"    }",
									"    else if(typeof(type)==='number')",
									"    {",
									"        ",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"string\":",
									"        conversionData=parseInt(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }else if(typeof(type)==='undefined')",
									"    {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    }else if(typeof(type)==='object')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        var num1=value.toString();",
									"        conversionData=JSON.parse(num1);",
									"        callback(conversionData);",
									"        break;",
									"      case \"string\":",
									"        conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    ",
									"    else if(typeof(type)==='function')",
									"    {",
									"        ",
									"        callback(conversionData);",
									"    }",
									"    return  conversionData;",
									"}",
									"",
									"",
									"",
									"",
									"",
									"if(responseCodeAssertion){",
									"//   const paramsString = request.url.split('ids=')[1];",
									"//   console.log(paramsString)",
									"//   var params = paramsString.split(\",\")",
									"",
									"// console.log(\"count of id as parameter : \"+params.length);",
									"// for(var j =0 ; j< params.length ; j++){",
									"var j=0;",
									"    ",
									"  ",
									"    ",
									"",
									"    ",
									"//*******Assertion of Key : boardexStatus People******",
									"pm.test(\"Assert Type of boardexStatus People \"+j, function(){",
									"var valBoardexStatus_response=jsonData.boardexStatus;",
									"var valBoardexStatus_dataSheet=pm.variables.get(\"person_boardexStatus\"+j);",
									"var typeOfBoardexStatus_dataSheet= pm.variables.get(\"typeOfNumber\");",
									"var typeOfBoardexStatus_response=typeof valBoardexStatus_response;",
									"",
									"var testResult =  pm.expect(typeOfBoardexStatus_dataSheet).to.be.eql(typeof valBoardexStatus_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of boardexStatus People\" +j, function()",
									"    {",
									"        ",
									"      if(typeof(valBoardexStatus_dataSheet) == typeof(valBoardexStatus_response)){",
									"",
									"        pm.expect(valBoardexStatus_response).to.eql(valBoardexStatus_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBoardexStatus_response,valBoardexStatus_dataSheet, function(){});",
									"       ",
									"       var ConValueBoardexStatus=conversionData;",
									"       pm.expect(valBoardexStatus_response).to.eql(ConValueBoardexStatus);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : boardexData People******",
									"",
									"",
									"pm.test(\"Assert Type of boardexData People\"+j, function(){",
									"var valBoardexData_response=jsonData.boardexData;",
									"var valBoardexData_dataSheet=pm.variables.get(\"person_boardexData\"+j);",
									"var typeOfBoardexData_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfBoardexData_response=typeof valBoardexData_response;",
									"",
									"var testResult =  pm.expect(typeOfBoardexData_dataSheet).to.be.eql(typeof valBoardexData_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of boardexData People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valBoardexData_dataSheet) == typeof(valBoardexData_response)){",
									"",
									"        pm.expect(valBoardexData_response).to.eql(valBoardexData_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBoardexData_response,valBoardexData_dataSheet, function(){});",
									"       ",
									"       var ConValueBoardexData=conversionData;",
									"       pm.expect(valBoardexData_response).to.eql(ConValueBoardexData);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : DCFStatus People******",
									"",
									"pm.test(\"Assert Type of DCFStatus People\"+j, function(){",
									"var valDCFStatus_response=jsonData.DCFStatus;",
									"var valDCFStatus_dataSheet=pm.variables.get(\"person_DCFStatus\"+j);",
									"var typeOfDCFStatus_dataSheet= pm.variables.get(\"typeOfNumber\");",
									"var typeOfDCFStatus_response=typeof valDCFStatus_response;",
									"",
									"var testResult =  pm.expect(typeOfDCFStatus_dataSheet).to.be.eql(typeof valDCFStatus_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of DCFStatus People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valDCFStatus_dataSheet) == typeof(valDCFStatus_response)){",
									"",
									"        pm.expect(valDCFStatus_response).to.eql(valDCFStatus_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valDCFStatus_response,valDCFStatus_dataSheet, function(){});",
									"       ",
									"       var ConValueDCFStatus=conversionData;",
									"       pm.expect(valDCFStatus_response).to.eql(ConValueDCFStatus);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : createdAt People******",
									"",
									"pm.test(\"Assert Type of createdAt People\"+j, function(){",
									"var valCreatedAt_response=jsonData.createdAt;",
									"var valCreatedAt_dataSheet=pm.variables.get(\"person_createdAt\"+j);",
									"var typeOfCreatedAt_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfCreatedAt_response=typeof valCreatedAt_response;",
									"",
									"var testResult =  pm.expect(typeOfCreatedAt_dataSheet).to.be.eql(typeof valCreatedAt_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of createdAt People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valCreatedAt_dataSheet) == typeof(valCreatedAt_response)){",
									"",
									"        pm.expect(valCreatedAt_response).to.eql(valCreatedAt_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valCreatedAt_response,valCreatedAt_dataSheet, function(){});",
									"       ",
									"       var ConValueCreatedAt=conversionData;",
									"       pm.expect(valCreatedAt_response).to.eql(ConValueCreatedAt);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : lastModifiedAt People******",
									"pm.test(\"Assert Type of lastModifiedAt People\"+j, function(){",
									"var valLastModifiedAt_response=jsonData.lastModifiedAt;",
									"var valLastModifiedAt_dataSheet=pm.variables.get(\"person_lastModifiedAt\"+j);",
									"var typeOfLastModifiedAt_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfLastModifiedAt_response=typeof valLastModifiedAt_response;",
									"",
									"var testResult =  pm.expect(typeOfLastModifiedAt_dataSheet).to.be.eql(typeof valLastModifiedAt_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of lastModifiedAt People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLastModifiedAt_dataSheet) == typeof(valLastModifiedAt_response)){",
									"",
									"        pm.expect(valLastModifiedAt_response).to.eql(valLastModifiedAt_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLastModifiedAt_response,valLastModifiedAt_dataSheet, function(){});",
									"       ",
									"       var ConValueLastModifiedAt=conversionData;",
									"       pm.expect(valLastModifiedAt_response).to.eql(ConValueLastModifiedAt);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : id People******",
									"pm.test(\"Assert Type of id People\"+j, function(){",
									"var valId_response=jsonData.id;",
									"var valId_dataSheet=pm.variables.get(\"person_id\"+j);",
									"var typeOfId_dataSheet= pm.variables.get(\"typeOfNumber\");",
									"var typeOfId_response=typeof valId_response;",
									"",
									"var testResult =  pm.expect(typeOfId_dataSheet).to.be.eql(typeof valId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of id People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valId_dataSheet) == typeof(valId_response)){",
									"",
									"        pm.expect(valId_response).to.eql(valId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valId_response,valId_dataSheet, function(){});",
									"       ",
									"       var ConValueId=conversionData;",
									"       pm.expect(valId_response).to.eql(ConValueId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : firstName People******",
									"",
									"",
									"pm.test(\"Assert Type of firstName People\"+j, function(){",
									"var valFirstName_response=jsonData.firstName;",
									"var valFirstName_dataSheet=pm.variables.get(\"person_firstName\"+j);",
									"var typeOfFirstName_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfFirstName_response=typeof valFirstName_response;",
									"",
									"var testResult =  pm.expect(typeOfFirstName_dataSheet).to.be.eql(typeof valFirstName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of firstName People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valFirstName_dataSheet) == typeof(valFirstName_response)){",
									"",
									"        pm.expect(valFirstName_response).to.eql(valFirstName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valFirstName_response,valFirstName_dataSheet, function(){});",
									"       ",
									"       var ConValueFirstName=conversionData;",
									"       pm.expect(valFirstName_response).to.eql(ConValueFirstName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : lastName People******",
									"",
									"pm.test(\"Assert Type of lastName People\"+j, function(){",
									"var valLastName_response=jsonData.lastName;",
									"var valLastName_dataSheet=pm.variables.get(\"person_lastName\"+j);",
									"var typeOfLastName_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfLastName_response=typeof valLastName_response;",
									"",
									"var testResult =  pm.expect(typeOfLastName_dataSheet).to.be.eql(typeof valLastName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of lastName People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLastName_dataSheet) == typeof(valLastName_response)){",
									"",
									"        pm.expect(valLastName_response).to.eql(valLastName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLastName_response,valLastName_dataSheet, function(){});",
									"       ",
									"       var ConValueLastName=conversionData;",
									"       pm.expect(valLastName_response).to.eql(ConValueLastName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : group1 People******",
									"pm.test(\"Assert Type of group1 People\"+j, function(){",
									"var valGroup1_response=jsonData.group1;",
									"var valGroup1_dataSheet=pm.variables.get(\"person_group1\"+j);",
									"var typeOfGroup1_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfGroup1_response=typeof valGroup1_response;",
									"",
									"var testResult =  pm.expect(typeOfGroup1_dataSheet).to.be.eql(typeof valGroup1_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of group1 People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGroup1_dataSheet) == typeof(valGroup1_response)){",
									"",
									"        pm.expect(valGroup1_response).to.eql(valGroup1_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGroup1_response,valGroup1_dataSheet, function(){});",
									"       ",
									"       var ConValueGroup1=conversionData;",
									"       pm.expect(valGroup1_response).to.eql(ConValueGroup1);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : group2 People******",
									"",
									"pm.test(\"Assert Type of group2 People\"+j, function(){",
									"var valGroup2_response=jsonData.group2;",
									"var valGroup2_dataSheet=pm.variables.get(\"person_group2\"+j);",
									"var typeOfGroup2_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfGroup2_response=typeof valGroup2_response;",
									"",
									"var testResult =  pm.expect(typeOfGroup2_dataSheet).to.be.eql(typeof valGroup2_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of group2 People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGroup2_dataSheet) == typeof(valGroup2_response)){",
									"",
									"        pm.expect(valGroup2_response).to.eql(valGroup2_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGroup2_response,valGroup2_dataSheet, function(){});",
									"       ",
									"       var ConValueGroup2=conversionData;",
									"       pm.expect(valGroup2_response).to.eql(ConValueGroup2);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : priorityId People******",
									"",
									"pm.test(\"Assert Type of priorityId People\"+j, function(){",
									"var valPriorityId_response=jsonData.priorityId;",
									"var valPriorityId_dataSheet=pm.variables.get(\"person_priorityId\"+j);",
									"var typeOfPriorityId_dataSheet= pm.variables.get(\"typeOfString\");",
									"var typeOfPriorityId_response=typeof valPriorityId_response;",
									"",
									"var testResult =  pm.expect(typeOfPriorityId_dataSheet).to.be.eql(typeof valPriorityId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of priorityId People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valPriorityId_dataSheet) == typeof(valPriorityId_response)){",
									"",
									"        pm.expect(valPriorityId_response).to.eql(valPriorityId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valPriorityId_response,valPriorityId_dataSheet, function(){});",
									"       ",
									"       var ConValuePriorityId=conversionData;",
									"       pm.expect(valPriorityId_response).to.eql(ConValuePriorityId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : todoNote People******",
									"",
									"pm.test(\"Assert Type of todoNote People\"+j, function(){",
									"var valTodoNote_response=jsonData.todoNote;",
									"var valTodoNote_dataSheet=pm.variables.get(\"person_todoNote\"+j);",
									"var typeOfTodoNote_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfTodoNote_response=typeof valTodoNote_response;",
									"",
									"var testResult =  pm.expect(typeOfTodoNote_dataSheet).to.be.eql(typeof valTodoNote_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of todoNote People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valTodoNote_dataSheet) == typeof(valTodoNote_response)){",
									"",
									"        pm.expect(valTodoNote_response).to.eql(valTodoNote_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valTodoNote_response,valTodoNote_dataSheet, function(){});",
									"       ",
									"       var ConValueTodoNote=conversionData;",
									"       pm.expect(valTodoNote_response).to.eql(ConValueTodoNote);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : linkedinProfileUrl People******",
									"",
									"pm.test(\"Assert Type of linkedinProfileUrl People\"+j, function(){",
									"var valLinkedinProfileUrl_response=jsonData.linkedinProfileUrl;",
									"var valLinkedinProfileUrl_dataSheet=pm.variables.get(\"person_linkedinProfileUrl\"+j);",
									"var typeOfLinkedinProfileUrl_dataSheet= pm.variables.get(\"typeOfObject\");",
									"var typeOfLinkedinProfileUrl_response=typeof valLinkedinProfileUrl_response;",
									"",
									"var testResult =  pm.expect(typeOfLinkedinProfileUrl_dataSheet).to.be.eql(typeof valLinkedinProfileUrl_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of linkedinProfileUrl People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLinkedinProfileUrl_dataSheet) == typeof(valLinkedinProfileUrl_response)){",
									"",
									"        pm.expect(valLinkedinProfileUrl_response).to.eql(valLinkedinProfileUrl_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLinkedinProfileUrl_response,valLinkedinProfileUrl_dataSheet, function(){});",
									"       ",
									"       var ConValueLinkedinProfileUrl=conversionData;",
									"       pm.expect(valLinkedinProfileUrl_response).to.eql(ConValueLinkedinProfileUrl);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : assistant People******",
									"pm.test(\"Assert Type of assistant People\"+j, function(){",
									"var valAssistant_response=jsonData.assistant;",
									"var valAssistant_dataSheet=pm.variables.get(\"assistant\"+j);",
									"var typeOfAssistant_dataSheet= pm.variables.get(\"typeOfAssistant\");",
									"var typeOfAssistant_response=typeof valAssistant_response;",
									"",
									"var testResult =  pm.expect(typeOfAssistant_dataSheet).to.be.eql(typeof valAssistant_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of assistant People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valAssistant_dataSheet) == typeof(valAssistant_response)){",
									"",
									"        pm.expect(valAssistant_response).to.eql(valAssistant_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valAssistant_response,valAssistant_dataSheet, function(){});",
									"       ",
									"       var ConValueAssistant=conversionData;",
									"       pm.expect(valAssistant_response).to.eql(ConValueAssistant);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : qualifications People******",
									"",
									"pm.test(\"Assert Type of qualifications People\"+j, function(){",
									"var valQualifications_response=jsonData.qualifications;",
									"var valQualifications_dataSheet=pm.variables.get(\"qualifications\"+j);",
									"var typeOfQualifications_dataSheet= pm.variables.get(\"typeOfQualifications\");",
									"var typeOfQualifications_response=typeof valQualifications_response;",
									"",
									"var testResult =  pm.expect(typeOfQualifications_dataSheet).to.be.eql(typeof valQualifications_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of qualifications People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valQualifications_dataSheet) == typeof(valQualifications_response)){",
									"",
									"        pm.expect(valQualifications_response).to.eql(valQualifications_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valQualifications_response,valQualifications_dataSheet, function(){});",
									"       ",
									"       var ConValueQualifications=conversionData;",
									"       pm.expect(valQualifications_response).to.eql(ConValueQualifications);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of type of : contactDetails People******",
									"",
									"var valContactDetails_response=jsonData.contactDetails;",
									"var lengthOfResponse = valContactDetails_response.length;",
									"",
									"var typeOfContactDetails_dataSheet= pm.variables.get(\"typeOfContactDetails\");",
									"var typeOfContactDetails_response=typeof valContactDetails_response;",
									"var typeOfContactDetails_label_dataSheet= pm.variables.get(\"typeOfContactDetails_label\");",
									"var typeOfContactDetails_value_dataSheet= pm.variables.get(\"typeOfContactDetails_value\");",
									"var typeOfContactDetails_icon_dataSheet= pm.variables.get(\"typeOfContactDetails_icon\");",
									"var typeOfContactDetails_isDefault_dataSheet= pm.variables.get(\"typeOfContactDetails_isDefault\");",
									"var typeOfContactDetails_lastModifiedAt_dataSheet= pm.variables.get(\"typeOfContactDetails_lastModifiedAt\");",
									"var testResultTypeOf;",
									"pm.test(\"Assert Type of contactDetails People\"+j, function(){",
									"var testResultTypeOf = pm.expect(typeOfContactDetails_dataSheet).to.be.eql(typeof valContactDetails_response);",
									"",
									"",
									"",
									"//*******Assertion of Key : contactDetails_label People******",
									"",
									"if(testResultTypeOf){",
									"    ",
									"    console.log(\"length.......\"+lengthOfResponse);",
									"    if(lengthOfResponse!=0){",
									"    ",
									"   for(var i=0;i<lengthOfResponse;i++){",
									"    pm.test(\"Assert keys inside contactDetails\",function()",
									"        {",
									"       ",
									"        pm.expect(jsonData.contactDetails[i]).to.have.all.keys('label','icon','value','isDefault','lastModifiedAt');",
									"        }); ",
									"    pm.test(\"Assert type of contactDetails_label People \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_label_response = typeof (jsonData.contactDetails[i].label);",
									"        var valContactDetails_label_datasheet = pm.variables.get(\"contactDetails_label\"+j+i) ;",
									"        var testResultTypeOfLabel = pm.expect(typeOfContactDetails_label_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_label\"));",
									"     ",
									"    if(testResultTypeOfLabel){",
									"    pm.test(\"Assert value contactDetails_label People\"+j, function(){",
									"        pm.expect(jsonData.contactDetails[i].label).to.be.eql(valContactDetails_label_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"\t",
									"\t//*******Assertion of Key : contactDetails_value People******",
									"\t",
									"\t  pm.test(\"Assert type of contactDetails_value People \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_value_response = typeof (jsonData.contactDetails[i].value);",
									"        var valContactDetails_value_datasheet = pm.variables.get(\"contactDetails_value\"+j+i) ;",
									"        var testResultTypeOfLabel = pm.expect(typeOfContactDetails_value_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_value\"));",
									"     ",
									"    if(testResultTypeOfLabel){",
									"    pm.test(\"Assert value contactDetails_value People\"+j, function(){",
									"        pm.expect(jsonData.contactDetails[i].value).to.be.eql(valContactDetails_value_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"\t//*******Assertion of Key : contactDetails_icon People******",
									"\t",
									"\t  pm.test(\"Assert type of contactDetails_icon People \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_icon_response = typeof (jsonData.contactDetails[i].icon);",
									"        var valContactDetails_icon_datasheet = pm.variables.get(\"contactDetails_icon\"+j+i) ;",
									"        var testResultTypeOfIcon = pm.expect(typeOfContactDetails_icon_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_icon\"));",
									"     ",
									"    if(testResultTypeOfIcon){",
									"    pm.test(\"Assert value contactDetails_icon People\"+j, function(){",
									"        pm.expect(jsonData.contactDetails[i].icon).to.be.eql(valContactDetails_icon_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t//*******Assertion of Key : contactDetails_isDefault People******",
									"\t\t  pm.test(\"Assert type of contactDetails_isDefault People \"+j , function(){",
									"        var valContactDetails_isDefault_response = jsonData.contactDetails[i].isDefault;",
									"        var typeOfContactDetails_isDefault_response = typeof (jsonData.contactDetails[i].isDefault);",
									"        var valContactDetails_isDefault_dataSheet = pm.variables.get(\"contactDetails_isDefault\"+j+i) ;",
									"        var testResultTypeOfIsDefault = pm.expect(typeOfContactDetails_isDefault_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_isDefault\"));",
									"     ",
									"    if(testResultTypeOfIsDefault){",
									"\t\t if(typeof(valContactDetails_isDefault_dataSheet) == typeof(valContactDetails_isDefault_response))",
									"              {",
									"        ",
									"                pm.expect(valContactDetails_isDefault_response).to.eql(valContactDetails_isDefault_dataSheet); ",
									"                  ",
									"              }",
									"\t\telse",
									"              {",
									"                valCallBack(valContactDetails_isDefault_response,valContactDetails_isDefault_dataSheet, function(){});",
									"               ",
									"               var ConValueContactDetails_isDefault=conversionData;",
									"               pm.expect(valContactDetails_isDefault_response).to.eql(ConValueContactDetails_isDefault);      ",
									"                }",
									"\t}",
									"   else{ postman.setNextRequest();}\t",
									"\t});",
									"",
									"\t//*******Assertion of Key : contactDetails_lastModified People******",
									"\t",
									"\t\t",
									"\t  pm.test(\"Assert type of contactDetails_lastModifiedAt People \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_lastModifiedAt_response = typeof (jsonData.contactDetails[i].lastModifiedAt);",
									"        var valContactDetails_lastModifiedAt_datasheet = pm.variables.get(\"contactDetails_lastModifiedAt\"+j+i) ;",
									"        var testResultTypeOfLastModifiedAt = pm.expect(typeOfContactDetails_lastModifiedAt_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_lastModifiedAt\"));",
									"     ",
									"    if(testResultTypeOfLastModifiedAt){",
									"    pm.test(\"Assert value contactDetails_lastModifiedAt People\"+j, function(){",
									"        pm.expect(jsonData.contactDetails[i].lastModifiedAt).to.be.eql(valContactDetails_lastModifiedAt_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"",
									"",
									"   }",
									"}",
									"",
									"",
									"else {",
									"    ",
									"    pm.test(\"Assert value of contactDetails when empty People\"+j, function()",
									"    {",
									"     var valContactDetails_response=jsonData.contactDetails;",
									"var valContactDetails_dataSheet=pm.variables.get(\"contactDetails\"+j);",
									"var typeOfContactDetails_dataSheet= pm.variables.get(\"typeOfContactDetails\");",
									"var typeOfContactDetails_response=typeof valContactDetails_response;",
									"",
									"var testResult =  pm.expect(typeOfContactDetails_dataSheet).to.be.eql(typeof valContactDetails_response);",
									"",
									"",
									"      if(typeof(valContactDetails_dataSheet) == typeof(valContactDetails_response)){",
									"",
									"        pm.expect(valContactDetails_response).to.eql(valContactDetails_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valContactDetails_response,valContactDetails_dataSheet, function(){});",
									"       ",
									"       var ConValueContactDetails=conversionData;",
									"       pm.expect(valContactDetails_response).to.eql(ConValueContactDetails);      ",
									"        }",
									"    });",
									"",
									"}",
									"}",
									"else{ postman.setNextRequest();",
									"    ",
									"}",
									"",
									"});",
									"",
									"//*******Assertion of Key : workHistory People******",
									"",
									"pm.test(\"Assert Type of workHistory People\"+j, function(){",
									"var valWorkHistory_response=jsonData.workHistory;",
									"var valWorkHistory_dataSheet=pm.variables.get(\"workHistory\"+j);",
									"var typeOfWorkHistory_dataSheet= pm.variables.get(\"typeOfWorkHistory\");",
									"var typeOfWorkHistory_response=typeof valWorkHistory_response;",
									"",
									"var testResult =  pm.expect(typeOfWorkHistory_dataSheet).to.be.eql(typeof valWorkHistory_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of workHistory People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valWorkHistory_dataSheet) == typeof(valWorkHistory_response)){",
									"",
									"        pm.expect(valWorkHistory_response).to.eql(valWorkHistory_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valWorkHistory_response,valWorkHistory_dataSheet, function(){});",
									"       ",
									"       var ConValueWorkHistory=conversionData;",
									"       pm.expect(valWorkHistory_response).to.eql(ConValueWorkHistory);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : geoMobilityNotes People******",
									"",
									"pm.test(\"Assert Type of geoMobilityNotes People\"+j, function(){",
									"var valGeoMobilityNotes_response=jsonData.geoMobilityNotes;",
									"var valGeoMobilityNotes_dataSheet=pm.variables.get(\"geoMobilityNotes\"+j);",
									"var typeOfGeoMobilityNotes_dataSheet= pm.variables.get(\"typeOfGeoMobilityNotes\");",
									"var typeOfGeoMobilityNotes_response=typeof valGeoMobilityNotes_response;",
									"",
									"var testResult =  pm.expect(typeOfGeoMobilityNotes_dataSheet).to.be.eql(typeof valGeoMobilityNotes_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of geoMobilityNotes People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGeoMobilityNotes_dataSheet) == typeof(valGeoMobilityNotes_response)){",
									"",
									"        pm.expect(valGeoMobilityNotes_response).to.eql(valGeoMobilityNotes_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGeoMobilityNotes_response,valGeoMobilityNotes_dataSheet, function(){});",
									"       ",
									"       var ConValueGeoMobilityNotes=conversionData;",
									"       pm.expect(valGeoMobilityNotes_response).to.eql(ConValueGeoMobilityNotes);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : birthday People******",
									"",
									"pm.test(\"Assert Type of birthday People\"+j, function(){",
									"var valBirthday_response=jsonData.birthday;",
									"var valBirthday_dataSheet=pm.variables.get(\"birthday\"+j);",
									"var typeOfBirthday_dataSheet= pm.variables.get(\"typeOfBirthday\");",
									"var typeOfBirthday_response=typeof valBirthday_response;",
									"",
									"var testResult =  pm.expect(typeOfBirthday_dataSheet).to.be.eql(typeof valBirthday_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of birthday People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valBirthday_dataSheet) == typeof(valBirthday_response)){",
									"",
									"        pm.expect(valBirthday_response).to.eql(valBirthday_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBirthday_response,valBirthday_dataSheet, function(){});",
									"       ",
									"       var ConValueBirthday=conversionData;",
									"       pm.expect(valBirthday_response).to.eql(ConValueBirthday);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : principalNationalityId People******",
									"",
									"pm.test(\"Assert Type of principalNationalityId People\"+j, function(){",
									"var valPrincipalNationalityId_response=jsonData.principalNationalityId;",
									"var valPrincipalNationalityId_dataSheet=pm.variables.get(\"principalNationalityId\"+j);",
									"var typeOfPrincipalNationalityId_dataSheet= pm.variables.get(\"typeOfPrincipalNationalityId\");",
									"var typeOfPrincipalNationalityId_response=typeof valPrincipalNationalityId_response;",
									"",
									"var testResult =  pm.expect(typeOfPrincipalNationalityId_dataSheet).to.be.eql(typeof valPrincipalNationalityId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of principalNationalityId People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valPrincipalNationalityId_dataSheet) == typeof(valPrincipalNationalityId_response)){",
									"",
									"        pm.expect(valPrincipalNationalityId_response).to.eql(valPrincipalNationalityId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valPrincipalNationalityId_response,valPrincipalNationalityId_dataSheet, function(){});",
									"       ",
									"       var ConValuePrincipalNationalityId=conversionData;",
									"       pm.expect(valPrincipalNationalityId_response).to.eql(ConValuePrincipalNationalityId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"",
									"",
									"//*******Assertion of Key : languages People******",
									"",
									"",
									"pm.test(\"Assert Type of languages People\"+j, function(){",
									"var valLanguages_response=jsonData.languages;",
									"var valLanguages_dataSheet=pm.variables.get(\"languages\"+j);",
									"var typeOfLanguages_dataSheet= pm.variables.get(\"typeOfLanguages\");",
									"var typeOfLanguages_response=typeof valLanguages_response;",
									"",
									"var testResult =  pm.expect(typeOfLanguages_dataSheet).to.be.eql(typeof valLanguages_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of languages People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLanguages_dataSheet) == typeof(valLanguages_response)){",
									"",
									"        pm.expect(valLanguages_response).to.eql(valLanguages_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLanguages_response,valLanguages_dataSheet, function(){});",
									"       ",
									"       var ConValueLanguages=conversionData;",
									"       pm.expect(valLanguages_response).to.eql(ConValueLanguages);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : homeCountryId People******",
									"",
									"pm.test(\"Assert Type of homeCountryId People\"+j, function(){",
									"var valHomeCountryId_response=jsonData.homeCountryId;",
									"var valHomeCountryId_dataSheet=pm.variables.get(\"homeCountryId\"+j);",
									"var typeOfHomeCountryId_dataSheet= pm.variables.get(\"typeOfHomeCountryId\");",
									"var typeOfHomeCountryId_response=typeof valHomeCountryId_response;",
									"",
									"var testResult =  pm.expect(typeOfHomeCountryId_dataSheet).to.be.eql(typeof valHomeCountryId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of homeCountryId People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valHomeCountryId_dataSheet) == typeof(valHomeCountryId_response)){",
									"",
									"        pm.expect(valHomeCountryId_response).to.eql(valHomeCountryId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valHomeCountryId_response,valHomeCountryId_dataSheet, function(){});",
									"       ",
									"       var ConValueHomeCountryId=conversionData;",
									"       pm.expect(valHomeCountryId_response).to.eql(ConValueHomeCountryId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : maritalStatusId People******",
									"",
									"pm.test(\"Assert Type of maritalStatusId People\"+j, function(){",
									"var valMaritalStatusId_response=jsonData.maritalStatusId;",
									"var valMaritalStatusId_dataSheet=pm.variables.get(\"maritalStatusId\"+j);",
									"var typeOfMaritalStatusId_dataSheet= pm.variables.get(\"typeOfMaritalStatusId\");",
									"var typeOfMaritalStatusId_response=typeof valMaritalStatusId_response;",
									"",
									"var testResult =  pm.expect(typeOfMaritalStatusId_dataSheet).to.be.eql(typeof valMaritalStatusId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of maritalStatusId People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valMaritalStatusId_dataSheet) == typeof(valMaritalStatusId_response)){",
									"",
									"        pm.expect(valMaritalStatusId_response).to.eql(valMaritalStatusId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valMaritalStatusId_response,valMaritalStatusId_dataSheet, function(){});",
									"       ",
									"       var ConValueMaritalStatusId=conversionData;",
									"       pm.expect(valMaritalStatusId_response).to.eql(ConValueMaritalStatusId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"",
									"//*******Assertion of Key : spouseName People******",
									"",
									"",
									"pm.test(\"Assert Type of spouseName People\"+j, function(){",
									"var valSpouseName_response=jsonData.spouseName;",
									"var valSpouseName_dataSheet=pm.variables.get(\"spouseName\"+j);",
									"var typeOfSpouseName_dataSheet= pm.variables.get(\"typeOfSpouseName\");",
									"var typeOfSpouseName_response=typeof valSpouseName_response;",
									"",
									"var testResult =  pm.expect(typeOfSpouseName_dataSheet).to.be.eql(typeof valSpouseName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of spouseName People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valSpouseName_dataSheet) == typeof(valSpouseName_response)){",
									"",
									"        pm.expect(valSpouseName_response).to.eql(valSpouseName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valSpouseName_response,valSpouseName_dataSheet, function(){});",
									"       ",
									"       var ConValueSpouseName=conversionData;",
									"       pm.expect(valSpouseName_response).to.eql(ConValueSpouseName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : children People******",
									"",
									"",
									"pm.test(\"Assert Type of children People\"+j, function(){",
									"var valChildren_response=jsonData.children;",
									"var valChildren_dataSheet=pm.variables.get(\"children\"+j);",
									"var typeOfChildren_dataSheet= pm.variables.get(\"typeOfChildren\");",
									"var typeOfChildren_response=typeof valChildren_response;",
									"",
									"var testResult =  pm.expect(typeOfChildren_dataSheet).to.be.eql(typeof valChildren_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of children People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valChildren_dataSheet) == typeof(valChildren_response)){",
									"",
									"        pm.expect(valChildren_response).to.eql(valChildren_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valChildren_response,valChildren_dataSheet, function(){});",
									"       ",
									"       var ConValueChildren=conversionData;",
									"       pm.expect(valChildren_response).to.eql(ConValueChildren);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : whoKnowsBest People******",
									"",
									"pm.test(\"Assert Type of whoKnowsBest People\"+j, function(){",
									"var valWhoKnowsBest_response=jsonData.whoKnowsBest;",
									"var valWhoKnowsBest_dataSheet=pm.variables.get(\"whoKnowsBest\"+j);",
									"var typeOfWhoKnowsBest_dataSheet= pm.variables.get(\"typeOfWhoKnowsBest\");",
									"var typeOfWhoKnowsBest_response=typeof valWhoKnowsBest_response;",
									"",
									"var testResult =  pm.expect(typeOfWhoKnowsBest_dataSheet).to.be.eql(typeof valWhoKnowsBest_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of whoKnowsBest People\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valWhoKnowsBest_dataSheet) == typeof(valWhoKnowsBest_response)){",
									"",
									"        pm.expect(valWhoKnowsBest_response).to.eql(valWhoKnowsBest_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valWhoKnowsBest_response,valWhoKnowsBest_dataSheet, function(){});",
									"       ",
									"       var ConValueWhoKnowsBest=conversionData;",
									"       pm.expect(valWhoKnowsBest_response).to.eql(ConValueWhoKnowsBest);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : Blocks People *****",
									"pm.test(\"Assert of Blocks People\"+j, function(){",
									"var valBlocks_response=jsonData.blocks;",
									"",
									"var typeOfBlocks_Type_dataSheet= pm.variables.get(\"typeOfBlocks_Type\");",
									"var typeOfBlocks_ExpirationDate_dataSheet= pm.variables.get(\"typeOfBlocks_ExpirationDate\");",
									"",
									"",
									"    var i;",
									"",
									"    for(i=0;i<valBlocks_response.length;i++){",
									"",
									"        pm.test(\"Assert keys inside Blocks\",function()",
									"        {",
									"        pm.expect(jsonData.blocks[i]).to.have.all.keys('type','expirationDate');",
									"        });",
									"",
									"//*******Assertion of Key : Blocks_Type People *****",
									"pm.test(\"Assert Type of Blocks_Type\" +i+ \"People\", function(){",
									"var valBlocks_Type_response=jsonData.blocks[i].type;",
									"var valBlocks_Type_dataSheet=pm.variables.get(\"blocks_type\"+j+i);",
									"var typeOfBlocks_Type_response=typeof valBlocks_Type_response;",
									"var typeOfBlocks_Type_dataSheet = pm.variables.get(\"typeOfBlocks_type\");",
									"var testResult =  pm.expect(typeOfBlocks_Type_dataSheet).to.be.eql(typeof valBlocks_Type_response);",
									"        ",
									"if(testResult)",
									"{",
									"    ",
									"    pm.test(\"Assert value of blocks_type \"+i+  \"People\", function()",
									"    {",
									"        ",
									"      if(typeof(valBlocks_Type_dataSheet) == typeof(valBlocks_Type_response)){",
									"",
									"        pm.expect(valBlocks_Type_response).to.eql(valBlocks_Type_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBlocks_Type_response,valBlocks_Type_dataSheet, function(){});",
									"       ",
									"       var ConValueBlocks_Type=conversionData;",
									"       pm.expect(valBlocks_Type_response).to.eql(ConValueBlocks_Type);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : Blocks_ExpirationDate People *****",
									"pm.test(\"Assert Type of Blocks_ExpirationDate \" +i+\" People\", function(){",
									"var valBlocks_ExpirationDate_response=jsonData.blocks[i].expirationDate;",
									"var valBlocks_ExpirationDate_dataSheet=pm.variables.get(\"blocks_expirationDate\"+j+i);",
									"var typeOfBlocks_ExpirationDate_response=typeof valBlocks_ExpirationDate_response;",
									"var typeOfBlocks_ExpirationDate_dataSheet = pm.variables.get(\"typeOfBlocks_expirationDate\");",
									"",
									"var testResult =  pm.expect(typeOfBlocks_ExpirationDate_dataSheet).to.be.eql(typeof valBlocks_ExpirationDate_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of blocks_expirationDate\"+i+\" Relationship\", function()",
									"    {",
									"        ",
									"      if(typeof(valBlocks_ExpirationDate_dataSheet) == typeof(valBlocks_ExpirationDate_response)){",
									"",
									"        pm.expect(valBlocks_ExpirationDate_response).to.eql(valBlocks_ExpirationDate_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBlocks_ExpirationDate_response,valBlocks_ExpirationDate_dataSheet, function(){});",
									"       ",
									"       var ConValueBlocks_ExpirationDate=conversionData;",
									"       pm.expect(valBlocks_ExpirationDate_response).to.eql(ConValueBlocks_ExpirationDate);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"}",
									"});  ",
									"",
									"var valRelationships_response=jsonData.relationships;",
									"var lengthOfResponse = valRelationships_response.length;",
									"",
									"var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"var typeOfRelationships_response=typeof valRelationships_response;",
									"",
									"",
									"//*******Assertion of type of : relationships People******",
									"",
									"var valRelationships_response=jsonData.relationships;",
									"var lengthOfResponse = valRelationships_response.length;",
									"",
									"var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"var typeOfRelationships_response=typeof valRelationships_response;",
									"var typeOfRelationships_userId_dataSheet= pm.variables.get(\"typeOfRelationships_userId\");",
									"var typeOfRelationships_relationshipTypeId_dataSheet= pm.variables.get(\"typeOfRelationships_relationshipTypeId\");",
									"var testResultTypeOf;",
									"pm.test(\"Assert Type of relationships People\"+j, function(){",
									"var testResultTypeOf = pm.expect(typeOfRelationships_dataSheet).to.be.eql(typeof valRelationships_response);",
									"",
									"",
									"",
									"//*******Assertion of Key : relationships_userId People******",
									"",
									"if(testResultTypeOf){",
									"    ",
									"    console.log(\"length.......\"+lengthOfResponse);",
									"    if(lengthOfResponse!=0){",
									"    ",
									"   for(var i=0;i<lengthOfResponse;i++){",
									"    pm.test(\"Assert keys inside relations\",function()",
									"        {",
									"       ",
									"        pm.expect(jsonData.relationships[i]).to.have.all.keys('userId','relationshipTypeId');",
									"        }); ",
									"    pm.test(\"Assert type of relationships_userId People \"+j , function(){",
									"        ",
									"        var typeOfRelationships_userId_response = typeof (jsonData.relationships[i].userId);",
									"        var valRelationships_userId_datasheet = pm.variables.get(\"relationships_userId\"+j+i) ;",
									"        var testResultTypeOfUserId = pm.expect(typeOfRelationships_userId_response ).to.be.eql(pm.variables.get(\"typeOfRelationships_userId\"));",
									"     ",
									"    if(testResultTypeOfUserId){",
									"    pm.test(\"Assert value relationships_userId People\"+j, function(){",
									"        pm.expect(jsonData.relationships[i].userId).to.be.eql(valRelationships_userId_datasheet.toString());",
									"    });} }) ",
									"//*******Assertion of Key : relationships_relationshipTypeId People******    ",
									"      pm.test(\"Assert type of relationships_relationshipTypeId People \"+j , function(){",
									"        var valRelationships_relationshipTypeId_datasheet = pm.variables.get(\"relationships_relationshipTypeId\"+j+i) ;",
									"        var typeOfRelationships_relationshipTypeId_response = typeof (jsonData.relationships[i].relationshipTypeId);",
									"        ",
									"        var testResultTypeOfrelationshipTypeId = pm.expect(typeOfRelationships_relationshipTypeId_response ).to.be.eql(pm.variables.get(\"typeOfRelationships_relationshipTypeId\"));",
									"     ",
									"    ",
									"    if(testResultTypeOfrelationshipTypeId){",
									"    pm.test(\"Assert value relationships_relationshipTypeId People\"+j, function(){",
									"        pm.expect(jsonData.relationships[i].relationshipTypeId).to.be.eql(valRelationships_relationshipTypeId_datasheet.toString());",
									"    });} }) ;",
									"   }",
									"}",
									"else {",
									"    ",
									"    pm.test(\"Assert value of relationships when empty People\"+j, function()",
									"    {",
									"     var valRelationships_response=jsonData.relationships;",
									"var valRelationships_dataSheet=pm.variables.get(\"relationships\"+j);",
									"var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"var typeOfRelationships_response=typeof valRelationships_response;",
									"",
									"var testResult =  pm.expect(typeOfRelationships_dataSheet).to.be.eql(typeof valRelationships_response);",
									"",
									"",
									"      if(typeof(valRelationships_dataSheet) == typeof(valRelationships_response)){",
									"",
									"        pm.expect(valRelationships_response).to.eql(valRelationships_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valRelationships_response,valRelationships_dataSheet, function(){});",
									"       ",
									"       var ConValueRelationships=conversionData;",
									"       pm.expect(valRelationships_response).to.eql(ConValueRelationships);      ",
									"        }",
									"    });",
									"",
									"}",
									"}",
									"else{ postman.setNextRequest();",
									"    ",
									"}",
									"",
									"});",
									"//*******Assertion of Key : rassignmentIds People********",
									"",
									"",
									"pm.test(\"Assert Type of assignmentIds People\"+j, function(){",
									"var valAssignmentIds_response=jsonData.assignmentIds;",
									"var valAssignmentIds_dataSheet=pm.variables.get(\"assignmentIds\"+j);",
									"var typeOfAssignmentIds_dataSheet= pm.variables.get(\"typeOfAssignmentIds\");",
									"var assignmentIds_count= pm.variables.get(\"assignmentIds_count\"+j);",
									"var typeOfAssignmentIds_response=typeof valAssignmentIds_response;",
									"",
									"var testResult =  pm.expect(typeOfAssignmentIds_dataSheet).to.be.eql(typeof valAssignmentIds_response);",
									"",
									"",
									"if(testResult)",
									"{",
									"pm.test(\"Assert count  of assignmentIds People\"+j, function(){",
									"    var objToStr = JSON.stringify(valAssignmentIds_response);",
									"    var len = objToStr.split(\",\").length;",
									"    pm.expect(len).to.be.eql(assignmentIds_count);",
									"});",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/people/10480",
							"host": [
								"{{url}}"
							],
							"path": [
								"people",
								"10480"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Retrieve a Person's Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();",
									"var conversionData;",
									"var jsonValue;",
									"",
									"",
									"function valCallBack(type,value,callback)",
									"{",
									"    if(typeof(type)==='string')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        conversionData=value.toString();",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    else if(typeof(type)==='boolean'){",
									"        switch(typeof value){",
									"            case \"string\":",
									"               switch(value.toLowerCase()) ",
									"                         {",
									"            case \"false\": ",
									"                conversionData= false;",
									"                callback(conversionData);",
									"                break;   ",
									"            case \"true\": ",
									"                conversionData= true;",
									"                callback(conversionData);",
									"                break; ",
									"            default: conversionData=true;",
									"                callback(conversionData);",
									"              ",
									"          }",
									"",
									"                callback(conversionData);",
									"                break;  ",
									"        }",
									"    }",
									"    else if(typeof(type)==='number')",
									"    {",
									"        ",
									"    switch (typeof(value)) ",
									"        {",
									"      case \"string\":",
									"        conversionData=parseInt(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }else if(typeof(type)==='undefined')",
									"    {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    }else if(typeof(type)==='object')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        var num1=value.toString();",
									"        conversionData=JSON.parse(num1);",
									"        callback(conversionData);",
									"        break;",
									"      case \"string\":",
									"        conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    ",
									"    else if(typeof(type)==='function')",
									"    {",
									"        ",
									"        callback(conversionData);",
									"    }",
									"    return  conversionData;",
									"}",
									"",
									"",
									"for(var j =0 ; j<jsonData.length  ; j++){",
									"    console.log(\"length of object \" + jsonData.length);",
									" jsonValue=jsonData[j];",
									"  console.log(\"My Val \"+jsonValue.createdAt);",
									"  console.log(\"My data val\"+data['person_doc_createdAt'+j])",
									"",
									"pm.test(\"Check if Document object contains all provided keys\",function()",
									"    {",
									"      pm.expect(jsonValue).to.have.all.keys('createdAt','lastModifiedAt','title','url','owner','id','typeId','links');",
									"}); ",
									"",
									"//*******Assertion of Key : createdAt   *********",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of createdAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.createdAt === typeof data['person_doc_createdAt'+j]) {",
									"          pm.expect(data['person_doc_createdAt'+j]).to.eql(jsonValue.createdAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.createdAt, data['person_doc_createdAt'+j], function () { });",
									"",
									"          var concreatedAt = conversionData;",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"",
									"//*******Assertion of Key : lastModifiedAts   *********",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.lastModifiedAt === typeof data['person_doc_lastModifiedAt'+j]) {",
									"          pm.expect(data['person_doc_lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.lastModifiedAt, data['person_doc_lastModifiedAt'+j], function () { });",
									"",
									"          var conlastModifiedAt = conversionData;",
									"          pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : titles   *********",
									"  pm.test(\"Assert Type of title\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.title).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of title\"+j, function () {",
									"",
									"        if (typeof jsonValue.title === typeof data['person_doc_title'+j]) {",
									"          pm.expect(data['person_doc_title'+j]).to.eql(jsonValue.title);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.title, data['person_doc_title'+j], function () { });",
									"",
									"          var contitle = conversionData;",
									"          pm.expect(jsonValue.title).to.eql(contitle);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"  //*******Assertion of Key : urls   *********",
									"  pm.test(\"Assert Type of url\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.url).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of url\"+j, function () {",
									"",
									"        if (typeof jsonValue.url === typeof data['person_doc_url'+j]) {",
									"          pm.expect(data['person_doc_url'+j]).to.eql(jsonValue.url);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.url, data['person_doc_url'+j], function () { });",
									"",
									"          var conurl = conversionData;",
									"          pm.expect(jsonValue.url).to.eql(conurl);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : owners   *********",
									"  pm.test(\"Assert Type of owner\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.owner).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of owner\"+j, function () {",
									"",
									"        if (typeof jsonValue.owner === typeof data['owner'+j]) {",
									"          pm.expect(data['person_doc_owner'+j]).to.eql(jsonValue.owner);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.owner, data['owner'+j], function () { });",
									"",
									"          var conowner = conversionData;",
									"          pm.expect(jsonValue.owner).to.eql(conowner);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"    //*******Assertion of Key : ids   *********",
									"  pm.test(\"Assert Type of id\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of id\"+j, function () {",
									"",
									"        if (typeof jsonValue.id === typeof data['person_doc_Id'+j]) {",
									"          pm.expect(data['person_doc_Id'+j]).to.eql(jsonValue.id);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.id, data['person_doc_Id'+j], function () { });",
									"",
									"          var conid = conversionData;",
									"          pm.expect(jsonValue.id).to.eql(conid);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : typeIds   *********",
									"  pm.test(\"Assert Type of typeId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.typeId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of typeId\"+j, function () {",
									"",
									"        if (typeof jsonValue.typeId === typeof data['person_doc_typeId'+j]) {",
									"          pm.expect(data['person_doc_typeId'+j]).to.eql(jsonValue.typeId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.typeId, data['person_doc_typeId'+j], function () { });",
									"",
									"          var contypeId = conversionData;",
									"          pm.expect(jsonValue.typeId).to.eql(contypeId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"var k=0;",
									"//*******Assertion of Key : hrefs   *********",
									"  pm.test(\"Assert Type of href\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.links[k].href).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of href\"+j, function () {",
									"",
									"        if (typeof jsonValue.links[k].href === typeof data['person_doc_links_href'+j]) {",
									"          pm.expect(data['person_doc_links_href'+j]).to.eql(jsonValue.links[k].href);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.links[k].href, data['person_doc_links_href'+j], function () { });",
									"",
									"          var conhref = conversionData;",
									"          pm.expect(jsonValue.links[k].href).to.eql(conhref);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/people/10480/documents",
							"host": [
								"{{url}}"
							],
							"path": [
								"people",
								"10480",
								"documents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Retrieve a Person's CVs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();",
									"var conversionData;",
									"var jsonValue=jsonData;",
									"",
									"",
									"function valCallBack(type,value,callback)",
									"{",
									"    if(typeof(type)==='string')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        conversionData=value.toString();",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    else if(typeof(type)==='boolean'){",
									"        switch(typeof value){",
									"            case \"string\":",
									"               switch(value.toLowerCase()) ",
									"                         {",
									"            case \"false\": ",
									"                conversionData= false;",
									"                callback(conversionData);",
									"                break;   ",
									"            case \"true\": ",
									"                conversionData= true;",
									"                callback(conversionData);",
									"                break; ",
									"            default: conversionData=true;",
									"                callback(conversionData);",
									"              ",
									"          }",
									"",
									"                callback(conversionData);",
									"                break;  ",
									"        }",
									"    }",
									"    else if(typeof(type)==='number')",
									"    {",
									"        ",
									"    switch (typeof(value)) ",
									"        {",
									"      case \"string\":",
									"        conversionData=parseInt(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }else if(typeof(type)==='undefined')",
									"    {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    }else if(typeof(type)==='object')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        var num1=value.toString();",
									"        conversionData=JSON.parse(num1);",
									"        callback(conversionData);",
									"        break;",
									"      case \"string\":",
									"        conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    ",
									"    else if(typeof(type)==='function')",
									"    {",
									"        ",
									"        callback(conversionData);",
									"    }",
									"    return  conversionData;",
									"}",
									"",
									"",
									"for(var j =0 ; j<jsonData.length  ; j++){",
									"    console.log(\"length of object \" + jsonData.length);",
									" jsonValue=jsonData[j];",
									"  console.log(\"My Val \"+jsonValue.createdAt);",
									"  console.log(\"My data val\"+data['person_doc_createdAt'+j])",
									"",
									"  var k=0;",
									"  pm.test(\"Check if CV object contains all provided keys\",function()",
									"    {",
									"      pm.expect(jsonValue).to.have.all.keys('id','title','url','createdAt','links');",
									"  }); ",
									"",
									"    //*******Assertion of Key : ids   *********",
									"  pm.test(\"Assert Type of id\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of id\"+j, function () {",
									"",
									"        if (typeof jsonValue.id === typeof data['cvId'+j]) {",
									"          pm.expect(data['cvId'+j]).to.eql(jsonValue.id);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.id, data['cvId'+j], function () { });",
									"",
									"          var conid = conversionData;",
									"          pm.expect(jsonValue.id).to.eql(conid);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"  //*******Assertion of Key : titles   *********",
									"  pm.test(\"Assert Type of title\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.title).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of title\"+j, function () {",
									"",
									"        if (typeof jsonValue.title === typeof data['person_cv_title'+j]) {",
									"          pm.expect(data['person_cv_title'+j]).to.eql(jsonValue.title);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.title, data['person_cv_title'+j], function () { });",
									"",
									"          var contitle = conversionData;",
									"          pm.expect(jsonValue.title).to.eql(contitle);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : urls   *********",
									"  pm.test(\"Assert Type of url\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.url).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of url\"+j, function () {",
									"",
									"        if (typeof jsonValue.url === typeof data['person_cv_url'+j]) {",
									"          pm.expect(data['person_cv_url'+j]).to.eql(jsonValue.url);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.url, data['person_cv_url'+j], function () { });",
									"",
									"          var conurl = conversionData;",
									"          pm.expect(jsonValue.url).to.eql(conurl);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : createdAts   *********",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of createdAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.createdAt === typeof data['person_cv_createdAt'+j]) {",
									"          pm.expect(data['person_cv_createdAt'+j]).to.eql(jsonValue.createdAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.createdAt, data['person_cv_createdAt'+j], function () { });",
									"",
									"          var concreatedAt = conversionData;",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"",
									"//*******Assertion of Key : hrefs   *********",
									"  pm.test(\"Assert Type of href\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.links[k].href).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of href\"+j, function () {",
									"",
									"        if (typeof jsonValue.links[j].href === typeof data['person_cv_links_href'+j]) {",
									"          pm.expect(data['person_cv_links_href'+j]).to.eql(jsonValue.links[k].href);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.links[k].href, data['person_cv_links_href'+j], function () { });",
									"",
									"          var conhref = conversionData;",
									"          pm.expect(jsonValue.links[k].href).to.eql(conhref);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Auth}}"
							},
							{
								"key": "userId",
								"type": "text",
								"value": "{{userid}}"
							}
						],
						"url": {
							"raw": "{{url}}/people/10480/cvs",
							"host": [
								"{{url}}"
							],
							"path": [
								"people",
								"10480",
								"cvs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Retrieve a Person's File Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var conversionData;",
									"",
									"",
									"function valCallBack(type, value, callback) {",
									"    if (typeof(type) === 'string') {",
									"        switch (typeof(value)) {",
									"            case \"number\":",
									"                conversionData = value.toString();",
									"                callback(conversionData);",
									"                break;",
									"            case \"object\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"boolean\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"function\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"        }",
									"    } else if (typeof(type) === 'boolean') {",
									"        switch (typeof value) {",
									"            case \"string\":",
									"                switch (value.toLowerCase()) {",
									"                    case \"false\":",
									"                        conversionData = false;",
									"                        callback(conversionData);",
									"                        break;",
									"                    case \"true\":",
									"                        conversionData = true;",
									"                        callback(conversionData);",
									"                        break;",
									"                    default:",
									"                        conversionData = true;",
									"                        callback(conversionData);",
									"",
									"                }",
									"",
									"                callback(conversionData);",
									"                break;",
									"        }",
									"    } else if (typeof(type) === 'number') {",
									"",
									"        switch (typeof(value)) {",
									"            case \"string\":",
									"                conversionData = parseInt(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"object\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"boolean\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"function\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"        }",
									"    } else if (typeof(type) === 'undefined') {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    } else if (typeof(type) === 'object') {",
									"        switch (typeof(value)) {",
									"            case \"number\":",
									"                var num1 = value.toString();",
									"                conversionData = JSON.parse(num1);",
									"                callback(conversionData);",
									"                break;",
									"            case \"string\":",
									"                conversionData = JSON.parse(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"boolean\":",
									"                conversionData = JSON.parse(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"function\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"        }",
									"    } else if (typeof(type) === 'function') {",
									"",
									"        callback(conversionData);",
									"    }",
									"    return conversionData;",
									"}",
									"//Assert no.of objects",
									"",
									"var countOfObjects = jsonData.length;",
									"console.log(\"countOfObjects : \" + countOfObjects);",
									"",
									"",
									"//Response code is 200 or 201 as per the request type",
									"var jsonRequestData = pm.request.method;",
									"",
									"",
									"if (responseCodeAssertion) {",
									"",
									"    for(var j =0 ; j<jsonData.length  ; j++){",
									"    console.log(\"length of object \" + jsonData.length);",
									" jsonValue=jsonData[j];",
									"  console.log(\"My Val \"+jsonValue.createdAt);",
									"  console.log(\"My data val\"+data['person_doc_createdAt'+j])",
									" ",
									"        ",
									"",
									"",
									"        //*******Assertion of Key : createdAt_documents People_fileNote_persons******",
									"",
									"        pm.test(\"Assert Type of createdAt_fileNote_person People_fileNote_persons\"+j, function() {",
									"            var valcreatedAt_documents_response = jsonData[j].createdAt;",
									"            var valcreatedAt_documents_dataSheet = pm.variables.get(\"createdAt_fileNote_person\"+j);",
									"            var typeOfcreatedAt_documents_dataSheet = pm.variables.get(\"typeOfcreatedAt_fileNote_person\");",
									"            var typeOfcreatedAt_documents_response = typeof valcreatedAt_documents_response;",
									"",
									"            var testResult = pm.expect(typeOfcreatedAt_documents_dataSheet).to.be.eql(typeof valcreatedAt_documents_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of createdAt_fileNote_person People_fileNote_persons\"+j, function() {",
									"",
									"                    if (typeof(valcreatedAt_documents_dataSheet) == typeof(valcreatedAt_documents_response)) {",
									"",
									"                        pm.expect(valcreatedAt_documents_response).to.eql(valcreatedAt_documents_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valcreatedAt_documents_response, valcreatedAt_documents_dataSheet, function() {});",
									"",
									"                        var ConValuecreatedAt_documents = conversionData;",
									"                        pm.expect(valcreatedAt_documents_response).to.eql(ConValuecreatedAt_documents);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"//*******Assertion of Key : id_fileNote_person fileNote_persons******",
									"",
									"        pm.test(\"Assert Type of createdAt_fileNote_person People_fileNote_persons\"+j, function() {",
									"            var valcreatedAt_documents_response = jsonData[j].createdAt;",
									"            var valcreatedAt_documents_dataSheet = pm.variables.get(\"id_fileNote_person\"+j);",
									"            var typeOfcreatedAt_documents_dataSheet = pm.variables.get(\"typeOfString\");",
									"            var typeOfcreatedAt_documents_response = typeof valcreatedAt_documents_response;",
									"",
									"            var testResult = pm.expect(typeOfcreatedAt_documents_dataSheet).to.be.eql(typeof valcreatedAt_documents_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of id_fileNote_person \"+j, function() {",
									"",
									"                    if (typeof(valcreatedAt_documents_dataSheet) == typeof(valcreatedAt_documents_response)) {",
									"",
									"                        pm.expect(valcreatedAt_documents_response).to.eql(valcreatedAt_documents_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valcreatedAt_documents_response, valcreatedAt_documents_dataSheet, function() {});",
									"",
									"                        var ConValuecreatedAt_documents = conversionData;",
									"                        pm.expect(valcreatedAt_documents_response).to.eql(ConValuecreatedAt_documents);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        //*******Assertion of Key : lastModifiedAt_documents People_fileNote_persons******",
									"        pm.test(\"Assert Type of lastModifiedAt_fileNote_person People_fileNote_persons\"+j, function() {",
									"            var vallastModifiedAt_documents_response = jsonData[j].lastModifiedAt;",
									"            var vallastModifiedAt_documents_dataSheet = pm.variables.get(\"lastModifiedAt_fileNote_person\"+j);",
									"            var typeOflastModifiedAt_documents_dataSheet = pm.variables.get(\"typeOfString\");",
									"            var typeOflastModifiedAt_documents_response = typeof vallastModifiedAt_documents_response;",
									"",
									"            var testResult = pm.expect(typeOflastModifiedAt_documents_dataSheet).to.be.eql(typeof vallastModifiedAt_documents_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of lastModifiedAt_fileNote_person\"+j, function() {",
									"",
									"                    if (typeof(vallastModifiedAt_documents_dataSheet) == typeof(vallastModifiedAt_documents_response)) {",
									"",
									"                        pm.expect(vallastModifiedAt_documents_response).to.eql(vallastModifiedAt_documents_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(vallastModifiedAt_documents_response, vallastModifiedAt_documents_dataSheet, function() {});",
									"",
									"                        var ConValuelastModifiedAt_documents = conversionData;",
									"                        pm.expect(vallastModifiedAt_documents_response).to.eql(ConValuelastModifiedAt_documents);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"//*******Assertion of Key : body People_fileNote_persons******",
									"        pm.test(\"Assert Type of body_fileNote_person People_fileNote_persons\"+j, function() {",
									"            var valBody_response = jsonData[j].body;",
									"            var valBody_dataSheet = pm.variables.get(\"body_fileNote_person\"+j);",
									"            var typeOfBody_dataSheet = pm.variables.get(\"typeOfBody_fileNote_person\");",
									"            var typeOfBody_response = typeof valBody_response;",
									"",
									"            var testResult = pm.expect(typeOfBody_dataSheet).to.be.eql(typeof valBody_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of body_fileNote_person People_fileNote_persons\"+j, function() {",
									"",
									"                    if (typeof(valBody_dataSheet) == typeof(valBody_response)) {",
									"",
									"                        pm.expect(valBody_response).to.eql(valBody_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valBody_response, valBody_dataSheet, function() {});",
									"",
									"                        var ConValueBody = conversionData;",
									"                        pm.expect(valBody_response).to.eql(ConValueBody);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"//*******Assertion of Key : authorInitials People_fileNote_persons******",
									"        pm.test(\"Assert Type of authorInitials_fileNote_person People_fileNote_persons\"+j, function() {",
									"            var valAuthorInitials_response = jsonData[j].authorInitials;",
									"            var valAuthorInitials_dataSheet = pm.variables.get(\"authorInitials_fileNote_person\"+j);",
									"            var typeOfAuthorInitials_dataSheet = pm.variables.get(\"typeOfAuthorInitials_fileNote_person\");",
									"            var typeOfAuthorInitials_response = typeof valAuthorInitials_response;",
									"",
									"            var testResult = pm.expect(typeOfAuthorInitials_dataSheet).to.be.eql(typeof valAuthorInitials_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of authorInitials_fileNote_person People_fileNote_persons\"+j, function() {",
									"",
									"                    if (typeof(valAuthorInitials_dataSheet) == typeof(valAuthorInitials_response)) {",
									"",
									"                        pm.expect(valAuthorInitials_response).to.eql(valAuthorInitials_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valAuthorInitials_response, valAuthorInitials_dataSheet, function() {});",
									"",
									"                        var ConValueAuthorInitials = conversionData;",
									"                        pm.expect(valAuthorInitials_response).to.eql(ConValueAuthorInitials);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"",
									"",
									"//*******Assertion of Key : id_fileNote_person People_fileNote_persons******",
									"        pm.test(\"Assert Type of id_fileNote_person People_fileNote_persons\"+j, function() {",
									"            var valId_documents_response = jsonData[j].id;",
									"            var valId_documents_dataSheet = pm.variables.get(\"id_fileNote_person\"+j);",
									"            var typeOfId_documents_dataSheet = pm.variables.get(\"typeOfId_fileNote_person\");",
									"            var typeOfId_documents_response = typeof valId_documents_response;",
									"",
									"            var testResult = pm.expect(typeOfId_documents_dataSheet).to.be.eql(typeof valId_documents_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of id_fileNote_person People_fileNote_persons\"+j, function() {",
									"",
									"                    if (typeof(valId_documents_dataSheet) == typeof(valId_documents_response)) {",
									"",
									"                        pm.expect(valId_documents_response).to.eql(valId_documents_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valId_documents_response, valId_documents_dataSheet, function() {});",
									"",
									"                        var ConValueId_documents = conversionData;",
									"                        pm.expect(valId_documents_response).to.eql(ConValueId_documents);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									" ",
									"        ",
									"//*******Assertion of Key : typeId People_fileNote_persons******",
									"        pm.test(\"Assert Type of typeId_fileNote_person People_fileNote_persons\"+j, function() {",
									"            var valTypeId_response = jsonData[j].typeId;",
									"            var valTypeId_dataSheet = pm.variables.get(\"typeId_fileNote_person\"+j);",
									"            var typeOfTypeId_dataSheet = pm.variables.get(\"typeOfTypeId_fileNote_person\");",
									"            var typeOfTypeId_response = typeof valTypeId_response;",
									"",
									"            var testResult = pm.expect(typeOfTypeId_dataSheet).to.be.eql(typeof valTypeId_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of typeId_fileNote_person People_fileNote_persons\"+j, function() {",
									"",
									"                    if (typeof(valTypeId_dataSheet) == typeof(valTypeId_response)) {",
									"",
									"                        pm.expect(valTypeId_response).to.eql(valTypeId_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valTypeId_response, valTypeId_dataSheet, function() {});",
									"",
									"                        var ConValueTypeId = conversionData;",
									"                        pm.expect(valTypeId_response).to.eql(ConValueTypeId);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"",
									" //*******Assertion of type of : ccUserIds People_fileNote_persons******",
									"",
									"var valCcUserIds_response=jsonData[j].ccUserIds;",
									"var lengthOfResponse = valCcUserIds_response.length;",
									"",
									"var typeOfCcUserIds_dataSheet= pm.variables.get(\"typeOfCcUserIds\");",
									"var typeOfCcUserIds_response=typeof valCcUserIds_response;",
									"var valCcUserIds_datasheet = pm.variables.get(\"CcUserIds\"+j);",
									"",
									"var testResultTypeOf;",
									"pm.test(\"Assert Type of CcUserIds People_fileNote_persons\"+j, function(){",
									"var testResultTypeOf = pm.expect(typeOfCcUserIds_dataSheet).to.be.eql(typeof valCcUserIds_response);",
									"",
									"",
									"",
									"//*******Assertion of Key : ccUserIds People_fileNote_persons******",
									"     ",
									"if(testResultTypeOf){",
									"    ",
									"    console.log(\"length.......\"+lengthOfResponse);",
									"    if(lengthOfResponse!=0){",
									"    ",
									"   for(var i=0;i<lengthOfResponse;i++){",
									"       ",
									"    pm.test(\"Assert value CcUserIds People_fileNote_persons\"+j, function(){",
									"        pm.expect(jsonData[j].ccUserIds).to.be.eql(valCcUserIds_datasheet);",
									"    });",
									"       ",
									"   } ",
									"        ",
									"    }",
									"",
									"    else {",
									"        ",
									"        pm.test(\"Assert value of ccUserIds when empty People_fileNote_persons\"+j, function()",
									"        {",
									"         var valCcUserIds_response=jsonData[j].ccUserIds;",
									"    var valCcUserIds_dataSheet=pm.variables.get(\"ccUserIds\"+j);",
									"    var typeOfCcUserIds_dataSheet= pm.variables.get(\"typeOfCcUserIds\");",
									"    console.log(\"valCcUserIds_dataSheet \"+valCcUserIds_dataSheet);",
									"    console.log(\"valCcUserIds_response \"+valCcUserIds_response);",
									"    var typeOfCcUserIds_response=typeof valCcUserIds_response;",
									"    ",
									"    var testResult =  pm.expect(typeOfCcUserIds_dataSheet).to.be.eql(typeof valCcUserIds_response);",
									"    ",
									"    ",
									"          if(typeof(valCcUserIds_dataSheet) == typeof(valCcUserIds_response)){",
									"    ",
									"            pm.expect(valCcUserIds_response).to.eql(valCcUserIds_dataSheet",
									"            ",
									"            ); ",
									"              ",
									"          }",
									"    ",
									"          else",
									"          {",
									"            valCallBack(valCcUserIds_response,valCcUserIds_dataSheet, function(){});",
									"           ",
									"           var ConValueCcUserIds=conversionData;",
									"           pm.expect(valCcUserIds_response).to.eql(ConValueCcUserIds);      ",
									"            }",
									"        });",
									"    ",
									"    }",
									"    }",
									"",
									"else{ postman.setNextRequest();",
									"    ",
									"}",
									"",
									"});",
									"       ",
									"//Asertions links : People",
									"var valLinks_response=jsonData[j].links;",
									"var lengthOfResponse = valLinks_response.length;",
									"",
									"var typeOfLinks_dataSheet= pm.variables.get(\"typeOfLinks\");",
									"var typeOfLinks_response=typeof valLinks_response;",
									"var typeOfLinks_href_dataSheet= pm.variables.get(\"typeOfLinks_href\");",
									"",
									"var testResultTypeOf;",
									" var countOfLinksObject = jsonData[j].links.length;",
									"  ",
									" pm.test(\"Asset type of links\"+j,function(){",
									" ",
									"     testResultTypeOf = pm.expect(typeOfLinks_dataSheet).to.be.eql(typeof valLinks_response);",
									" });",
									"",
									"",
									"",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Auth}}"
							},
							{
								"key": "userId",
								"type": "text",
								"value": "{{userid}}"
							}
						],
						"url": {
							"raw": "{{url}}/people/10480/file-notes",
							"host": [
								"{{url}}"
							],
							"path": [
								"people",
								"10480",
								"file-notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Retrieve a Person's assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var conversionData;",
									"",
									"",
									"function valCallBack(type, value, callback) {",
									"    if (typeof(type) === 'string') {",
									"        switch (typeof(value)) {",
									"            case \"number\":",
									"                conversionData = value.toString();",
									"                callback(conversionData);",
									"                break;",
									"            case \"object\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"boolean\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"function\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"        }",
									"    } else if (typeof(type) === 'boolean') {",
									"        switch (typeof value) {",
									"            case \"string\":",
									"                switch (value.toLowerCase()) {",
									"                    case \"false\":",
									"                        conversionData = false;",
									"                        callback(conversionData);",
									"                        break;",
									"                    case \"true\":",
									"                        conversionData = true;",
									"                        callback(conversionData);",
									"                        break;",
									"                    default:",
									"                        conversionData = true;",
									"                        callback(conversionData);",
									"",
									"                }",
									"",
									"                callback(conversionData);",
									"                break;",
									"        }",
									"    } else if (typeof(type) === 'number') {",
									"",
									"        switch (typeof(value)) {",
									"            case \"string\":",
									"                conversionData = parseInt(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"object\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"boolean\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"function\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"        }",
									"    } else if (typeof(type) === 'undefined') {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    } else if (typeof(type) === 'object') {",
									"        switch (typeof(value)) {",
									"            case \"number\":",
									"                var num1 = value.toString();",
									"                conversionData = JSON.parse(num1);",
									"                callback(conversionData);",
									"                break;",
									"            case \"string\":",
									"                conversionData = JSON.parse(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"boolean\":",
									"                conversionData = JSON.parse(value);",
									"                callback(conversionData);",
									"                break;",
									"            case \"function\":",
									"                conversionData = JSON.stringify(value);",
									"                callback(conversionData);",
									"                break;",
									"        }",
									"    } else if (typeof(type) === 'function') {",
									"",
									"        callback(conversionData);",
									"    }",
									"    return conversionData;",
									"}",
									"//Assert no.of objects",
									"",
									"var countOfObjects = jsonData.length;",
									"console.log(\"countOfObjects : \" + countOfObjects);",
									"",
									"",
									"//Response code is 200 or 201 as per the request type",
									"var jsonRequestData = pm.request.method;",
									"//Response code is 200 or 201 as per the request type",
									"if (jsonRequestData === \"GET\") {",
									"    var responseCodeAssertion = pm.test(\"API call successfull.:Access token created\", function() {",
									"",
									"        var code = parseInt(pm.environment.get(\"responsestat_200\"));",
									"        pm.response.to.have.status(code);",
									"",
									"        pm.test(\"Body is not Blank\", function() {",
									"            jsonBodyData = pm.response.to.have.body();",
									"            pm.expect(jsonBodyData).to.not.be.empty;",
									"        });",
									"",
									"        //Assert the current environment",
									"        pm.test(\"Check if environment is production\", function() {",
									"            pm.expect(pm.environment.get(\"env\")).to.equal(\"OM\");",
									"            console.log(pm.environment.get(\"env\"));",
									"        });",
									"    ",
									"     ",
									"",
									"    });",
									"",
									"} else if (jsonRequestData === \"POST\") {",
									"    pm.test(\"API call successful12345.:Access token created\", function() {",
									"        var code = parseInt(pm.environment.get(\"responsestat_201\"));",
									"        pm.response.to.have.status(code);",
									"",
									"        pm.test(\"Body is not Blank\", function() {",
									"            jsonBodyData = pm.response.to.have.body();",
									"            pm.expect(jsonBodyData).to.not.be.empty;",
									"        });",
									"",
									"        //Assert the current environment",
									"        pm.test(\"Check if environment is production\", function() {",
									"            pm.expect(pm.environment.get(\"env\")).to.equal(\"OM\");",
									"",
									"            console.log(pm.environment.get(\"env\"));",
									"             var valBoardexStatus_response = jsonData.boardexStatus;",
									"            console.log(\"valBoardexStatus_response  : \"+valBoardexStatus_response);",
									"        });",
									"",
									"    });",
									"",
									"}",
									"",
									"if (responseCodeAssertion) {",
									"",
									"    for (var j = 0; j < 2/*countOfObjects*/; j++) {",
									"",
									" ",
									"  //*******Assertion of Key : openAt People_Assignment******",
									"        pm.test(\"Assert Type of openAt People_Assignment\"+j, function() {",
									"            var valOpenAt_response = jsonData[j].openAt;",
									"            var valOpenAt_dataSheet = pm.variables.get(\"openAt\"+j);",
									"            var typeOfOpenAt_dataSheet = pm.variables.get(\"typeOfOpenAt\");",
									"            var typeOfOpenAt_response = typeof valOpenAt_response;",
									"",
									"            var testResult = pm.expect(typeOfOpenAt_dataSheet).to.be.eql(typeof valOpenAt_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of openAt People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valOpenAt_dataSheet) == typeof(valOpenAt_response)) {",
									"",
									"                        pm.expect(valOpenAt_response).to.eql(valOpenAt_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valOpenAt_response, valOpenAt_dataSheet, function() {});",
									"",
									"                        var ConValueOpenAt = conversionData;",
									"                        pm.expect(valOpenAt_response).to.eql(ConValueOpenAt);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"       ",
									"",
									"//*******Assertion of Key : companyName People_Assignment******",
									"",
									"        pm.test(\"Assert Type of companyName People_Assignment\"+j, function() {",
									"            var valCompanyName_response = jsonData[j].companyName;",
									"            var valCompanyName_dataSheet = pm.variables.get(\"companyName\"+j);",
									"            var typeOfCompanyName_dataSheet = pm.variables.get(\"typeOfCompanyName\");",
									"            var typeOfCompanyName_response = typeof valCompanyName_response;",
									"",
									"            var testResult = pm.expect(typeOfCompanyName_dataSheet).to.be.eql(typeof valCompanyName_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of companyName People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valCompanyName_dataSheet) == typeof(valCompanyName_response)) {",
									"",
									"                        pm.expect(valCompanyName_response).to.eql(valCompanyName_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valCompanyName_response, valCompanyName_dataSheet, function() {});",
									"",
									"                        var ConValueCompanyName = conversionData;",
									"                        pm.expect(valCompanyName_response).to.eql(ConValueCompanyName);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"       ",
									"//*******Assertion of Key : country People_Assignment******",
									"        pm.test(\"Assert Type of country People_Assignment\"+j, function() {",
									"            var valCountry_response = jsonData[j].country;",
									"            var valCountry_dataSheet = pm.variables.get(\"country\"+j);",
									"            var typeOfCountry_dataSheet = pm.variables.get(\"typeOfCountry\");",
									"            var typeOfCountry_response = typeof valCountry_response;",
									"",
									"            var testResult = pm.expect(typeOfCountry_dataSheet).to.be.eql(typeof valCountry_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of country People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valCountry_dataSheet) == typeof(valCountry_response)) {",
									"",
									"                        pm.expect(valCountry_response).to.eql(valCountry_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valCountry_response, valCountry_dataSheet, function() {});",
									"",
									"                        var ConValueCountry = conversionData;",
									"                        pm.expect(valCountry_response).to.eql(ConValueCountry);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									" //*******Assertion of Key : positionTitle People_Assignment******",
									"        pm.test(\"Assert Type of positionTitle People_Assignment\"+j, function() {",
									"            var valPositionTitle_response = jsonData[j].positionTitle;",
									"            var valPositionTitle_dataSheet = pm.variables.get(\"positionTitle\"+j);",
									"            var typeOfPositionTitle_dataSheet = pm.variables.get(\"typeOfPositionTitle\");",
									"            var typeOfPositionTitle_response = typeof valPositionTitle_response;",
									"",
									"            var testResult = pm.expect(typeOfPositionTitle_dataSheet).to.be.eql(typeof valPositionTitle_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of positionTitle People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valPositionTitle_dataSheet) == typeof(valPositionTitle_response)) {",
									"",
									"                        pm.expect(valPositionTitle_response).to.eql(valPositionTitle_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valPositionTitle_response, valPositionTitle_dataSheet, function() {});",
									"",
									"                        var ConValuePositionTitle = conversionData;",
									"                        pm.expect(valPositionTitle_response).to.eql(ConValuePositionTitle);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"       ",
									"      ",
									"//*******Assertion of Key : id_assignment People_Assignment******",
									"        pm.test(\"Assert Type of id_assignment People_Assignment\"+j, function() {",
									"            var valId_assignment_response = jsonData[j].id;",
									"            var valId_assignment_dataSheet = pm.variables.get(\"id_assignment\"+j);",
									"            var typeOfId_assignment_dataSheet = pm.variables.get(\"typeOfId_assignment\");",
									"            var typeOfId_assignment_response = typeof valId_assignment_response;",
									"",
									"            var testResult = pm.expect(typeOfId_assignment_dataSheet).to.be.eql(typeof valId_assignment_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of id_assignment People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valId_assignment_dataSheet) == typeof(valId_assignment_response)) {",
									"",
									"                        pm.expect(valId_assignment_response).to.eql(valId_assignment_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valId_assignment_response, valId_assignment_dataSheet, function() {});",
									"",
									"                        var ConValueId_assignment = conversionData;",
									"                        pm.expect(valId_assignment_response).to.eql(ConValueId_assignment);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"       ",
									"//*******Assertion of Key : typeId_assignment People_Assignment******",
									"        pm.test(\"Assert Type of typeId_assignment People_Assignment\"+j, function() {",
									"            var valTypeId_assignment_response = jsonData[j].typeId;",
									"            var valTypeId_assignment_dataSheet = pm.variables.get(\"typeId_assignment\"+j);",
									"            var typeOfTypeId_assignment_dataSheet = pm.variables.get(\"typeOfTypeId_assignment\");",
									"            var typeOfTypeId_assignment_response = typeof valTypeId_assignment_response;",
									"",
									"            var testResult = pm.expect(typeOfTypeId_assignment_dataSheet).to.be.eql(typeof valTypeId_assignment_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of typeId_assignment People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valTypeId_assignment_dataSheet) == typeof(valTypeId_assignment_response)) {",
									"",
									"                        pm.expect(valTypeId_assignment_response).to.eql(valTypeId_assignment_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valTypeId_assignment_response, valTypeId_assignment_dataSheet, function() {});",
									"",
									"                        var ConValueTypeId_assignment = conversionData;",
									"                        pm.expect(valTypeId_assignment_response).to.eql(ConValueTypeId_assignment);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									" //*******Assertion of Key : closedAt People_Assignment******",
									"        pm.test(\"Assert Type of closedAt People_Assignment\"+j, function() {",
									"            var valClosedAt_response = jsonData[j].closedAt;",
									"            var valClosedAt_dataSheet = pm.variables.get(\"closedAt\"+j);",
									"            var typeOfClosedAt_dataSheet = pm.variables.get(\"typeOfClosedAt\");",
									"            var typeOfClosedAt_response = typeof valClosedAt_response;",
									"",
									"            var testResult = pm.expect(typeOfClosedAt_dataSheet).to.be.eql(typeof valClosedAt_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of closedAt People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valClosedAt_dataSheet) == typeof(valClosedAt_response)) {",
									"",
									"                        pm.expect(valClosedAt_response).to.eql(valClosedAt_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valClosedAt_response, valClosedAt_dataSheet, function() {});",
									"",
									"                        var ConValueClosedAt = conversionData;",
									"                        pm.expect(valClosedAt_response).to.eql(ConValueClosedAt);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"   //*******Assertion of Key : isClosed People_Assignment******",
									"        pm.test(\"Assert Type of isClosed People_Assignment\"+j, function() {",
									"            var valIsClosed_response = jsonData[j].isClosed;",
									"            var valIsClosed_dataSheet = pm.variables.get(\"isClosed\"+j);",
									"            var typeOfIsClosed_dataSheet = pm.variables.get(\"typeOfIsClosed\");",
									"            var typeOfIsClosed_response = typeof valIsClosed_response;",
									"",
									"            var testResult = pm.expect(typeOfIsClosed_dataSheet).to.be.eql(typeof valIsClosed_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of isClosed People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valIsClosed_dataSheet) == typeof(valIsClosed_response)) {",
									"",
									"                        pm.expect(valIsClosed_response).to.eql(valIsClosed_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valIsClosed_response, valIsClosed_dataSheet, function() {});",
									"",
									"                        var ConValueIsClosed = conversionData;",
									"                        pm.expect(valIsClosed_response).to.eql(ConValueIsClosed);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"   //*******Assertion of Key : statusIsActive People_Assignment******",
									"        pm.test(\"Assert Type of statusIsActive People_Assignment\"+j, function() {",
									"            var valStatusIsActive_response = jsonData[j].statusIsActive;",
									"            var valStatusIsActive_dataSheet = pm.variables.get(\"statusIsActive\"+j);",
									"            var typeOfStatusIsActive_dataSheet = pm.variables.get(\"typeOfStatusIsActive\");",
									"            var typeOfStatusIsActive_response = typeof valStatusIsActive_response;",
									"",
									"            var testResult = pm.expect(typeOfStatusIsActive_dataSheet).to.be.eql(typeof valStatusIsActive_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of statusIsActive People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valStatusIsActive_dataSheet) == typeof(valStatusIsActive_response)) {",
									"",
									"                        pm.expect(valStatusIsActive_response).to.eql(valStatusIsActive_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valStatusIsActive_response, valStatusIsActive_dataSheet, function() {});",
									"",
									"                        var ConValueStatusIsActive = conversionData;",
									"                        pm.expect(valStatusIsActive_response).to.eql(ConValueStatusIsActive);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									" //*******Assertion of Key : type People_Assignment******",
									"        pm.test(\"Assert Type of type People_Assignment\"+j, function() {",
									"            var valType_response = jsonData[j].type;",
									"            var valType_dataSheet = pm.variables.get(\"type\"+j);",
									"            var typeOfType_dataSheet = pm.variables.get(\"typeOfType\");",
									"            var typeOfType_response = typeof valType_response;",
									"",
									"            var testResult = pm.expect(typeOfType_dataSheet).to.be.eql(typeof valType_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of type People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valType_dataSheet) == typeof(valType_response)) {",
									"",
									"                        pm.expect(valType_response).to.eql(valType_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valType_response, valType_dataSheet, function() {});",
									"",
									"                        var ConValueType = conversionData;",
									"                        pm.expect(valType_response).to.eql(ConValueType);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"       ",
									"  //*******Assertion of Key : candidateStages People_Assignment******",
									"        pm.test(\"Assert Type of candidateStages People_Assignment\"+j, function() {",
									"            var valCandidateStages_response = jsonData[j].candidateStages;",
									"            var valCandidateStages_dataSheet = pm.variables.get(\"candidateStages\"+j);",
									"            var typeOfCandidateStages_dataSheet = pm.variables.get(\"typeOfCandidateStages\");",
									"            var typeOfCandidateStages_response = typeof valCandidateStages_response;",
									"",
									"            var testResult = pm.expect(typeOfCandidateStages_dataSheet).to.be.eql(typeof valCandidateStages_response);",
									"",
									"            if (testResult) {",
									"                pm.test(\"Assert value of candidateStages People_Assignment\"+j, function() {",
									"",
									"                    if (typeof(valCandidateStages_dataSheet) == typeof(valCandidateStages_response)) {",
									"",
									"                        pm.expect(valCandidateStages_response).to.eql(valCandidateStages_dataSheet);",
									"",
									"                    } else {",
									"                        valCallBack(valCandidateStages_response, valCandidateStages_dataSheet, function() {});",
									"",
									"                        var ConValueCandidateStages = conversionData;",
									"                        pm.expect(valCandidateStages_response).to.eql(ConValueCandidateStages);",
									"                    }",
									"                });",
									"            } else {",
									"                postman.setNextRequest();",
									"            }",
									"        });",
									"        ",
									"       ",
									"    ",
									"    ",
									"    ",
									"      ",
									"",
									"",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Auth}}"
							},
							{
								"key": "userId",
								"type": "text",
								"value": "{{userid}}"
							}
						],
						"url": {
							"raw": "{{url}}/people/10465/assignments",
							"host": [
								"{{url}}"
							],
							"path": [
								"people",
								"10465",
								"assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_List People",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var conversionData;",
									"",
									"function valCallBack(type,value,callback)",
									"{",
									"    if(typeof(type)==='string')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        conversionData=value.toString();",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    else if(typeof(type)==='boolean'){",
									"        switch(typeof value){",
									"            case \"string\":",
									"               switch(value.toLowerCase()) ",
									"                         {",
									"            case \"false\": ",
									"                conversionData= false;",
									"                callback(conversionData);",
									"                break;   ",
									"            case \"true\": ",
									"                conversionData= true;",
									"                callback(conversionData);",
									"                break; ",
									"            default: conversionData=true;",
									"                callback(conversionData);",
									"              ",
									"          }",
									"",
									"                callback(conversionData);",
									"                break;  ",
									"        }",
									"    }",
									"    else if(typeof(type)==='number')",
									"    {",
									"        ",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"string\":",
									"        conversionData=parseInt(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }else if(typeof(type)==='undefined')",
									"    {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    }else if(typeof(type)==='object')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        var num1=value.toString();",
									"        conversionData=JSON.parse(num1);",
									"        callback(conversionData);",
									"        break;",
									"      case \"string\":",
									"        conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    ",
									"    else if(typeof(type)==='function')",
									"    {",
									"        ",
									"        callback(conversionData);",
									"    }",
									"    return  conversionData;",
									"}",
									"",
									"",
									"",
									"//Response code is 200 or 201 as per the request type",
									"var jsonRequestData=pm.request.method;",
									"//Response code is 200 or 201 as per the request type",
									"if(jsonRequestData === \"GET\" ){",
									"var responseCodeAssertion=pm.test(\"API call successfull.:Access token created\", function () {",
									"    ",
									"    var code= parseInt(pm.environment.get(\"responsestat_200\"));",
									"    pm.response.to.have.status(code);",
									"    ",
									"    pm.test(\"Body is not Blank\", function () {",
									"    jsonBodyData=pm.response.to.have.body();",
									"    pm.expect(jsonBodyData).to.not.be.empty;",
									"});",
									"",
									"//Assert the current environment",
									"pm.test(\"Check if environment is production\", function () {",
									"      pm.expect(pm.environment.get(\"env\")).to.equal(\"OM\");",
									"      console.log(pm.environment.get(\"env\"));",
									"  });",
									"//Assert the key count with assertions ",
									"pm.test(\"Assert the key count with number of assertion\", function () {",
									"      var count_keys0 = Object.keys(jsonData[0]);",
									"       var count_keys1 = Object.keys(jsonData[1]);",
									"      console.log(\"count of keys object 0 : \"+count_keys0.length +\"count of keys object 1 : \"+count_keys1.length);",
									"      ",
									"      pm.expect(pm.environment.get(\"env\")).to.equal(\"OM\");",
									"      console.log(pm.environment.get(\"env\"));",
									"  });",
									"",
									"});",
									"    ",
									"}",
									"else if(jsonRequestData === \"POST\"){",
									"pm.test(\"API call successful12345.:Access token created\", function () {",
									"   var code= parseInt(pm.environment.get(\"responsestat_201\"));    ",
									"    pm.response.to.have.status(code);",
									"    ",
									"    pm.test(\"Body is not Blank\", function () {",
									"    jsonBodyData=pm.response.to.have.body();",
									"    pm.expect(jsonBodyData).to.not.be.empty;",
									"});",
									"",
									"//Assert the current environment",
									"pm.test(\"Check if environment is production\", function () {",
									"      pm.expect(pm.environment.get(\"env\")).to.equal(\"OM\");",
									"    ",
									"      console.log(pm.environment.get(\"env\"));",
									"  });",
									"",
									"});",
									"    ",
									"}",
									"",
									"if(responseCodeAssertion){",
									"   const paramsString = request.url.split('ids=')[1];",
									"   console.log(paramsString)",
									"   var params = paramsString.split(\",\")",
									"",
									"console.log(\"count of id as parameter : \"+params.length);",
									"for(var j =0 ; j< params.length ; j++){",
									"    console.log(\"Response for ids : \"+params[j]);",
									"  ",
									"    ",
									"",
									"    ",
									"//*******Assertion of Key : boardexStatus People_ids******",
									"pm.test(\"Assert Type of boardexStatus People_ids \"+j, function(){",
									"var valBoardexStatus_response=jsonData[j].boardexStatus;",
									"var valBoardexStatus_dataSheet=pm.variables.get(\"boardexStatus\"+j);",
									"var typeOfBoardexStatus_dataSheet= pm.variables.get(\"typeOfBoardexStatus\");",
									"var typeOfBoardexStatus_response=typeof valBoardexStatus_response;",
									"",
									"var testResult =  pm.expect(typeOfBoardexStatus_dataSheet).to.be.eql(typeof valBoardexStatus_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of boardexStatus People_ids\" +j, function()",
									"    {",
									"        ",
									"      if(typeof(valBoardexStatus_dataSheet) == typeof(valBoardexStatus_response)){",
									"",
									"        pm.expect(valBoardexStatus_response).to.eql(valBoardexStatus_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBoardexStatus_response,valBoardexStatus_dataSheet, function(){});",
									"       ",
									"       var ConValueBoardexStatus=conversionData;",
									"       pm.expect(valBoardexStatus_response).to.eql(ConValueBoardexStatus);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : boardexData People_ids******",
									"",
									"",
									"pm.test(\"Assert Type of boardexData People_ids\"+j, function(){",
									"var valBoardexData_response=jsonData[j].boardexData;",
									"var valBoardexData_dataSheet=pm.variables.get(\"boardexData\"+j);",
									"var typeOfBoardexData_dataSheet= pm.variables.get(\"typeOfBoardexData\");",
									"var typeOfBoardexData_response=typeof valBoardexData_response;",
									"",
									"var testResult =  pm.expect(typeOfBoardexData_dataSheet).to.be.eql(typeof valBoardexData_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of boardexData People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valBoardexData_dataSheet) == typeof(valBoardexData_response)){",
									"",
									"        pm.expect(valBoardexData_response).to.eql(valBoardexData_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBoardexData_response,valBoardexData_dataSheet, function(){});",
									"       ",
									"       var ConValueBoardexData=conversionData;",
									"       pm.expect(valBoardexData_response).to.eql(ConValueBoardexData);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : DCFStatus People_ids******",
									"",
									"pm.test(\"Assert Type of DCFStatus People_ids\"+j, function(){",
									"var valDCFStatus_response=jsonData[j].DCFStatus;",
									"var valDCFStatus_dataSheet=pm.variables.get(\"DCFStatus\"+j);",
									"var typeOfDCFStatus_dataSheet= pm.variables.get(\"typeOfDCFStatus\");",
									"var typeOfDCFStatus_response=typeof valDCFStatus_response;",
									"",
									"var testResult =  pm.expect(typeOfDCFStatus_dataSheet).to.be.eql(typeof valDCFStatus_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of DCFStatus People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valDCFStatus_dataSheet) == typeof(valDCFStatus_response)){",
									"",
									"        pm.expect(valDCFStatus_response).to.eql(valDCFStatus_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valDCFStatus_response,valDCFStatus_dataSheet, function(){});",
									"       ",
									"       var ConValueDCFStatus=conversionData;",
									"       pm.expect(valDCFStatus_response).to.eql(ConValueDCFStatus);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : createdAt People_ids******",
									"",
									"pm.test(\"Assert Type of createdAt People_ids\"+j, function(){",
									"var valCreatedAt_response=jsonData[j].createdAt;",
									"var valCreatedAt_dataSheet=pm.variables.get(\"createdAt\"+j);",
									"var typeOfCreatedAt_dataSheet= pm.variables.get(\"typeOfCreatedAt\");",
									"var typeOfCreatedAt_response=typeof valCreatedAt_response;",
									"",
									"var testResult =  pm.expect(typeOfCreatedAt_dataSheet).to.be.eql(typeof valCreatedAt_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of createdAt People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valCreatedAt_dataSheet) == typeof(valCreatedAt_response)){",
									"",
									"        pm.expect(valCreatedAt_response).to.eql(valCreatedAt_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valCreatedAt_response,valCreatedAt_dataSheet, function(){});",
									"       ",
									"       var ConValueCreatedAt=conversionData;",
									"       pm.expect(valCreatedAt_response).to.eql(ConValueCreatedAt);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : lastModifiedAt People_ids******",
									"pm.test(\"Assert Type of lastModifiedAt People_ids\"+j, function(){",
									"var valLastModifiedAt_response=jsonData[j].lastModifiedAt;",
									"var valLastModifiedAt_dataSheet=pm.variables.get(\"lastModifiedAt\"+j);",
									"var typeOfLastModifiedAt_dataSheet= pm.variables.get(\"typeOfLastModifiedAt\");",
									"var typeOfLastModifiedAt_response=typeof valLastModifiedAt_response;",
									"",
									"var testResult =  pm.expect(typeOfLastModifiedAt_dataSheet).to.be.eql(typeof valLastModifiedAt_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of lastModifiedAt People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLastModifiedAt_dataSheet) == typeof(valLastModifiedAt_response)){",
									"",
									"        pm.expect(valLastModifiedAt_response).to.eql(valLastModifiedAt_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLastModifiedAt_response,valLastModifiedAt_dataSheet, function(){});",
									"       ",
									"       var ConValueLastModifiedAt=conversionData;",
									"       pm.expect(valLastModifiedAt_response).to.eql(ConValueLastModifiedAt);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : id People_ids******",
									"pm.test(\"Assert Type of id People_ids\"+j, function(){",
									"var valId_response=jsonData[j].id;",
									"var valId_dataSheet=pm.variables.get(\"id\"+j);",
									"var typeOfId_dataSheet= pm.variables.get(\"typeOfId\");",
									"var typeOfId_response=typeof valId_response;",
									"",
									"var testResult =  pm.expect(typeOfId_dataSheet).to.be.eql(typeof valId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of id People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valId_dataSheet) == typeof(valId_response)){",
									"",
									"        pm.expect(valId_response).to.eql(valId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valId_response,valId_dataSheet, function(){});",
									"       ",
									"       var ConValueId=conversionData;",
									"       pm.expect(valId_response).to.eql(ConValueId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : firstName People_ids******",
									"",
									"",
									"pm.test(\"Assert Type of firstName People_ids\"+j, function(){",
									"var valFirstName_response=jsonData[j].firstName;",
									"var valFirstName_dataSheet=pm.variables.get(\"firstName\"+j);",
									"var typeOfFirstName_dataSheet= pm.variables.get(\"typeOfFirstName\");",
									"var typeOfFirstName_response=typeof valFirstName_response;",
									"",
									"var testResult =  pm.expect(typeOfFirstName_dataSheet).to.be.eql(typeof valFirstName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of firstName People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valFirstName_dataSheet) == typeof(valFirstName_response)){",
									"",
									"        pm.expect(valFirstName_response).to.eql(valFirstName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valFirstName_response,valFirstName_dataSheet, function(){});",
									"       ",
									"       var ConValueFirstName=conversionData;",
									"       pm.expect(valFirstName_response).to.eql(ConValueFirstName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : lastName People_ids******",
									"",
									"pm.test(\"Assert Type of lastName People_ids\"+j, function(){",
									"var valLastName_response=jsonData[j].lastName;",
									"var valLastName_dataSheet=pm.variables.get(\"lastName\"+j);",
									"var typeOfLastName_dataSheet= pm.variables.get(\"typeOfLastName\");",
									"var typeOfLastName_response=typeof valLastName_response;",
									"",
									"var testResult =  pm.expect(typeOfLastName_dataSheet).to.be.eql(typeof valLastName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of lastName People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLastName_dataSheet) == typeof(valLastName_response)){",
									"",
									"        pm.expect(valLastName_response).to.eql(valLastName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLastName_response,valLastName_dataSheet, function(){});",
									"       ",
									"       var ConValueLastName=conversionData;",
									"       pm.expect(valLastName_response).to.eql(ConValueLastName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : group1 People_ids******",
									"pm.test(\"Assert Type of group1 People_ids\"+j, function(){",
									"var valGroup1_response=jsonData[j].group1;",
									"var valGroup1_dataSheet=pm.variables.get(\"group1\"+j);",
									"var typeOfGroup1_dataSheet= pm.variables.get(\"typeOfGroup1\");",
									"var typeOfGroup1_response=typeof valGroup1_response;",
									"",
									"var testResult =  pm.expect(typeOfGroup1_dataSheet).to.be.eql(typeof valGroup1_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of group1 People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGroup1_dataSheet) == typeof(valGroup1_response)){",
									"",
									"        pm.expect(valGroup1_response).to.eql(valGroup1_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGroup1_response,valGroup1_dataSheet, function(){});",
									"       ",
									"       var ConValueGroup1=conversionData;",
									"       pm.expect(valGroup1_response).to.eql(ConValueGroup1);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : group2 People_ids******",
									"",
									"pm.test(\"Assert Type of group2 People_ids\"+j, function(){",
									"var valGroup2_response=jsonData[j].group2;",
									"var valGroup2_dataSheet=pm.variables.get(\"group2\"+j);",
									"var typeOfGroup2_dataSheet= pm.variables.get(\"typeOfGroup2\");",
									"var typeOfGroup2_response=typeof valGroup2_response;",
									"",
									"var testResult =  pm.expect(typeOfGroup2_dataSheet).to.be.eql(typeof valGroup2_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of group2 People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGroup2_dataSheet) == typeof(valGroup2_response)){",
									"",
									"        pm.expect(valGroup2_response).to.eql(valGroup2_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGroup2_response,valGroup2_dataSheet, function(){});",
									"       ",
									"       var ConValueGroup2=conversionData;",
									"       pm.expect(valGroup2_response).to.eql(ConValueGroup2);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : priorityId People_ids******",
									"",
									"pm.test(\"Assert Type of priorityId People_ids\"+j, function(){",
									"var valPriorityId_response=jsonData[j].priorityId;",
									"var valPriorityId_dataSheet=pm.variables.get(\"priorityId\"+j);",
									"var typeOfPriorityId_dataSheet= pm.variables.get(\"typeOfPriorityId\");",
									"var typeOfPriorityId_response=typeof valPriorityId_response;",
									"",
									"var testResult =  pm.expect(typeOfPriorityId_dataSheet).to.be.eql(typeof valPriorityId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of priorityId People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valPriorityId_dataSheet) == typeof(valPriorityId_response)){",
									"",
									"        pm.expect(valPriorityId_response).to.eql(valPriorityId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valPriorityId_response,valPriorityId_dataSheet, function(){});",
									"       ",
									"       var ConValuePriorityId=conversionData;",
									"       pm.expect(valPriorityId_response).to.eql(ConValuePriorityId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : todoNote People_ids******",
									"",
									"pm.test(\"Assert Type of todoNote People_ids\"+j, function(){",
									"var valTodoNote_response=jsonData[j].todoNote;",
									"var valTodoNote_dataSheet=pm.variables.get(\"todoNote\"+j);",
									"var typeOfTodoNote_dataSheet= pm.variables.get(\"typeOfTodoNote\");",
									"var typeOfTodoNote_response=typeof valTodoNote_response;",
									"",
									"var testResult =  pm.expect(typeOfTodoNote_dataSheet).to.be.eql(typeof valTodoNote_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of todoNote People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valTodoNote_dataSheet) == typeof(valTodoNote_response)){",
									"",
									"        pm.expect(valTodoNote_response).to.eql(valTodoNote_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valTodoNote_response,valTodoNote_dataSheet, function(){});",
									"       ",
									"       var ConValueTodoNote=conversionData;",
									"       pm.expect(valTodoNote_response).to.eql(ConValueTodoNote);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : linkedinProfileUrl People_ids******",
									"",
									"pm.test(\"Assert Type of linkedinProfileUrl People_ids\"+j, function(){",
									"var valLinkedinProfileUrl_response=jsonData[j].linkedinProfileUrl;",
									"var valLinkedinProfileUrl_dataSheet=pm.variables.get(\"linkedinProfileUrl\"+j);",
									"var typeOfLinkedinProfileUrl_dataSheet= pm.variables.get(\"typeOfLinkedinProfileUrl\");",
									"var typeOfLinkedinProfileUrl_response=typeof valLinkedinProfileUrl_response;",
									"",
									"var testResult =  pm.expect(typeOfLinkedinProfileUrl_dataSheet).to.be.eql(typeof valLinkedinProfileUrl_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of linkedinProfileUrl People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLinkedinProfileUrl_dataSheet) == typeof(valLinkedinProfileUrl_response)){",
									"",
									"        pm.expect(valLinkedinProfileUrl_response).to.eql(valLinkedinProfileUrl_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLinkedinProfileUrl_response,valLinkedinProfileUrl_dataSheet, function(){});",
									"       ",
									"       var ConValueLinkedinProfileUrl=conversionData;",
									"       pm.expect(valLinkedinProfileUrl_response).to.eql(ConValueLinkedinProfileUrl);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : assistant People_ids******",
									"pm.test(\"Assert Type of assistant People_ids\"+j, function(){",
									"var valAssistant_response=jsonData[j].assistant;",
									"var valAssistant_dataSheet=pm.variables.get(\"assistant\"+j);",
									"var typeOfAssistant_dataSheet= pm.variables.get(\"typeOfAssistant\");",
									"var typeOfAssistant_response=typeof valAssistant_response;",
									"",
									"var testResult =  pm.expect(typeOfAssistant_dataSheet).to.be.eql(typeof valAssistant_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of assistant People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valAssistant_dataSheet) == typeof(valAssistant_response)){",
									"",
									"        pm.expect(valAssistant_response).to.eql(valAssistant_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valAssistant_response,valAssistant_dataSheet, function(){});",
									"       ",
									"       var ConValueAssistant=conversionData;",
									"       pm.expect(valAssistant_response).to.eql(ConValueAssistant);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : qualifications People_ids******",
									"",
									"pm.test(\"Assert Type of qualifications People_ids\"+j, function(){",
									"var valQualifications_response=jsonData[j].qualifications;",
									"var valQualifications_dataSheet=pm.variables.get(\"qualifications\"+j);",
									"var typeOfQualifications_dataSheet= pm.variables.get(\"typeOfQualifications\");",
									"var typeOfQualifications_response=typeof valQualifications_response;",
									"",
									"var testResult =  pm.expect(typeOfQualifications_dataSheet).to.be.eql(typeof valQualifications_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of qualifications People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valQualifications_dataSheet) == typeof(valQualifications_response)){",
									"",
									"        pm.expect(valQualifications_response).to.eql(valQualifications_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valQualifications_response,valQualifications_dataSheet, function(){});",
									"       ",
									"       var ConValueQualifications=conversionData;",
									"       pm.expect(valQualifications_response).to.eql(ConValueQualifications);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of type of : contactDetails People_ids******",
									"",
									"var valContactDetails_response=jsonData[j].contactDetails;",
									"var lengthOfResponse = valContactDetails_response.length;",
									"",
									"var typeOfContactDetails_dataSheet= pm.variables.get(\"typeOfContactDetails\");",
									"var typeOfContactDetails_response=typeof valContactDetails_response;",
									"var typeOfContactDetails_label_dataSheet= pm.variables.get(\"typeOfContactDetails_label\");",
									"var typeOfContactDetails_value_dataSheet= pm.variables.get(\"typeOfContactDetails_value\");",
									"var typeOfContactDetails_icon_dataSheet= pm.variables.get(\"typeOfContactDetails_icon\");",
									"var typeOfContactDetails_isDefault_dataSheet= pm.variables.get(\"typeOfContactDetails_isDefault\");",
									"var typeOfContactDetails_lastModifiedAt_dataSheet= pm.variables.get(\"typeOfContactDetails_lastModifiedAt\");",
									"var testResultTypeOf;",
									"pm.test(\"Assert Type of contactDetails People_ids\"+j, function(){",
									"var testResultTypeOf = pm.expect(typeOfContactDetails_dataSheet).to.be.eql(typeof valContactDetails_response);",
									"",
									"",
									"",
									"//*******Assertion of Key : contactDetails_label People_ids******",
									"",
									"if(testResultTypeOf){",
									"    ",
									"    console.log(\"length.......\"+lengthOfResponse);",
									"    if(lengthOfResponse!=0){",
									"    ",
									"   for(var i=0;i<lengthOfResponse;i++){",
									"    pm.test(\"Assert keys inside contactDetails\",function()",
									"        {",
									"       ",
									"        pm.expect(jsonData[j].contactDetails[i]).to.have.all.keys('label','icon','value','isDefault','lastModifiedAt');",
									"        }); ",
									"    pm.test(\"Assert type of contactDetails_label People_ids \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_label_response = typeof (jsonData[j].contactDetails[i].label);",
									"        var valContactDetails_label_datasheet = pm.variables.get(\"contactDetails_label\"+j+i) ;",
									"        var testResultTypeOfLabel = pm.expect(typeOfContactDetails_label_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_label\"));",
									"     ",
									"    if(testResultTypeOfLabel){",
									"    pm.test(\"Assert value contactDetails_label People_ids\"+j, function(){",
									"        pm.expect(jsonData[j].contactDetails[i].label).to.be.eql(valContactDetails_label_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"\t",
									"\t//*******Assertion of Key : contactDetails_value People_ids******",
									"\t",
									"\t  pm.test(\"Assert type of contactDetails_value People_ids \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_value_response = typeof (jsonData[j].contactDetails[i].value);",
									"        var valContactDetails_value_datasheet = pm.variables.get(\"contactDetails_value\"+j+i) ;",
									"        var testResultTypeOfLabel = pm.expect(typeOfContactDetails_value_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_value\"));",
									"     ",
									"    if(testResultTypeOfLabel){",
									"    pm.test(\"Assert value contactDetails_value People_ids\"+j, function(){",
									"        pm.expect(jsonData[j].contactDetails[i].value).to.be.eql(valContactDetails_value_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"\t//*******Assertion of Key : contactDetails_icon People_ids******",
									"\t",
									"\t  pm.test(\"Assert type of contactDetails_icon People_ids \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_icon_response = typeof (jsonData[j].contactDetails[i].icon);",
									"        var valContactDetails_icon_datasheet = pm.variables.get(\"contactDetails_icon\"+j+i) ;",
									"        var testResultTypeOfIcon = pm.expect(typeOfContactDetails_icon_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_icon\"));",
									"     ",
									"    if(testResultTypeOfIcon){",
									"    pm.test(\"Assert value contactDetails_icon People_ids\"+j, function(){",
									"        pm.expect(jsonData[j].contactDetails[i].icon).to.be.eql(valContactDetails_icon_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t//*******Assertion of Key : contactDetails_isDefault People_ids******",
									"\t\t  pm.test(\"Assert type of contactDetails_isDefault People_ids \"+j , function(){",
									"        var valContactDetails_isDefault_response = jsonData[j].contactDetails[i].isDefault;",
									"        var typeOfContactDetails_isDefault_response = typeof (jsonData[j].contactDetails[i].isDefault);",
									"        var valContactDetails_isDefault_dataSheet = pm.variables.get(\"contactDetails_isDefault\"+j+i) ;",
									"        var testResultTypeOfIsDefault = pm.expect(typeOfContactDetails_isDefault_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_isDefault\"));",
									"     ",
									"    if(testResultTypeOfIsDefault){",
									"\t\t if(typeof(valContactDetails_isDefault_dataSheet) == typeof(valContactDetails_isDefault_response))",
									"              {",
									"        ",
									"                pm.expect(valContactDetails_isDefault_response).to.eql(valContactDetails_isDefault_dataSheet); ",
									"                  ",
									"              }",
									"\t\telse",
									"              {",
									"                valCallBack(valContactDetails_isDefault_response,valContactDetails_isDefault_dataSheet, function(){});",
									"               ",
									"               var ConValueContactDetails_isDefault=conversionData;",
									"               pm.expect(valContactDetails_isDefault_response).to.eql(ConValueContactDetails_isDefault);      ",
									"                }",
									"\t}",
									"   else{ postman.setNextRequest();}\t",
									"\t});",
									"",
									"\t//*******Assertion of Key : contactDetails_lastModified People_ids******",
									"\t",
									"\t\t",
									"\t  pm.test(\"Assert type of contactDetails_lastModifiedAt People_ids \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_lastModifiedAt_response = typeof (jsonData[j].contactDetails[i].lastModifiedAt);",
									"        var valContactDetails_lastModifiedAt_datasheet = pm.variables.get(\"contactDetails_lastModifiedAt\"+j+i) ;",
									"        var testResultTypeOfLastModifiedAt = pm.expect(typeOfContactDetails_lastModifiedAt_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_lastModifiedAt\"));",
									"     ",
									"    if(testResultTypeOfLastModifiedAt){",
									"    pm.test(\"Assert value contactDetails_lastModifiedAt People_ids\"+j, function(){",
									"        pm.expect(jsonData[j].contactDetails[i].lastModifiedAt).to.be.eql(valContactDetails_lastModifiedAt_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"",
									"",
									"   }",
									"}",
									"",
									"",
									"else {",
									"    ",
									"    pm.test(\"Assert value of contactDetails when empty People_ids\"+j, function()",
									"    {",
									"     var valContactDetails_response=jsonData[j].contactDetails;",
									"var valContactDetails_dataSheet=pm.variables.get(\"contactDetails\"+j);",
									"var typeOfContactDetails_dataSheet= pm.variables.get(\"typeOfContactDetails\");",
									"var typeOfContactDetails_response=typeof valContactDetails_response;",
									"",
									"var testResult =  pm.expect(typeOfContactDetails_dataSheet).to.be.eql(typeof valContactDetails_response);",
									"",
									"",
									"      if(typeof(valContactDetails_dataSheet) == typeof(valContactDetails_response)){",
									"",
									"        pm.expect(valContactDetails_response).to.eql(valContactDetails_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valContactDetails_response,valContactDetails_dataSheet, function(){});",
									"       ",
									"       var ConValueContactDetails=conversionData;",
									"       pm.expect(valContactDetails_response).to.eql(ConValueContactDetails);      ",
									"        }",
									"    });",
									"",
									"}",
									"}",
									"else{ postman.setNextRequest();",
									"    ",
									"}",
									"",
									"});",
									"",
									"//*******Assertion of Key : workHistory People_ids******",
									"",
									"pm.test(\"Assert Type of workHistory People_ids\"+j, function(){",
									"var valWorkHistory_response=jsonData[j].workHistory;",
									"var valWorkHistory_dataSheet=pm.variables.get(\"workHistory\"+j);",
									"var typeOfWorkHistory_dataSheet= pm.variables.get(\"typeOfWorkHistory\");",
									"var typeOfWorkHistory_response=typeof valWorkHistory_response;",
									"",
									"var testResult =  pm.expect(typeOfWorkHistory_dataSheet).to.be.eql(typeof valWorkHistory_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of workHistory People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valWorkHistory_dataSheet) == typeof(valWorkHistory_response)){",
									"",
									"        pm.expect(valWorkHistory_response).to.eql(valWorkHistory_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valWorkHistory_response,valWorkHistory_dataSheet, function(){});",
									"       ",
									"       var ConValueWorkHistory=conversionData;",
									"       pm.expect(valWorkHistory_response).to.eql(ConValueWorkHistory);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : geoMobilityNotes People_ids******",
									"",
									"pm.test(\"Assert Type of geoMobilityNotes People_ids\"+j, function(){",
									"var valGeoMobilityNotes_response=jsonData[j].geoMobilityNotes;",
									"var valGeoMobilityNotes_dataSheet=pm.variables.get(\"geoMobilityNotes\"+j);",
									"var typeOfGeoMobilityNotes_dataSheet= pm.variables.get(\"typeOfGeoMobilityNotes\");",
									"var typeOfGeoMobilityNotes_response=typeof valGeoMobilityNotes_response;",
									"",
									"var testResult =  pm.expect(typeOfGeoMobilityNotes_dataSheet).to.be.eql(typeof valGeoMobilityNotes_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of geoMobilityNotes People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGeoMobilityNotes_dataSheet) == typeof(valGeoMobilityNotes_response)){",
									"",
									"        pm.expect(valGeoMobilityNotes_response).to.eql(valGeoMobilityNotes_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGeoMobilityNotes_response,valGeoMobilityNotes_dataSheet, function(){});",
									"       ",
									"       var ConValueGeoMobilityNotes=conversionData;",
									"       pm.expect(valGeoMobilityNotes_response).to.eql(ConValueGeoMobilityNotes);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : birthday People_ids******",
									"",
									"pm.test(\"Assert Type of birthday People_ids\"+j, function(){",
									"var valBirthday_response=jsonData[j].birthday;",
									"var valBirthday_dataSheet=pm.variables.get(\"birthday\"+j);",
									"var typeOfBirthday_dataSheet= pm.variables.get(\"typeOfBirthday\");",
									"var typeOfBirthday_response=typeof valBirthday_response;",
									"",
									"var testResult =  pm.expect(typeOfBirthday_dataSheet).to.be.eql(typeof valBirthday_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of birthday People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valBirthday_dataSheet) == typeof(valBirthday_response)){",
									"",
									"        pm.expect(valBirthday_response).to.eql(valBirthday_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBirthday_response,valBirthday_dataSheet, function(){});",
									"       ",
									"       var ConValueBirthday=conversionData;",
									"       pm.expect(valBirthday_response).to.eql(ConValueBirthday);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : principalNationalityId People_ids******",
									"",
									"pm.test(\"Assert Type of principalNationalityId People_ids\"+j, function(){",
									"var valPrincipalNationalityId_response=jsonData[j].principalNationalityId;",
									"var valPrincipalNationalityId_dataSheet=pm.variables.get(\"principalNationalityId\"+j);",
									"var typeOfPrincipalNationalityId_dataSheet= pm.variables.get(\"typeOfPrincipalNationalityId\");",
									"var typeOfPrincipalNationalityId_response=typeof valPrincipalNationalityId_response;",
									"",
									"var testResult =  pm.expect(typeOfPrincipalNationalityId_dataSheet).to.be.eql(typeof valPrincipalNationalityId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of principalNationalityId People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valPrincipalNationalityId_dataSheet) == typeof(valPrincipalNationalityId_response)){",
									"",
									"        pm.expect(valPrincipalNationalityId_response).to.eql(valPrincipalNationalityId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valPrincipalNationalityId_response,valPrincipalNationalityId_dataSheet, function(){});",
									"       ",
									"       var ConValuePrincipalNationalityId=conversionData;",
									"       pm.expect(valPrincipalNationalityId_response).to.eql(ConValuePrincipalNationalityId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"",
									"",
									"//*******Assertion of Key : languages People_ids******",
									"",
									"",
									"pm.test(\"Assert Type of languages People_ids\"+j, function(){",
									"var valLanguages_response=jsonData[j].languages;",
									"var valLanguages_dataSheet=pm.variables.get(\"languages\"+j);",
									"var typeOfLanguages_dataSheet= pm.variables.get(\"typeOfLanguages\");",
									"var typeOfLanguages_response=typeof valLanguages_response;",
									"",
									"var testResult =  pm.expect(typeOfLanguages_dataSheet).to.be.eql(typeof valLanguages_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of languages People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLanguages_dataSheet) == typeof(valLanguages_response)){",
									"",
									"        pm.expect(valLanguages_response).to.eql(valLanguages_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLanguages_response,valLanguages_dataSheet, function(){});",
									"       ",
									"       var ConValueLanguages=conversionData;",
									"       pm.expect(valLanguages_response).to.eql(ConValueLanguages);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : homeCountryId People_ids******",
									"",
									"pm.test(\"Assert Type of homeCountryId People_ids\"+j, function(){",
									"var valHomeCountryId_response=jsonData[j].homeCountryId;",
									"var valHomeCountryId_dataSheet=pm.variables.get(\"homeCountryId\"+j);",
									"var typeOfHomeCountryId_dataSheet= pm.variables.get(\"typeOfHomeCountryId\");",
									"var typeOfHomeCountryId_response=typeof valHomeCountryId_response;",
									"",
									"var testResult =  pm.expect(typeOfHomeCountryId_dataSheet).to.be.eql(typeof valHomeCountryId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of homeCountryId People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valHomeCountryId_dataSheet) == typeof(valHomeCountryId_response)){",
									"",
									"        pm.expect(valHomeCountryId_response).to.eql(valHomeCountryId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valHomeCountryId_response,valHomeCountryId_dataSheet, function(){});",
									"       ",
									"       var ConValueHomeCountryId=conversionData;",
									"       pm.expect(valHomeCountryId_response).to.eql(ConValueHomeCountryId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : maritalStatusId People_ids******",
									"",
									"pm.test(\"Assert Type of maritalStatusId People_ids\"+j, function(){",
									"var valMaritalStatusId_response=jsonData[j].maritalStatusId;",
									"var valMaritalStatusId_dataSheet=pm.variables.get(\"maritalStatusId\"+j);",
									"var typeOfMaritalStatusId_dataSheet= pm.variables.get(\"typeOfMaritalStatusId\");",
									"var typeOfMaritalStatusId_response=typeof valMaritalStatusId_response;",
									"",
									"var testResult =  pm.expect(typeOfMaritalStatusId_dataSheet).to.be.eql(typeof valMaritalStatusId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of maritalStatusId People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valMaritalStatusId_dataSheet) == typeof(valMaritalStatusId_response)){",
									"",
									"        pm.expect(valMaritalStatusId_response).to.eql(valMaritalStatusId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valMaritalStatusId_response,valMaritalStatusId_dataSheet, function(){});",
									"       ",
									"       var ConValueMaritalStatusId=conversionData;",
									"       pm.expect(valMaritalStatusId_response).to.eql(ConValueMaritalStatusId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"",
									"//*******Assertion of Key : spouseName People_ids******",
									"",
									"",
									"pm.test(\"Assert Type of spouseName People_ids\"+j, function(){",
									"var valSpouseName_response=jsonData[j].spouseName;",
									"var valSpouseName_dataSheet=pm.variables.get(\"spouseName\"+j);",
									"var typeOfSpouseName_dataSheet= pm.variables.get(\"typeOfSpouseName\");",
									"var typeOfSpouseName_response=typeof valSpouseName_response;",
									"",
									"var testResult =  pm.expect(typeOfSpouseName_dataSheet).to.be.eql(typeof valSpouseName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of spouseName People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valSpouseName_dataSheet) == typeof(valSpouseName_response)){",
									"",
									"        pm.expect(valSpouseName_response).to.eql(valSpouseName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valSpouseName_response,valSpouseName_dataSheet, function(){});",
									"       ",
									"       var ConValueSpouseName=conversionData;",
									"       pm.expect(valSpouseName_response).to.eql(ConValueSpouseName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : children People_ids******",
									"",
									"",
									"pm.test(\"Assert Type of children People_ids\"+j, function(){",
									"var valChildren_response=jsonData[j].children;",
									"var valChildren_dataSheet=pm.variables.get(\"children\"+j);",
									"var typeOfChildren_dataSheet= pm.variables.get(\"typeOfChildren\");",
									"var typeOfChildren_response=typeof valChildren_response;",
									"",
									"var testResult =  pm.expect(typeOfChildren_dataSheet).to.be.eql(typeof valChildren_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of children People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valChildren_dataSheet) == typeof(valChildren_response)){",
									"",
									"        pm.expect(valChildren_response).to.eql(valChildren_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valChildren_response,valChildren_dataSheet, function(){});",
									"       ",
									"       var ConValueChildren=conversionData;",
									"       pm.expect(valChildren_response).to.eql(ConValueChildren);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : whoKnowsBest People_ids******",
									"",
									"pm.test(\"Assert Type of whoKnowsBest People_ids\"+j, function(){",
									"var valWhoKnowsBest_response=jsonData[j].whoKnowsBest;",
									"var valWhoKnowsBest_dataSheet=pm.variables.get(\"whoKnowsBest\"+j);",
									"var typeOfWhoKnowsBest_dataSheet= pm.variables.get(\"typeOfWhoKnowsBest\");",
									"var typeOfWhoKnowsBest_response=typeof valWhoKnowsBest_response;",
									"",
									"var testResult =  pm.expect(typeOfWhoKnowsBest_dataSheet).to.be.eql(typeof valWhoKnowsBest_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of whoKnowsBest People_ids\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valWhoKnowsBest_dataSheet) == typeof(valWhoKnowsBest_response)){",
									"",
									"        pm.expect(valWhoKnowsBest_response).to.eql(valWhoKnowsBest_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valWhoKnowsBest_response,valWhoKnowsBest_dataSheet, function(){});",
									"       ",
									"       var ConValueWhoKnowsBest=conversionData;",
									"       pm.expect(valWhoKnowsBest_response).to.eql(ConValueWhoKnowsBest);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : Blocks People_ids *****",
									"pm.test(\"Assert of Blocks People_ids\"+j, function(){",
									"var valBlocks_response=jsonData[j].blocks;",
									"",
									"var typeOfBlocks_Type_dataSheet= pm.variables.get(\"typeOfBlocks_Type\");",
									"var typeOfBlocks_ExpirationDate_dataSheet= pm.variables.get(\"typeOfBlocks_ExpirationDate\");",
									"",
									"",
									"    var i;",
									"",
									"    for(i=0;i<valBlocks_response.length;i++){",
									"",
									"        pm.test(\"Assert keys inside Blocks\",function()",
									"        {",
									"        pm.expect(jsonData[j].blocks[i]).to.have.all.keys('type','expirationDate');",
									"        });",
									"",
									"//*******Assertion of Key : Blocks_Type People_ids *****",
									"pm.test(\"Assert Type of Blocks_Type\" +i+ \"People_ids\", function(){",
									"var valBlocks_Type_response=jsonData[j].blocks[i].type;",
									"var valBlocks_Type_dataSheet=pm.variables.get(\"blocks_type\"+j+i);",
									"var typeOfBlocks_Type_response=typeof valBlocks_Type_response;",
									"var typeOfBlocks_Type_dataSheet = pm.variables.get(\"typeOfBlocks_type\");",
									"var testResult =  pm.expect(typeOfBlocks_Type_dataSheet).to.be.eql(typeof valBlocks_Type_response);",
									"        ",
									"if(testResult)",
									"{",
									"    ",
									"    pm.test(\"Assert value of blocks_type \"+i+  \"People_ids\", function()",
									"    {",
									"        ",
									"      if(typeof(valBlocks_Type_dataSheet) == typeof(valBlocks_Type_response)){",
									"",
									"        pm.expect(valBlocks_Type_response).to.eql(valBlocks_Type_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBlocks_Type_response,valBlocks_Type_dataSheet, function(){});",
									"       ",
									"       var ConValueBlocks_Type=conversionData;",
									"       pm.expect(valBlocks_Type_response).to.eql(ConValueBlocks_Type);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : Blocks_ExpirationDate People_ids *****",
									"pm.test(\"Assert Type of Blocks_ExpirationDate \" +i+\" People_ids\", function(){",
									"var valBlocks_ExpirationDate_response=jsonData[j].blocks[i].expirationDate;",
									"var valBlocks_ExpirationDate_dataSheet=pm.variables.get(\"blocks_expirationDate\"+j+i);",
									"var typeOfBlocks_ExpirationDate_response=typeof valBlocks_ExpirationDate_response;",
									"var typeOfBlocks_ExpirationDate_dataSheet = pm.variables.get(\"typeOfBlocks_expirationDate\");",
									"",
									"var testResult =  pm.expect(typeOfBlocks_ExpirationDate_dataSheet).to.be.eql(typeof valBlocks_ExpirationDate_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of blocks_expirationDate\"+i+\" Relationship\", function()",
									"    {",
									"        ",
									"      if(typeof(valBlocks_ExpirationDate_dataSheet) == typeof(valBlocks_ExpirationDate_response)){",
									"",
									"        pm.expect(valBlocks_ExpirationDate_response).to.eql(valBlocks_ExpirationDate_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBlocks_ExpirationDate_response,valBlocks_ExpirationDate_dataSheet, function(){});",
									"       ",
									"       var ConValueBlocks_ExpirationDate=conversionData;",
									"       pm.expect(valBlocks_ExpirationDate_response).to.eql(ConValueBlocks_ExpirationDate);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"}",
									"});  ",
									"",
									"var valRelationships_response=jsonData[0].relationships;",
									"var lengthOfResponse = valRelationships_response.length;",
									"",
									"var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"var typeOfRelationships_response=typeof valRelationships_response;",
									"",
									"",
									"//*******Assertion of type of : relationships People_ids******",
									"",
									"var valRelationships_response=jsonData[j].relationships;",
									"var lengthOfResponse = valRelationships_response.length;",
									"",
									"var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"var typeOfRelationships_response=typeof valRelationships_response;",
									"var typeOfRelationships_userId_dataSheet= pm.variables.get(\"typeOfRelationships_userId\");",
									"var typeOfRelationships_relationshipTypeId_dataSheet= pm.variables.get(\"typeOfRelationships_relationshipTypeId\");",
									"var testResultTypeOf;",
									"pm.test(\"Assert Type of relationships People_ids\"+j, function(){",
									"var testResultTypeOf = pm.expect(typeOfRelationships_dataSheet).to.be.eql(typeof valRelationships_response);",
									"",
									"",
									"",
									"//*******Assertion of Key : relationships_userId People_ids******",
									"",
									"if(testResultTypeOf){",
									"    ",
									"    console.log(\"length.......\"+lengthOfResponse);",
									"    if(lengthOfResponse!=0){",
									"    ",
									"   for(var i=0;i<lengthOfResponse;i++){",
									"    pm.test(\"Assert keys inside relations\",function()",
									"        {",
									"       ",
									"        pm.expect(jsonData[j].relationships[i]).to.have.all.keys('userId','relationshipTypeId');",
									"        }); ",
									"    pm.test(\"Assert type of relationships_userId People_ids \"+j , function(){",
									"        ",
									"        var typeOfRelationships_userId_response = typeof (jsonData[j].relationships[i].userId);",
									"        var valRelationships_userId_datasheet = pm.variables.get(\"relationships_userId\"+j+i) ;",
									"        var testResultTypeOfUserId = pm.expect(typeOfRelationships_userId_response ).to.be.eql(pm.variables.get(\"typeOfRelationships_userId\"));",
									"     ",
									"    if(testResultTypeOfUserId){",
									"    pm.test(\"Assert value relationships_userId People_ids\"+j, function(){",
									"        pm.expect(jsonData[j].relationships[i].userId).to.be.eql(valRelationships_userId_datasheet.toString());",
									"    });} }) ",
									"//*******Assertion of Key : relationships_relationshipTypeId People_ids******    ",
									"      pm.test(\"Assert type of relationships_relationshipTypeId People_ids \"+j , function(){",
									"        var valRelationships_relationshipTypeId_datasheet = pm.variables.get(\"relationships_relationshipTypeId\"+j+i) ;",
									"        var typeOfRelationships_relationshipTypeId_response = typeof (jsonData[j].relationships[i].relationshipTypeId);",
									"        ",
									"        var testResultTypeOfrelationshipTypeId = pm.expect(typeOfRelationships_relationshipTypeId_response ).to.be.eql(pm.variables.get(\"typeOfRelationships_relationshipTypeId\"));",
									"     ",
									"    ",
									"    if(testResultTypeOfrelationshipTypeId){",
									"    pm.test(\"Assert value relationships_relationshipTypeId People_ids\"+j, function(){",
									"        pm.expect(jsonData[j].relationships[i].relationshipTypeId).to.be.eql(valRelationships_relationshipTypeId_datasheet.toString());",
									"    });} }) ;",
									"   }",
									"}",
									"else {",
									"    ",
									"    pm.test(\"Assert value of relationships when empty People_ids\"+j, function()",
									"    {",
									"     var valRelationships_response=jsonData[j].relationships;",
									"var valRelationships_dataSheet=pm.variables.get(\"relationships\"+j);",
									"var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"var typeOfRelationships_response=typeof valRelationships_response;",
									"",
									"var testResult =  pm.expect(typeOfRelationships_dataSheet).to.be.eql(typeof valRelationships_response);",
									"",
									"",
									"      if(typeof(valRelationships_dataSheet) == typeof(valRelationships_response)){",
									"",
									"        pm.expect(valRelationships_response).to.eql(valRelationships_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valRelationships_response,valRelationships_dataSheet, function(){});",
									"       ",
									"       var ConValueRelationships=conversionData;",
									"       pm.expect(valRelationships_response).to.eql(ConValueRelationships);      ",
									"        }",
									"    });",
									"",
									"}",
									"}",
									"else{ postman.setNextRequest();",
									"    ",
									"}",
									"",
									"});",
									"//*******Assertion of Key : rassignmentIds People_ids********",
									"",
									"",
									"pm.test(\"Assert Type of assignmentIds People_ids\"+j, function(){",
									"var valAssignmentIds_response=jsonData[j].assignmentIds;",
									"var valAssignmentIds_dataSheet=pm.variables.get(\"assignmentIds\"+j);",
									"var typeOfAssignmentIds_dataSheet= pm.variables.get(\"typeOfAssignmentIds\");",
									"var assignmentIds_count= pm.variables.get(\"assignmentIds_count\"+j);",
									"var typeOfAssignmentIds_response=typeof valAssignmentIds_response;",
									"",
									"var testResult =  pm.expect(typeOfAssignmentIds_dataSheet).to.be.eql(typeof valAssignmentIds_response);",
									"",
									"",
									"if(testResult)",
									"{",
									"pm.test(\"Assert count  of assignmentIds People_ids\"+j, function(){",
									"    var objToStr = JSON.stringify(valAssignmentIds_response);",
									"    var len = objToStr.split(\",\").length;",
									"    pm.expect(len).to.be.eql(assignmentIds_count);",
									"});",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"}",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/people?ids=10465",
							"host": [
								"{{url}}"
							],
							"path": [
								"people"
							],
							"query": [
								{
									"key": "ids",
									"value": "10465"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Relationship",
			"item": [
				{
					"name": "Put_EditRelationships",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"var conversionData;\r",
									"var jsonValue=jsonData;\r",
									"\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean'){\r",
									"        switch(typeof value){\r",
									"            case \"string\":\r",
									"               switch(value.toLowerCase()) \r",
									"                         {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"\r",
									"                callback(conversionData);\r",
									"                break;  \r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"    switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        \r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for (j=0;j<jsonData.length;j++){\r",
									"\r",
									"  jsonValue=jsonData[j].relationship;\r",
									"  var k=0;\r",
									"\r",
									"  pm.environment.set(\"relationshipLastModifiedAt\",jsonValue.relationshipLastModifiedAt);\r",
									"  pm.environment.set(\"fileNoteId\", jsonData[j].fileNoteId);\r",
									"\r",
									"  pm.test(\"Check if ETP Relationship object contains all provided keys\",function()\r",
									"    {\r",
									"      pm.expect(jsonValue).to.have.all.keys('boardexStatus','boardexData','DCFStatus','createdAt','lastModifiedAt','id','firstName','lastName','group1','group2','priorityId','todoNote','linkedinProfileUrl','assistant','qualifications','contactDetails','workHistory','blocks','geoMobilityNotes','birthday','principalNationalityId','languages','homeCountryId','maritalStatusId','spouseName','children','whoKnowsBest','relationships','assignmentIds','addedToMyRelationshipsAt','relationshipTypeId','nextSteps','relationshipLastModifiedAt');\r",
									"  }); \r",
									"\r",
									"//    pm.test(\"Check if ETP Relationship assistant object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.assistant).to.have.all.keys('phoneNumber','fullName','email','extension');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship qualifications object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.qualifications).to.have.all.keys('earnedAt','title','institution','country');\r",
									"//   }); \r",
									"\r",
									"// pm.test(\"Check if ETP Relationship contactDetails object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.contactDetails).to.have.all.keys('label','value','icon','isDefault','lastModifiedAt');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship workHistory object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.workHistory).to.have.all.keys('startedAt','endedAt','title','company','country','isPrimary','isHired','isNED','sequenceNumber','compensation');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship Launguages object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.languages).to.have.all.keys('languageId','fluencyId');\r",
									"//   });\r",
									"\r",
									"  //*******Assertion of Key : boardexStatuss   *********\r",
									"  pm.test(\"Assert Type of boardexStatus\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.boardexStatus).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of boardexStatus\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.boardexStatus === typeof data['boardexStatus'+j]) {\r",
									"          pm.expect(data['boardexStatus'+j]).to.eql(jsonValue.boardexStatus);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.boardexStatus, data['boardexStatus'+j], function () { });\r",
									"\r",
									"          var conboardexStatus = conversionData;\r",
									"          pm.expect(jsonValue.boardexStatus).to.eql(conboardexStatus);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : boardexDatas   *********\r",
									"  pm.test(\"Assert Type of boardexData\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.boardexData).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of boardexData\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.boardexData === typeof data['boardexData'+j]) {\r",
									"          pm.expect(data['boardexData'+j]).to.eql(jsonValue.boardexData);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.boardexData, data['boardexData'+j], function () { });\r",
									"\r",
									"          var conboardexData = conversionData;\r",
									"          pm.expect(jsonValue.boardexData).to.eql(conboardexData);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"  //*******Assertion of Key : DCFStatuss   *********\r",
									"  pm.test(\"Assert Type of DCFStatus\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.DCFStatus).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of DCFStatus\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.DCFStatus === typeof data['DCFStatus'+j]) {\r",
									"          pm.expect(data['DCFStatus'+j]).to.eql(jsonValue.DCFStatus);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.DCFStatus, data['DCFStatus'+j], function () { });\r",
									"\r",
									"          var conDCFStatus = conversionData;\r",
									"          pm.expect(jsonValue.DCFStatus).to.eql(conDCFStatus);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : createdAts   *********\r",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of createdAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.createdAt === typeof data['createdAt'+j]) {\r",
									"          pm.expect(data['createdAt'+j]).to.eql(jsonValue.createdAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.createdAt, data['createdAt'+j], function () { });\r",
									"\r",
									"          var concreatedAt = conversionData;\r",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.lastModifiedAt === typeof data['lastModifiedAt'+j]) {\r",
									"          pm.expect(data['lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.lastModifiedAt, data['lastModifiedAt'+j], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : ids   *********\r",
									"  pm.test(\"Assert Type of id\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of id\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.id === typeof data['id'+j]) {\r",
									"          pm.expect(data['id'+j]).to.eql(jsonValue.id);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.id, data['id'+j], function () { });\r",
									"\r",
									"          var conid = conversionData;\r",
									"          pm.expect(jsonValue.id).to.eql(conid);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : firstNames   *********\r",
									"  pm.test(\"Assert Type of firstName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.firstName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of firstName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.firstName === typeof data['firstName'+j]) {\r",
									"          pm.expect(data['firstName'+j]).to.eql(jsonValue.firstName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.firstName, data['firstName'+j], function () { });\r",
									"\r",
									"          var confirstName = conversionData;\r",
									"          pm.expect(jsonValue.firstName).to.eql(confirstName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastNames   *********\r",
									"  pm.test(\"Assert Type of lastName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.lastName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.lastName === typeof data['lastName'+j]) {\r",
									"          pm.expect(data['lastName'+j]).to.eql(jsonValue.lastName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.lastName, data['lastName'+j], function () { });\r",
									"\r",
									"          var conlastName = conversionData;\r",
									"          pm.expect(jsonValue.lastName).to.eql(conlastName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : group1s   *********\r",
									"  pm.test(\"Assert Type of group1\"+j, function () {\r",
									"    if(jsonValue.group1===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of group1\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.group1 === typeof data['group1'+j]) {\r",
									"          pm.expect(data['group1'+j]).to.eql(jsonValue.group1);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.group1, data['group1'+j], function () { });\r",
									"\r",
									"          var congroup1 = conversionData;\r",
									"          pm.expect(jsonValue.group1).to.eql(congroup1);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : group2s   *********\r",
									"  pm.test(\"Assert Type of group2\"+j, function () {\r",
									"     if(jsonValue.group2===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of group2\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.group2 === typeof data['group2'+j]) {\r",
									"          pm.expect(data['group2'+j]).to.eql(jsonValue.group2);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.group2, data['group2'+j], function () { });\r",
									"\r",
									"          var congroup2 = conversionData;\r",
									"          pm.expect(jsonValue.group2).to.eql(congroup2);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : priorityIds   *********\r",
									"  pm.test(\"Assert Type of priorityId\"+j, function () {\r",
									"     if(jsonValue.priorityId===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"\r",
									"    var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of priorityId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.priorityId === typeof data['priorityId'+j]) {\r",
									"          pm.expect(data['priorityId'+j]).to.eql(jsonValue.priorityId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.priorityId, data['priorityId'+j], function () { });\r",
									"\r",
									"          var conpriorityId = conversionData;\r",
									"          pm.expect(jsonValue.priorityId).to.eql(conpriorityId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : todoNotes   *********\r",
									"  pm.test(\"Assert Type of todoNote\"+j, function () {\r",
									"     if(jsonValue.todoNote===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of todoNote\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.todoNote === typeof data['todoNote'+j]) {\r",
									"          pm.expect(data['todoNote'+j]).to.eql(jsonValue.todoNote);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.todoNote, data['todoNote'+j], function () { });\r",
									"\r",
									"          var contodoNote = conversionData;\r",
									"          pm.expect(jsonValue.todoNote).to.eql(contodoNote);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : linkedinProfileUrls   *********\r",
									"  pm.test(\"Assert Type of linkedinProfileUrl\"+j, function () {\r",
									"    if(jsonValue.linkedinProfileUrl===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of linkedinProfileUrl\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.linkedinProfileUrl === typeof data['linkedinProfileUrl'+j]) {\r",
									"          pm.expect(data['linkedinProfileUrl'+j]).to.eql(jsonValue.linkedinProfileUrl);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.linkedinProfileUrl, data['linkedinProfileUrl'+j], function () { });\r",
									"\r",
									"          var conlinkedinProfileUrl = conversionData;\r",
									"          pm.expect(jsonValue.linkedinProfileUrl).to.eql(conlinkedinProfileUrl);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"  //verifying the Assistant assertion: \r",
									"\r",
									"  for(var u=0;u<jsonValue.assistant.length;u++){\r",
									"//*******Assertion of Key : phoneNumbers   *********\r",
									"  pm.test(\"Assert Type of phoneNumber\"+j, function () {\r",
									"    if(jsonValue.assistant[u].phoneNumber===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of phoneNumber\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].phoneNumber === typeof data['assistant_phoneNumber'+j+u]) {\r",
									"          pm.expect(data['assistant_phoneNumber'+j+u]).to.eql(jsonValue.assistant[u].phoneNumber);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].phoneNumber, data['assistant_phoneNumber'+j+u], function () { });\r",
									"\r",
									"          var conphoneNumber = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].phoneNumber).to.eql(conphoneNumber);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : fullNames   *********\r",
									"  pm.test(\"Assert Type of fullName\"+j, function () {\r",
									"    if(jsonValue.assistant[u].fullName===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of fullName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].fullName === typeof data['assistant_fullName'+j+u]) {\r",
									"          pm.expect(data['assistant_fullName'+j+u]).to.eql(jsonValue.assistant[u].fullName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].fullName, data['assistant_fullName'+j+u], function () { });\r",
									"\r",
									"          var confullName = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].fullName).to.eql(confullName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : emails   *********\r",
									"  pm.test(\"Assert Type of email\"+j, function () {\r",
									"    if(jsonValue.assistant[u].email===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of email\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].email === typeof data['assistant_email'+j+u]) {\r",
									"          pm.expect(data['assistant_email'+j+u]).to.eql(jsonValue.assistant[u].email);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].email, data['assistant_email'+j+u], function () { });\r",
									"\r",
									"          var conemail = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].email).to.eql(conemail);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : extensions   *********\r",
									"  pm.test(\"Assert Type of extension\"+j, function () {\r",
									"    if(jsonValue.assistant[u].extension===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of extension\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].extension === typeof data['assistant_extension'+j+u]) {\r",
									"          pm.expect(data['assistant_extension'+j+u]).to.eql(jsonValue.assistant[u].extension);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].extension, data['assistant_extension'+j+u], function () { });\r",
									"\r",
									"          var conextension = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].extension).to.eql(conextension);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"}\r",
									"\r",
									"// Verifying Qualification assertions:\r",
									"for(var m=0;m<jsonValue.qualifications.length;m++){\r",
									"\r",
									"  //*******Assertion of Key : earnedAts   *********\r",
									"  pm.test(\"Assert Type of earnedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].earnedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of earnedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].earnedAt === typeof data['qualifications_earnedAt'+j+m]) {\r",
									"          pm.expect(data['qualifications_earnedAt'+j+m]).to.eql(jsonValue.qualifications[m].earnedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].earnedAt, data['qualifications_earnedAt'+j+m], function () { });\r",
									"\r",
									"          var conearnedAt = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].earnedAt).to.eql(conearnedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].title === typeof data['qualifications_title'+j+m]) {\r",
									"          pm.expect(data['qualifications_title'+j+m]).to.eql(jsonValue.qualifications[m].title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].title, data['qualifications_title'+j+m], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : institutions   *********\r",
									"  pm.test(\"Assert Type of institution\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].institution).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of institution\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].institution === typeof data['qualifications_institution'+j+m]) {\r",
									"          pm.expect(data['qualifications_institution'+j+m]).to.eql(jsonValue.qualifications[m].institution);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].institution, data['qualifications_institution'+j+m], function () { });\r",
									"\r",
									"          var coninstitution = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].institution).to.eql(coninstitution);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : countrys   *********\r",
									"  pm.test(\"Assert Type of country\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].country).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of country\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].country === typeof data['qualifications_country'+j+m]) {\r",
									"          pm.expect(data['qualifications_country'+j+m]).to.eql(jsonValue.qualifications[m].country);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].country, data['qualifications_country'+j+m], function () { });\r",
									"\r",
									"          var concountry = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].country).to.eql(concountry);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"}\r",
									"\r",
									"//verifying the contactDetails assertions:\r",
									"\r",
									"for(var n=0;n<jsonValue.contactDetails.length;n++){\r",
									"\r",
									"//*******Assertion of Key : labels   *********\r",
									"  pm.test(\"Assert Type of label\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].label).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of label\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].label === typeof data['contactDetails_label'+j+n]) {\r",
									"          pm.expect(data['contactDetails_label'+j+n]).to.eql(jsonValue.contactDetails[n].label);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].label, data['contactDetails_label'+j+n], function () { });\r",
									"\r",
									"          var conlabel = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].label).to.eql(conlabel);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : values   *********\r",
									"  pm.test(\"Assert Type of value\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].value).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of value\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].value === typeof data['contactDetails_value'+j+n]) {\r",
									"          pm.expect(data['contactDetails_value'+j+n]).to.eql(jsonValue.contactDetails[n].value);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].value, data['contactDetails_value'+j+n], function () { });\r",
									"\r",
									"          var convalue = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].value).to.eql(convalue);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : icons   *********\r",
									"  pm.test(\"Assert Type of icon\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].icon).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of icon\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].icon === typeof data['contactDetails_icon'+j+n]) {\r",
									"          pm.expect(data['contactDetails_icon'+j+n]).to.eql(jsonValue.contactDetails[n].icon);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].icon, data['contactDetails_icon'+j+n], function () { });\r",
									"\r",
									"          var conicon = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].icon).to.eql(conicon);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isDefaults   *********\r",
									"  pm.test(\"Assert Type of isDefault\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].isDefault).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isDefault\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].isDefault === typeof data['contactDetails_isDefault'+j+n]) {\r",
									"          pm.expect(data['contactDetails_isDefault'+j+n]).to.eql(jsonValue.contactDetails[n].isDefault);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].isDefault, data['contactDetails_isDefault'+j+n], function () { });\r",
									"\r",
									"          var conisDefault = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].isDefault).to.eql(conisDefault);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].lastModifiedAt === typeof data['contactDetails_lastModifiedAt'+j+n]) {\r",
									"          pm.expect(data['contactDetails_lastModifiedAt'+j+n]).to.eql(jsonValue.contactDetails[n].lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].lastModifiedAt, data['contactDetails_lastModifiedAt'+j+n], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//Workhistory assertions:\r",
									"\r",
									"for(var t=0;t<jsonValue.workHistory.length;t++){\r",
									"\r",
									"//*******Assertion of Key : startedAts   *********\r",
									"  pm.test(\"Assert Type of startedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].startedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of startedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].startedAt === typeof data['workHistory_startedAt'+j+t]) {\r",
									"          pm.expect(data['workHistory_startedAt'+j+t]).to.eql(jsonValue.workHistory[t].startedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].startedAt, data['workHistory_startedAt'+j+t], function () { });\r",
									"\r",
									"          var constartedAt = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].startedAt).to.eql(constartedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : endedAts   *********\r",
									"  pm.test(\"Assert Type of endedAt\"+j, function () {\r",
									"    if(jsonValue.workHistory[t].endedAt===null){\r",
									"       var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of endedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].endedAt === typeof data['workHistory_endedAt'+j+t]) {\r",
									"          pm.expect(data['workHistory_endedAt'+j+t]).to.eql(jsonValue.workHistory[t].endedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].endedAt, data['workHistory_endedAt'+j+t], function () { });\r",
									"\r",
									"          var conendedAt = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].endedAt).to.eql(conendedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].title === typeof data['workHistory_title'+j+t]) {\r",
									"          pm.expect(data['workHistory_title'+j+t]).to.eql(jsonValue.workHistory[t].title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].title, data['workHistory_title'+j+t], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : companys   *********\r",
									"  pm.test(\"Assert Type of company\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].company).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of company\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].company === typeof data['workHistory_company'+j+t]) {\r",
									"          pm.expect(data['workHistory_company'+j+t]).to.eql(jsonValue.workHistory[t].company);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].company, data['workHistory_company'+j+t], function () { });\r",
									"\r",
									"          var concompany = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].company).to.eql(concompany);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : countrys   *********\r",
									"  pm.test(\"Assert Type of country\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].country).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of country\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].country === typeof data['workHistory_country'+j+t]) {\r",
									"          pm.expect(data['workHistory_country'+j+t]).to.eql(jsonValue.workHistory[t].country);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].country, data['workHistory_country'+j+t], function () { });\r",
									"\r",
									"          var concountry = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].country).to.eql(concountry);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isHireds   *********\r",
									"  pm.test(\"Assert Type of isHired\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isHired).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isHired\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].isHired === typeof data['workHistory_isHired'+j+t]) {\r",
									"          pm.expect(data['workHistory_isHired'+j+t]).to.eql(jsonValue.workHistory[t].isHired);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].isHired, data['workHistory_isHired'+j+t], function () { });\r",
									"\r",
									"          var conisHired = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].isHired).to.eql(conisHired);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isNEDs   *********\r",
									"  pm.test(\"Assert Type of isNED\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isNED).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isNED\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].isNED === typeof data['workHistory_isNED'+j+t]) {\r",
									"          pm.expect(data['workHistory_isNED'+j+t]).to.eql(jsonValue.workHistory[t].isNED);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].isNED, data['workHistory_isNED'+j+t], function () { });\r",
									"\r",
									"          var conisNED = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].isNED).to.eql(conisNED);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : sequenceNumbers   *********\r",
									"  pm.test(\"Assert Type of sequenceNumber\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].sequenceNumber).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of sequenceNumber\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].sequenceNumber === typeof data['workHistory_sequenceNumber'+j+t]) {\r",
									"          pm.expect(data['workHistory_sequenceNumber'+j+t]).to.eql(jsonValue.workHistory[t].sequenceNumber);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].sequenceNumber, data['workHistory_sequenceNumber'+j+t], function () { });\r",
									"\r",
									"          var consequenceNumber = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].sequenceNumber).to.eql(consequenceNumber);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"// Workhistory Compensation assertion\r",
									"jsonWorkHistory=jsonValue.workHistory[t]\r",
									"if(jsonWorkHistory.compensation===null){\r",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation).to.be.eql(data['typeOfObject']);\r",
									"  });\r",
									"}else{\r",
									"\r",
									"//*******Assertion of Key : currencyIds   *********\r",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.currencyId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of currencyId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.currencyId === typeof data['workHistory_compensation_currencyId'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_currencyId'+j+t]).to.eql(jsonWorkHistory.compensation.currencyId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.currencyId, data['workHistory_compensation_currencyId'+j+t], function () { });\r",
									"\r",
									"          var concurrencyId = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.currencyId).to.eql(concurrencyId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : baseSalarys   *********\r",
									"  pm.test(\"Assert Type of baseSalary\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.baseSalary).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of baseSalary\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.baseSalary === typeof data['workHistory_compensation_baseSalary'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_baseSalary'+j+t]).to.eql(jsonWorkHistory.compensation.baseSalary);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.baseSalary, data['workHistory_compensation_baseSalary'+j+t], function () { });\r",
									"\r",
									"          var conbaseSalary = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.baseSalary).to.eql(conbaseSalary);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : totalEstimatedCompensations   *********\r",
									"  pm.test(\"Assert Type of totalEstimatedCompensation\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.totalEstimatedCompensation).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of totalEstimatedCompensation\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.totalEstimatedCompensation === typeof data['workHistory_compensation_totalEstimatedCompensation'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_totalEstimatedCompensation'+j+t]).to.eql(jsonWorkHistory.compensation.totalEstimatedCompensation);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.totalEstimatedCompensation, data['workHistory_compensation_totalEstimatedCompensation'+j+t], function () { });\r",
									"\r",
									"          var contotalEstimatedCompensation = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.totalEstimatedCompensation).to.eql(contotalEstimatedCompensation);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : compensationDates   *********\r",
									"  pm.test(\"Assert Type of compensationDate\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.compensationDate).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of compensationDate\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.compensationDate === typeof data['workHistory_compensation_compensationDate'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_compensationDate'+j+t]).to.eql(jsonWorkHistory.compensation.compensationDate);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.compensationDate, data['workHistory_compensation_compensationDate'+j+t], function () { });\r",
									"\r",
									"          var concompensationDate = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.compensationDate).to.eql(concompensationDate);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"}\r",
									"\r",
									"//*******Assertion of Key : blocks   *********\r",
									"  pm.test(\"Assert Type of blocks\"+j, function () {\r",
									"    \r",
									"    var testResult = pm.expect(typeof jsonValue.blocks).to.be.eql(data['typeOfObject']);\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of blocks\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.blocks === typeof data['blocks'+j]) {\r",
									"          pm.expect(data['blocks'+j]).to.eql(jsonValue.blocks);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.blocks, data['blocks'+j], function () { });\r",
									"\r",
									"          var conblocks = conversionData;\r",
									"          pm.expect(jsonValue.blocks).to.eql(conblocks);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : geoMobilityNotess   *********\r",
									"  pm.test(\"Assert Type of geoMobilityNotes\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.geoMobilityNotes).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of geoMobilityNotes\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.geoMobilityNotes === typeof data['geoMobilityNotes'+j]) {\r",
									"          pm.expect(data['geoMobilityNotes'+j]).to.eql(jsonValue.geoMobilityNotes);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.geoMobilityNotes, data['geoMobilityNotes'+j], function () { });\r",
									"\r",
									"          var congeoMobilityNotes = conversionData;\r",
									"          pm.expect(jsonValue.geoMobilityNotes).to.eql(congeoMobilityNotes);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : birthdays   *********\r",
									"  pm.test(\"Assert Type of birthday\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.birthday).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of birthday\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.birthday === typeof data['birthday'+j]) {\r",
									"          pm.expect(data['birthday'+j]).to.eql(jsonValue.birthday);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.birthday, data['birthday'+j], function () { });\r",
									"\r",
									"          var conbirthday = conversionData;\r",
									"          pm.expect(jsonValue.birthday).to.eql(conbirthday);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : principalNationalityIds   *********\r",
									"  pm.test(\"Assert Type of principalNationalityId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.principalNationalityId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of principalNationalityId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.principalNationalityId === typeof data['principalNationalityId'+j]) {\r",
									"          pm.expect(data['principalNationalityId'+j]).to.eql(jsonValue.principalNationalityId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.principalNationalityId, data['principalNationalityId'+j], function () { });\r",
									"\r",
									"          var conprincipalNationalityId = conversionData;\r",
									"          pm.expect(jsonValue.principalNationalityId).to.eql(conprincipalNationalityId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//Launguages assertions:\r",
									"for(var s=0;s<jsonValue.languages.length;s++){\r",
									"//*******Assertion of Key : languageIds   *********\r",
									"  pm.test(\"Assert Type of languageId\"+j+s, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].languageId).to.be.eql(data['typeOfString']);\r",
									"   \r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of languageId\"+j+s, function () {\r",
									"\r",
									"        if (typeof jsonValue.languages[s].languageId === typeof data['languages_languageId'+j+s]) {\r",
									"          pm.expect(data['languages_languageId'+j+s]).to.eql(jsonValue.languages[s].languageId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.languages[s].languageId, data['languages_languageId'+j+s], function () { });\r",
									"\r",
									"          var conlanguageId = conversionData;\r",
									"          pm.expect(jsonValue.languages[s].languageId).to.eql(conlanguageId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : fluencyIds   *********\r",
									"  pm.test(\"Assert Type of fluencyId\"+j+s, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].fluencyId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of fluencyId\"+j+s, function () {\r",
									"\r",
									"        if (typeof jsonValue.languages[s].fluencyId === typeof data['languages_fluencyId'+j+s]) {\r",
									"          pm.expect(data['languages_fluencyId'+j+s]).to.eql(jsonValue.languages[s].fluencyId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.languages[s].fluencyId, data['languages_fluencyId'+j+s], function () { });\r",
									"\r",
									"          var confluencyId = conversionData;\r",
									"          pm.expect(jsonValue.languages[s].fluencyId).to.eql(confluencyId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//*******Assertion of Key : homeCountryIds   *********\r",
									"  pm.test(\"Assert Type of homeCountryId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.homeCountryId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of homeCountryId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.homeCountryId === typeof data['homeCountryId'+j]) {\r",
									"          pm.expect(data['homeCountryId'+j]).to.eql(jsonValue.homeCountryId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.homeCountryId, data['homeCountryId'+j], function () { });\r",
									"\r",
									"          var conhomeCountryId = conversionData;\r",
									"          pm.expect(jsonValue.homeCountryId).to.eql(conhomeCountryId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : maritalStatusIds   *********\r",
									"  pm.test(\"Assert Type of maritalStatusId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.maritalStatusId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of maritalStatusId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.maritalStatusId === typeof data['maritalStatusId'+j]) {\r",
									"          pm.expect(data['maritalStatusId'+j]).to.eql(jsonValue.maritalStatusId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.maritalStatusId, data['maritalStatusId'+j], function () { });\r",
									"\r",
									"          var conmaritalStatusId = conversionData;\r",
									"          pm.expect(jsonValue.maritalStatusId).to.eql(conmaritalStatusId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : spouseNames   *********\r",
									"  pm.test(\"Assert Type of spouseName\"+j, function () {\r",
									"    if(jsonValue.spouseName===null){\r",
									"        var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of spouseName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.spouseName === typeof data['spouseName'+j]) {\r",
									"          pm.expect(data['spouseName'+j]).to.eql(jsonValue.spouseName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.spouseName, data['spouseName'+j], function () { });\r",
									"\r",
									"          var conspouseName = conversionData;\r",
									"          pm.expect(jsonValue.spouseName).to.eql(conspouseName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : childrens   *********\r",
									"  pm.test(\"Assert Type of children\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.children).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of children\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.children === typeof data['children'+j]) {\r",
									"          pm.expect(data['children'+j]).to.eql(jsonValue.children);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.children, data['children'+j], function () { });\r",
									"\r",
									"          var conchildren = conversionData;\r",
									"          pm.expect(jsonValue.children).to.eql(conchildren);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : whoKnowsBests   *********\r",
									"  pm.test(\"Assert Type of whoKnowsBest\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.whoKnowsBest).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of whoKnowsBest\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.whoKnowsBest === typeof data['whoKnowsBest'+j]) {\r",
									"          pm.expect(data['whoKnowsBest'+j]).to.eql(jsonValue.whoKnowsBest);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.whoKnowsBest, data['whoKnowsBest'+j], function () { });\r",
									"\r",
									"          var conwhoKnowsBest = conversionData;\r",
									"          pm.expect(jsonValue.whoKnowsBest).to.eql(conwhoKnowsBest);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : relationshipss   *********\r",
									"  pm.test(\"Assert Type of relationships\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.relationships).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of relationships\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.relationships === typeof data['relationships'+j]) {\r",
									"          pm.expect(data['relationships'+j]).to.eql(jsonValue.relationships);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.relationships, data['relationships'+j], function () { });\r",
									"\r",
									"          var conrelationships = conversionData;\r",
									"          pm.expect(jsonValue.relationships).to.eql(conrelationships);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"  \r",
									"//*******Assertion of Key : assignmentIdss   *********\r",
									"for(var v=0;v<jsonValue.assignmentIds.length;v++){\r",
									"\r",
									"  pm.test(\"Assert Type of assignmentIds\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.assignmentIds).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of assignmentIds\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assignmentIds[v] === typeof data['assignmentIds'+v]) {\r",
									"          pm.expect(data['assignmentIds'+v]).to.eql(jsonValue.assignmentIds[v]);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assignmentIds[v], data['assignmentIds'+j], function () { });\r",
									"\r",
									"          var conassignmentIds = conversionData;\r",
									"          pm.expect(jsonValue.assignmentIds[v]).to.eql(conassignmentIds);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//*******Assertion of Key : addedToMyRelationshipsAts   *********\r",
									"  pm.test(\"Assert Type of addedToMyRelationshipsAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.addedToMyRelationshipsAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of addedToMyRelationshipsAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.addedToMyRelationshipsAt === typeof data['addedToMyRelationshipsAt'+j]) {\r",
									"          pm.expect(data['addedToMyRelationshipsAt'+j]).to.eql(jsonValue.addedToMyRelationshipsAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.addedToMyRelationshipsAt, data['addedToMyRelationshipsAt'+j], function () { });\r",
									"\r",
									"          var conaddedToMyRelationshipsAt = conversionData;\r",
									"          pm.expect(jsonValue.addedToMyRelationshipsAt).to.eql(conaddedToMyRelationshipsAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : relationshipTypeIds   *********\r",
									"  pm.test(\"Assert Type of relationshipTypeId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.relationshipTypeId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of relationshipTypeId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.relationshipTypeId === typeof data['relationshipTypeId'+j]) {\r",
									"          pm.expect(data['relationshipTypeId'+j]).to.eql(jsonValue.relationshipTypeId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.relationshipTypeId, data['relationshipTypeId'+j], function () { });\r",
									"\r",
									"          var conrelationshipTypeId = conversionData;\r",
									"          pm.expect(jsonValue.relationshipTypeId).to.eql(conrelationshipTypeId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : nextStepss   *********\r",
									"  pm.test(\"Assert Type of nextSteps\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.nextSteps).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of nextSteps\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.nextSteps === typeof data['nextSteps'+j]) {\r",
									"          pm.expect(data['nextSteps'+j]).to.eql(jsonValue.nextSteps);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.nextSteps, data['nextSteps'+j], function () { });\r",
									"\r",
									"          var connextSteps = conversionData;\r",
									"          pm.expect(jsonValue.nextSteps).to.eql(connextSteps);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : relationshipLastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of relationshipLastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.relationshipLastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of relationshipLastModifiedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.relationshipLastModifiedAt === typeof (pm.environment.get(\"relationshipLastModifiedAt\"))) {\r",
									"          \r",
									"          pm.expect(pm.environment.get(\"relationshipLastModifiedAt\")).to.eql(jsonValue.relationshipLastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.relationshipLastModifiedAt, pm.environment.get(\"relationshipLastModifiedAt\"), function () { });\r",
									"\r",
									"          var conrelationshipLastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.relationshipLastModifiedAt).to.eql(conrelationshipLastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : fileNoteIds   *********\r",
									"  pm.test(\"Assert Type of fileNoteId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonData[j].fileNoteId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of fileNoteId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonData[j].fileNoteId === typeof pm.environment.get(\"fileNoteId\")) {\r",
									"          pm.expect(pm.environment.get(\"fileNoteId\")).to.eql(jsonData[j].fileNoteId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonData[j].fileNoteId, pm.environment.get(\"fileNoteId\"), function () { });\r",
									"\r",
									"          var confileNoteId = conversionData;\r",
									"          pm.expect(jsonData[j].fileNoteId).to.eql(confileNoteId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"personId\": \"{{personId}}\",\r\n    \"relationshipTypeId\": \"{{relationshipTypeId}}\",\r\n    \"nextSteps\": \"{{nextSteps}}\",\r\n    \"relationshipLastModifiedAt\": \"{{relationshipLastModifiedAt}}\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}//my-relationships",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"my-relationships"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete_DeleteRelationships",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"{{peopleId}}\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}//my-relationships",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"my-relationships"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post_AddRelationships",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"var conversionData;\r",
									"var jsonValue=jsonData;\r",
									"\r",
									"\r",
									"function valCallBack(type,value,callback)\r",
									"{\r",
									"    if(typeof(type)==='string')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        conversionData=value.toString();\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='boolean'){\r",
									"        switch(typeof value){\r",
									"            case \"string\":\r",
									"               switch(value.toLowerCase()) \r",
									"                         {\r",
									"            case \"false\": \r",
									"                conversionData= false;\r",
									"                callback(conversionData);\r",
									"                break;   \r",
									"            case \"true\": \r",
									"                conversionData= true;\r",
									"                callback(conversionData);\r",
									"                break; \r",
									"            default: conversionData=true;\r",
									"                callback(conversionData);\r",
									"              \r",
									"          }\r",
									"\r",
									"                callback(conversionData);\r",
									"                break;  \r",
									"        }\r",
									"    }\r",
									"    else if(typeof(type)==='number')\r",
									"    {\r",
									"        \r",
									"    switch (typeof(value)) \r",
									"        {\r",
									"      case \"string\":\r",
									"        conversionData=parseInt(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"object\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }else if(typeof(type)==='undefined')\r",
									"    {\r",
									"        console.log(typeof(a));\r",
									"        callback(conversionData);\r",
									"    }else if(typeof(type)==='object')\r",
									"    {\r",
									"        switch (typeof(value)) \r",
									"        {\r",
									"      case \"number\":\r",
									"        var num1=value.toString();\r",
									"        conversionData=JSON.parse(num1);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"string\":\r",
									"        conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"boolean\":\r",
									"         conversionData=JSON.parse(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"      case \"function\":\r",
									"        conversionData=JSON.stringify(value);\r",
									"        callback(conversionData);\r",
									"        break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    else if(typeof(type)==='function')\r",
									"    {\r",
									"        \r",
									"        callback(conversionData);\r",
									"    }\r",
									"    return  conversionData;\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"for (j=0;j<jsonData.length;j++){\r",
									"\r",
									"  jsonValue=jsonData[j].relationship;\r",
									"  var k=0;\r",
									"\r",
									"  pm.environment.set(\"relationshipLastModifiedAt\",jsonValue.relationshipLastModifiedAt);\r",
									"  pm.environment.set(\"fileNoteId\", jsonData[j].fileNoteId);\r",
									"\r",
									"  pm.test(\"Check if ETP Relationship object contains all provided keys\",function()\r",
									"    {\r",
									"      pm.expect(jsonValue).to.have.all.keys('boardexStatus','boardexData','DCFStatus','createdAt','lastModifiedAt','id','firstName','lastName','group1','group2','priorityId','todoNote','linkedinProfileUrl','assistant','qualifications','contactDetails','workHistory','blocks','geoMobilityNotes','birthday','principalNationalityId','languages','homeCountryId','maritalStatusId','spouseName','children','whoKnowsBest','relationships','assignmentIds','addedToMyRelationshipsAt','relationshipTypeId','nextSteps','relationshipLastModifiedAt');\r",
									"  }); \r",
									"\r",
									"//    pm.test(\"Check if ETP Relationship assistant object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.assistant).to.have.all.keys('phoneNumber','fullName','email','extension');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship qualifications object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.qualifications).to.have.all.keys('earnedAt','title','institution','country');\r",
									"//   }); \r",
									"\r",
									"// pm.test(\"Check if ETP Relationship contactDetails object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.contactDetails).to.have.all.keys('label','value','icon','isDefault','lastModifiedAt');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship workHistory object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.workHistory).to.have.all.keys('startedAt','endedAt','title','company','country','isPrimary','isHired','isNED','sequenceNumber','compensation');\r",
									"//   }); \r",
									"\r",
									"//   pm.test(\"Check if ETP Relationship Launguages object contains all provided keys\",function()\r",
									"//     {\r",
									"//       pm.expect(jsonValue.languages).to.have.all.keys('languageId','fluencyId');\r",
									"//   });\r",
									"\r",
									"  //*******Assertion of Key : boardexStatuss   *********\r",
									"  pm.test(\"Assert Type of boardexStatus\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.boardexStatus).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of boardexStatus\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.boardexStatus === typeof data['boardexStatus'+j]) {\r",
									"          pm.expect(data['boardexStatus'+j]).to.eql(jsonValue.boardexStatus);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.boardexStatus, data['boardexStatus'+j], function () { });\r",
									"\r",
									"          var conboardexStatus = conversionData;\r",
									"          pm.expect(jsonValue.boardexStatus).to.eql(conboardexStatus);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : boardexDatas   *********\r",
									"  pm.test(\"Assert Type of boardexData\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.boardexData).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of boardexData\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.boardexData === typeof data['boardexData'+j]) {\r",
									"          pm.expect(data['boardexData'+j]).to.eql(jsonValue.boardexData);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.boardexData, data['boardexData'+j], function () { });\r",
									"\r",
									"          var conboardexData = conversionData;\r",
									"          pm.expect(jsonValue.boardexData).to.eql(conboardexData);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"  //*******Assertion of Key : DCFStatuss   *********\r",
									"  pm.test(\"Assert Type of DCFStatus\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.DCFStatus).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of DCFStatus\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.DCFStatus === typeof data['DCFStatus'+j]) {\r",
									"          pm.expect(data['DCFStatus'+j]).to.eql(jsonValue.DCFStatus);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.DCFStatus, data['DCFStatus'+j], function () { });\r",
									"\r",
									"          var conDCFStatus = conversionData;\r",
									"          pm.expect(jsonValue.DCFStatus).to.eql(conDCFStatus);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : createdAts   *********\r",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of createdAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.createdAt === typeof data['createdAt'+j]) {\r",
									"          pm.expect(data['createdAt'+j]).to.eql(jsonValue.createdAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.createdAt, data['createdAt'+j], function () { });\r",
									"\r",
									"          var concreatedAt = conversionData;\r",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.lastModifiedAt === typeof data['lastModifiedAt'+j]) {\r",
									"          pm.expect(data['lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.lastModifiedAt, data['lastModifiedAt'+j], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : ids   *********\r",
									"  pm.test(\"Assert Type of id\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of id\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.id === typeof data['id'+j]) {\r",
									"          pm.expect(data['id'+j]).to.eql(jsonValue.id);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.id, data['id'+j], function () { });\r",
									"\r",
									"          var conid = conversionData;\r",
									"          pm.expect(jsonValue.id).to.eql(conid);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : firstNames   *********\r",
									"  pm.test(\"Assert Type of firstName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.firstName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of firstName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.firstName === typeof data['firstName'+j]) {\r",
									"          pm.expect(data['firstName'+j]).to.eql(jsonValue.firstName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.firstName, data['firstName'+j], function () { });\r",
									"\r",
									"          var confirstName = conversionData;\r",
									"          pm.expect(jsonValue.firstName).to.eql(confirstName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastNames   *********\r",
									"  pm.test(\"Assert Type of lastName\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.lastName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.lastName === typeof data['lastName'+j]) {\r",
									"          pm.expect(data['lastName'+j]).to.eql(jsonValue.lastName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.lastName, data['lastName'+j], function () { });\r",
									"\r",
									"          var conlastName = conversionData;\r",
									"          pm.expect(jsonValue.lastName).to.eql(conlastName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : group1s   *********\r",
									"  pm.test(\"Assert Type of group1\"+j, function () {\r",
									"    if(jsonValue.group1===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of group1\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.group1 === typeof data['group1'+j]) {\r",
									"          pm.expect(data['group1'+j]).to.eql(jsonValue.group1);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.group1, data['group1'+j], function () { });\r",
									"\r",
									"          var congroup1 = conversionData;\r",
									"          pm.expect(jsonValue.group1).to.eql(congroup1);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : group2s   *********\r",
									"  pm.test(\"Assert Type of group2\"+j, function () {\r",
									"     if(jsonValue.group2===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of group2\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.group2 === typeof data['group2'+j]) {\r",
									"          pm.expect(data['group2'+j]).to.eql(jsonValue.group2);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.group2, data['group2'+j], function () { });\r",
									"\r",
									"          var congroup2 = conversionData;\r",
									"          pm.expect(jsonValue.group2).to.eql(congroup2);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : priorityIds   *********\r",
									"  pm.test(\"Assert Type of priorityId\"+j, function () {\r",
									"     if(jsonValue.priorityId===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"\r",
									"    var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of priorityId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.priorityId === typeof data['priorityId'+j]) {\r",
									"          pm.expect(data['priorityId'+j]).to.eql(jsonValue.priorityId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.priorityId, data['priorityId'+j], function () { });\r",
									"\r",
									"          var conpriorityId = conversionData;\r",
									"          pm.expect(jsonValue.priorityId).to.eql(conpriorityId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : todoNotes   *********\r",
									"  pm.test(\"Assert Type of todoNote\"+j, function () {\r",
									"     if(jsonValue.todoNote===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of todoNote\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.todoNote === typeof data['todoNote'+j]) {\r",
									"          pm.expect(data['todoNote'+j]).to.eql(jsonValue.todoNote);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.todoNote, data['todoNote'+j], function () { });\r",
									"\r",
									"          var contodoNote = conversionData;\r",
									"          pm.expect(jsonValue.todoNote).to.eql(contodoNote);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : linkedinProfileUrls   *********\r",
									"  pm.test(\"Assert Type of linkedinProfileUrl\"+j, function () {\r",
									"    if(jsonValue.linkedinProfileUrl===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of linkedinProfileUrl\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.linkedinProfileUrl === typeof data['linkedinProfileUrl'+j]) {\r",
									"          pm.expect(data['linkedinProfileUrl'+j]).to.eql(jsonValue.linkedinProfileUrl);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.linkedinProfileUrl, data['linkedinProfileUrl'+j], function () { });\r",
									"\r",
									"          var conlinkedinProfileUrl = conversionData;\r",
									"          pm.expect(jsonValue.linkedinProfileUrl).to.eql(conlinkedinProfileUrl);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"  //verifying the Assistant assertion: \r",
									"\r",
									"  for(var u=0;u<jsonValue.assistant.length;u++){\r",
									"//*******Assertion of Key : phoneNumbers   *********\r",
									"  pm.test(\"Assert Type of phoneNumber\"+j, function () {\r",
									"    if(jsonValue.assistant[u].phoneNumber===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of phoneNumber\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].phoneNumber === typeof data['assistant_phoneNumber'+j+u]) {\r",
									"          pm.expect(data['assistant_phoneNumber'+j+u]).to.eql(jsonValue.assistant[u].phoneNumber);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].phoneNumber, data['assistant_phoneNumber'+j+u], function () { });\r",
									"\r",
									"          var conphoneNumber = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].phoneNumber).to.eql(conphoneNumber);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : fullNames   *********\r",
									"  pm.test(\"Assert Type of fullName\"+j, function () {\r",
									"    if(jsonValue.assistant[u].fullName===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of fullName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].fullName === typeof data['assistant_fullName'+j+u]) {\r",
									"          pm.expect(data['assistant_fullName'+j+u]).to.eql(jsonValue.assistant[u].fullName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].fullName, data['assistant_fullName'+j+u], function () { });\r",
									"\r",
									"          var confullName = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].fullName).to.eql(confullName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : emails   *********\r",
									"  pm.test(\"Assert Type of email\"+j, function () {\r",
									"    if(jsonValue.assistant[u].email===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of email\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].email === typeof data['assistant_email'+j+u]) {\r",
									"          pm.expect(data['assistant_email'+j+u]).to.eql(jsonValue.assistant[u].email);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].email, data['assistant_email'+j+u], function () { });\r",
									"\r",
									"          var conemail = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].email).to.eql(conemail);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : extensions   *********\r",
									"  pm.test(\"Assert Type of extension\"+j, function () {\r",
									"    if(jsonValue.assistant[u].extension===null){\r",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of extension\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assistant[u].extension === typeof data['assistant_extension'+j+u]) {\r",
									"          pm.expect(data['assistant_extension'+j+u]).to.eql(jsonValue.assistant[u].extension);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assistant[u].extension, data['assistant_extension'+j+u], function () { });\r",
									"\r",
									"          var conextension = conversionData;\r",
									"          pm.expect(jsonValue.assistant[u].extension).to.eql(conextension);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"    }\r",
									"  });\r",
									"}\r",
									"\r",
									"// Verifying Qualification assertions:\r",
									"for(var m=0;m<jsonValue.qualifications.length;m++){\r",
									"\r",
									"  //*******Assertion of Key : earnedAts   *********\r",
									"  pm.test(\"Assert Type of earnedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].earnedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of earnedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].earnedAt === typeof data['qualifications_earnedAt'+j+m]) {\r",
									"          pm.expect(data['qualifications_earnedAt'+j+m]).to.eql(jsonValue.qualifications[m].earnedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].earnedAt, data['qualifications_earnedAt'+j+m], function () { });\r",
									"\r",
									"          var conearnedAt = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].earnedAt).to.eql(conearnedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].title === typeof data['qualifications_title'+j+m]) {\r",
									"          pm.expect(data['qualifications_title'+j+m]).to.eql(jsonValue.qualifications[m].title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].title, data['qualifications_title'+j+m], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : institutions   *********\r",
									"  pm.test(\"Assert Type of institution\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].institution).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of institution\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].institution === typeof data['qualifications_institution'+j+m]) {\r",
									"          pm.expect(data['qualifications_institution'+j+m]).to.eql(jsonValue.qualifications[m].institution);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].institution, data['qualifications_institution'+j+m], function () { });\r",
									"\r",
									"          var coninstitution = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].institution).to.eql(coninstitution);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : countrys   *********\r",
									"  pm.test(\"Assert Type of country\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].country).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of country\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.qualifications[m].country === typeof data['qualifications_country'+j+m]) {\r",
									"          pm.expect(data['qualifications_country'+j+m]).to.eql(jsonValue.qualifications[m].country);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.qualifications[m].country, data['qualifications_country'+j+m], function () { });\r",
									"\r",
									"          var concountry = conversionData;\r",
									"          pm.expect(jsonValue.qualifications[m].country).to.eql(concountry);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"}\r",
									"\r",
									"//verifying the contactDetails assertions:\r",
									"\r",
									"for(var n=0;n<jsonValue.contactDetails.length;n++){\r",
									"\r",
									"//*******Assertion of Key : labels   *********\r",
									"  pm.test(\"Assert Type of label\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].label).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of label\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].label === typeof data['contactDetails_label'+j+n]) {\r",
									"          pm.expect(data['contactDetails_label'+j+n]).to.eql(jsonValue.contactDetails[n].label);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].label, data['contactDetails_label'+j+n], function () { });\r",
									"\r",
									"          var conlabel = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].label).to.eql(conlabel);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : values   *********\r",
									"  pm.test(\"Assert Type of value\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].value).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of value\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].value === typeof data['contactDetails_value'+j+n]) {\r",
									"          pm.expect(data['contactDetails_value'+j+n]).to.eql(jsonValue.contactDetails[n].value);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].value, data['contactDetails_value'+j+n], function () { });\r",
									"\r",
									"          var convalue = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].value).to.eql(convalue);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : icons   *********\r",
									"  pm.test(\"Assert Type of icon\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].icon).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of icon\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].icon === typeof data['contactDetails_icon'+j+n]) {\r",
									"          pm.expect(data['contactDetails_icon'+j+n]).to.eql(jsonValue.contactDetails[n].icon);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].icon, data['contactDetails_icon'+j+n], function () { });\r",
									"\r",
									"          var conicon = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].icon).to.eql(conicon);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isDefaults   *********\r",
									"  pm.test(\"Assert Type of isDefault\"+j+n, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].isDefault).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isDefault\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].isDefault === typeof data['contactDetails_isDefault'+j+n]) {\r",
									"          pm.expect(data['contactDetails_isDefault'+j+n]).to.eql(jsonValue.contactDetails[n].isDefault);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].isDefault, data['contactDetails_isDefault'+j+n], function () { });\r",
									"\r",
									"          var conisDefault = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].isDefault).to.eql(conisDefault);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : lastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].lastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of lastModifiedAt\"+j+n, function () {\r",
									"\r",
									"        if (typeof jsonValue.contactDetails[n].lastModifiedAt === typeof data['contactDetails_lastModifiedAt'+j+n]) {\r",
									"          pm.expect(data['contactDetails_lastModifiedAt'+j+n]).to.eql(jsonValue.contactDetails[n].lastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.contactDetails[n].lastModifiedAt, data['contactDetails_lastModifiedAt'+j+n], function () { });\r",
									"\r",
									"          var conlastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.contactDetails[n].lastModifiedAt).to.eql(conlastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//Workhistory assertions:\r",
									"\r",
									"for(var t=0;t<jsonValue.workHistory.length;t++){\r",
									"\r",
									"//*******Assertion of Key : startedAts   *********\r",
									"  pm.test(\"Assert Type of startedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].startedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of startedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].startedAt === typeof data['workHistory_startedAt'+j+t]) {\r",
									"          pm.expect(data['workHistory_startedAt'+j+t]).to.eql(jsonValue.workHistory[t].startedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].startedAt, data['workHistory_startedAt'+j+t], function () { });\r",
									"\r",
									"          var constartedAt = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].startedAt).to.eql(constartedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : endedAts   *********\r",
									"  pm.test(\"Assert Type of endedAt\"+j, function () {\r",
									"    if(jsonValue.workHistory[t].endedAt===null){\r",
									"       var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of endedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].endedAt === typeof data['workHistory_endedAt'+j+t]) {\r",
									"          pm.expect(data['workHistory_endedAt'+j+t]).to.eql(jsonValue.workHistory[t].endedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].endedAt, data['workHistory_endedAt'+j+t], function () { });\r",
									"\r",
									"          var conendedAt = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].endedAt).to.eql(conendedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : titles   *********\r",
									"  pm.test(\"Assert Type of title\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].title).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of title\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].title === typeof data['workHistory_title'+j+t]) {\r",
									"          pm.expect(data['workHistory_title'+j+t]).to.eql(jsonValue.workHistory[t].title);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].title, data['workHistory_title'+j+t], function () { });\r",
									"\r",
									"          var contitle = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].title).to.eql(contitle);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : companys   *********\r",
									"  pm.test(\"Assert Type of company\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].company).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of company\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].company === typeof data['workHistory_company'+j+t]) {\r",
									"          pm.expect(data['workHistory_company'+j+t]).to.eql(jsonValue.workHistory[t].company);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].company, data['workHistory_company'+j+t], function () { });\r",
									"\r",
									"          var concompany = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].company).to.eql(concompany);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : countrys   *********\r",
									"  pm.test(\"Assert Type of country\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].country).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of country\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].country === typeof data['workHistory_country'+j+t]) {\r",
									"          pm.expect(data['workHistory_country'+j+t]).to.eql(jsonValue.workHistory[t].country);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].country, data['workHistory_country'+j+t], function () { });\r",
									"\r",
									"          var concountry = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].country).to.eql(concountry);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isHireds   *********\r",
									"  pm.test(\"Assert Type of isHired\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isHired).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isHired\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].isHired === typeof data['workHistory_isHired'+j+t]) {\r",
									"          pm.expect(data['workHistory_isHired'+j+t]).to.eql(jsonValue.workHistory[t].isHired);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].isHired, data['workHistory_isHired'+j+t], function () { });\r",
									"\r",
									"          var conisHired = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].isHired).to.eql(conisHired);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : isNEDs   *********\r",
									"  pm.test(\"Assert Type of isNED\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isNED).to.be.eql(data['typeOfBoolean']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of isNED\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].isNED === typeof data['workHistory_isNED'+j+t]) {\r",
									"          pm.expect(data['workHistory_isNED'+j+t]).to.eql(jsonValue.workHistory[t].isNED);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].isNED, data['workHistory_isNED'+j+t], function () { });\r",
									"\r",
									"          var conisNED = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].isNED).to.eql(conisNED);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : sequenceNumbers   *********\r",
									"  pm.test(\"Assert Type of sequenceNumber\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].sequenceNumber).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of sequenceNumber\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.workHistory[t].sequenceNumber === typeof data['workHistory_sequenceNumber'+j+t]) {\r",
									"          pm.expect(data['workHistory_sequenceNumber'+j+t]).to.eql(jsonValue.workHistory[t].sequenceNumber);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.workHistory[t].sequenceNumber, data['workHistory_sequenceNumber'+j+t], function () { });\r",
									"\r",
									"          var consequenceNumber = conversionData;\r",
									"          pm.expect(jsonValue.workHistory[t].sequenceNumber).to.eql(consequenceNumber);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"// Workhistory Compensation assertion\r",
									"jsonWorkHistory=jsonValue.workHistory[t]\r",
									"if(jsonWorkHistory.compensation===null){\r",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation).to.be.eql(data['typeOfObject']);\r",
									"  });\r",
									"}else{\r",
									"\r",
									"//*******Assertion of Key : currencyIds   *********\r",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.currencyId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of currencyId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.currencyId === typeof data['workHistory_compensation_currencyId'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_currencyId'+j+t]).to.eql(jsonWorkHistory.compensation.currencyId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.currencyId, data['workHistory_compensation_currencyId'+j+t], function () { });\r",
									"\r",
									"          var concurrencyId = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.currencyId).to.eql(concurrencyId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : baseSalarys   *********\r",
									"  pm.test(\"Assert Type of baseSalary\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.baseSalary).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of baseSalary\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.baseSalary === typeof data['workHistory_compensation_baseSalary'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_baseSalary'+j+t]).to.eql(jsonWorkHistory.compensation.baseSalary);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.baseSalary, data['workHistory_compensation_baseSalary'+j+t], function () { });\r",
									"\r",
									"          var conbaseSalary = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.baseSalary).to.eql(conbaseSalary);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : totalEstimatedCompensations   *********\r",
									"  pm.test(\"Assert Type of totalEstimatedCompensation\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.totalEstimatedCompensation).to.be.eql(data['typeOfNumber']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of totalEstimatedCompensation\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.totalEstimatedCompensation === typeof data['workHistory_compensation_totalEstimatedCompensation'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_totalEstimatedCompensation'+j+t]).to.eql(jsonWorkHistory.compensation.totalEstimatedCompensation);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.totalEstimatedCompensation, data['workHistory_compensation_totalEstimatedCompensation'+j+t], function () { });\r",
									"\r",
									"          var contotalEstimatedCompensation = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.totalEstimatedCompensation).to.eql(contotalEstimatedCompensation);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : compensationDates   *********\r",
									"  pm.test(\"Assert Type of compensationDate\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.compensationDate).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of compensationDate\"+j, function () {\r",
									"\r",
									"        if (typeof jsonWorkHistory.compensation.compensationDate === typeof data['workHistory_compensation_compensationDate'+j+t]) {\r",
									"          pm.expect(data['workHistory_compensation_compensationDate'+j+t]).to.eql(jsonWorkHistory.compensation.compensationDate);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonWorkHistory.compensation.compensationDate, data['workHistory_compensation_compensationDate'+j+t], function () { });\r",
									"\r",
									"          var concompensationDate = conversionData;\r",
									"          pm.expect(jsonWorkHistory.compensation.compensationDate).to.eql(concompensationDate);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"}\r",
									"\r",
									"//*******Assertion of Key : blocks   *********\r",
									"  pm.test(\"Assert Type of blocks\"+j, function () {\r",
									"    \r",
									"    var testResult = pm.expect(typeof jsonValue.blocks).to.be.eql(data['typeOfObject']);\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of blocks\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.blocks === typeof data['blocks'+j]) {\r",
									"          pm.expect(data['blocks'+j]).to.eql(jsonValue.blocks);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.blocks, data['blocks'+j], function () { });\r",
									"\r",
									"          var conblocks = conversionData;\r",
									"          pm.expect(jsonValue.blocks).to.eql(conblocks);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : geoMobilityNotess   *********\r",
									"  pm.test(\"Assert Type of geoMobilityNotes\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.geoMobilityNotes).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of geoMobilityNotes\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.geoMobilityNotes === typeof data['geoMobilityNotes'+j]) {\r",
									"          pm.expect(data['geoMobilityNotes'+j]).to.eql(jsonValue.geoMobilityNotes);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.geoMobilityNotes, data['geoMobilityNotes'+j], function () { });\r",
									"\r",
									"          var congeoMobilityNotes = conversionData;\r",
									"          pm.expect(jsonValue.geoMobilityNotes).to.eql(congeoMobilityNotes);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : birthdays   *********\r",
									"  pm.test(\"Assert Type of birthday\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.birthday).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of birthday\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.birthday === typeof data['birthday'+j]) {\r",
									"          pm.expect(data['birthday'+j]).to.eql(jsonValue.birthday);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.birthday, data['birthday'+j], function () { });\r",
									"\r",
									"          var conbirthday = conversionData;\r",
									"          pm.expect(jsonValue.birthday).to.eql(conbirthday);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : principalNationalityIds   *********\r",
									"  pm.test(\"Assert Type of principalNationalityId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.principalNationalityId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of principalNationalityId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.principalNationalityId === typeof data['principalNationalityId'+j]) {\r",
									"          pm.expect(data['principalNationalityId'+j]).to.eql(jsonValue.principalNationalityId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.principalNationalityId, data['principalNationalityId'+j], function () { });\r",
									"\r",
									"          var conprincipalNationalityId = conversionData;\r",
									"          pm.expect(jsonValue.principalNationalityId).to.eql(conprincipalNationalityId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//Launguages assertions:\r",
									"for(var s=0;s<jsonValue.languages.length;s++){\r",
									"//*******Assertion of Key : languageIds   *********\r",
									"  pm.test(\"Assert Type of languageId\"+j+s, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].languageId).to.be.eql(data['typeOfString']);\r",
									"   \r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of languageId\"+j+s, function () {\r",
									"\r",
									"        if (typeof jsonValue.languages[s].languageId === typeof data['languages_languageId'+j+s]) {\r",
									"          pm.expect(data['languages_languageId'+j+s]).to.eql(jsonValue.languages[s].languageId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.languages[s].languageId, data['languages_languageId'+j+s], function () { });\r",
									"\r",
									"          var conlanguageId = conversionData;\r",
									"          pm.expect(jsonValue.languages[s].languageId).to.eql(conlanguageId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : fluencyIds   *********\r",
									"  pm.test(\"Assert Type of fluencyId\"+j+s, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].fluencyId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of fluencyId\"+j+s, function () {\r",
									"\r",
									"        if (typeof jsonValue.languages[s].fluencyId === typeof data['languages_fluencyId'+j+s]) {\r",
									"          pm.expect(data['languages_fluencyId'+j+s]).to.eql(jsonValue.languages[s].fluencyId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.languages[s].fluencyId, data['languages_fluencyId'+j+s], function () { });\r",
									"\r",
									"          var confluencyId = conversionData;\r",
									"          pm.expect(jsonValue.languages[s].fluencyId).to.eql(confluencyId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//*******Assertion of Key : homeCountryIds   *********\r",
									"  pm.test(\"Assert Type of homeCountryId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.homeCountryId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of homeCountryId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.homeCountryId === typeof data['homeCountryId'+j]) {\r",
									"          pm.expect(data['homeCountryId'+j]).to.eql(jsonValue.homeCountryId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.homeCountryId, data['homeCountryId'+j], function () { });\r",
									"\r",
									"          var conhomeCountryId = conversionData;\r",
									"          pm.expect(jsonValue.homeCountryId).to.eql(conhomeCountryId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : maritalStatusIds   *********\r",
									"  pm.test(\"Assert Type of maritalStatusId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.maritalStatusId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of maritalStatusId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.maritalStatusId === typeof data['maritalStatusId'+j]) {\r",
									"          pm.expect(data['maritalStatusId'+j]).to.eql(jsonValue.maritalStatusId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.maritalStatusId, data['maritalStatusId'+j], function () { });\r",
									"\r",
									"          var conmaritalStatusId = conversionData;\r",
									"          pm.expect(jsonValue.maritalStatusId).to.eql(conmaritalStatusId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : spouseNames   *********\r",
									"  pm.test(\"Assert Type of spouseName\"+j, function () {\r",
									"    if(jsonValue.spouseName===null){\r",
									"        var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfObject']);\r",
									"    }else{\r",
									"    var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of spouseName\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.spouseName === typeof data['spouseName'+j]) {\r",
									"          pm.expect(data['spouseName'+j]).to.eql(jsonValue.spouseName);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.spouseName, data['spouseName'+j], function () { });\r",
									"\r",
									"          var conspouseName = conversionData;\r",
									"          pm.expect(jsonValue.spouseName).to.eql(conspouseName);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  }\r",
									"  });\r",
									"\r",
									"\r",
									"//*******Assertion of Key : childrens   *********\r",
									"  pm.test(\"Assert Type of children\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.children).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of children\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.children === typeof data['children'+j]) {\r",
									"          pm.expect(data['children'+j]).to.eql(jsonValue.children);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.children, data['children'+j], function () { });\r",
									"\r",
									"          var conchildren = conversionData;\r",
									"          pm.expect(jsonValue.children).to.eql(conchildren);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : whoKnowsBests   *********\r",
									"  pm.test(\"Assert Type of whoKnowsBest\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.whoKnowsBest).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of whoKnowsBest\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.whoKnowsBest === typeof data['whoKnowsBest'+j]) {\r",
									"          pm.expect(data['whoKnowsBest'+j]).to.eql(jsonValue.whoKnowsBest);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.whoKnowsBest, data['whoKnowsBest'+j], function () { });\r",
									"\r",
									"          var conwhoKnowsBest = conversionData;\r",
									"          pm.expect(jsonValue.whoKnowsBest).to.eql(conwhoKnowsBest);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : relationshipss   *********\r",
									"  pm.test(\"Assert Type of relationships\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.relationships).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of relationships\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.relationships === typeof data['relationships'+j]) {\r",
									"          pm.expect(data['relationships'+j]).to.eql(jsonValue.relationships);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.relationships, data['relationships'+j], function () { });\r",
									"\r",
									"          var conrelationships = conversionData;\r",
									"          pm.expect(jsonValue.relationships).to.eql(conrelationships);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"  \r",
									"//*******Assertion of Key : assignmentIdss   *********\r",
									"for(var v=0;v<jsonValue.assignmentIds.length;v++){\r",
									"\r",
									"  pm.test(\"Assert Type of assignmentIds\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.assignmentIds).to.be.eql(data['typeOfObject']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of assignmentIds\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.assignmentIds[v] === typeof data['assignmentIds'+v]) {\r",
									"          pm.expect(data['assignmentIds'+v]).to.eql(jsonValue.assignmentIds[v]);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.assignmentIds[v], data['assignmentIds'+j], function () { });\r",
									"\r",
									"          var conassignmentIds = conversionData;\r",
									"          pm.expect(jsonValue.assignmentIds[v]).to.eql(conassignmentIds);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}\r",
									"\r",
									"//*******Assertion of Key : addedToMyRelationshipsAts   *********\r",
									"  pm.test(\"Assert Type of addedToMyRelationshipsAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.addedToMyRelationshipsAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of addedToMyRelationshipsAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.addedToMyRelationshipsAt === typeof data['addedToMyRelationshipsAt'+j]) {\r",
									"          pm.expect(data['addedToMyRelationshipsAt'+j]).to.eql(jsonValue.addedToMyRelationshipsAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.addedToMyRelationshipsAt, data['addedToMyRelationshipsAt'+j], function () { });\r",
									"\r",
									"          var conaddedToMyRelationshipsAt = conversionData;\r",
									"          pm.expect(jsonValue.addedToMyRelationshipsAt).to.eql(conaddedToMyRelationshipsAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : relationshipTypeIds   *********\r",
									"  pm.test(\"Assert Type of relationshipTypeId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.relationshipTypeId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of relationshipTypeId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.relationshipTypeId === typeof data['relationshipTypeId'+j]) {\r",
									"          pm.expect(data['relationshipTypeId'+j]).to.eql(jsonValue.relationshipTypeId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.relationshipTypeId, data['relationshipTypeId'+j], function () { });\r",
									"\r",
									"          var conrelationshipTypeId = conversionData;\r",
									"          pm.expect(jsonValue.relationshipTypeId).to.eql(conrelationshipTypeId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : nextStepss   *********\r",
									"  pm.test(\"Assert Type of nextSteps\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.nextSteps).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of nextSteps\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.nextSteps === typeof data['nextSteps'+j]) {\r",
									"          pm.expect(data['nextSteps'+j]).to.eql(jsonValue.nextSteps);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.nextSteps, data['nextSteps'+j], function () { });\r",
									"\r",
									"          var connextSteps = conversionData;\r",
									"          pm.expect(jsonValue.nextSteps).to.eql(connextSteps);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : relationshipLastModifiedAts   *********\r",
									"  pm.test(\"Assert Type of relationshipLastModifiedAt\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonValue.relationshipLastModifiedAt).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of relationshipLastModifiedAt\"+j, function () {\r",
									"\r",
									"        if (typeof jsonValue.relationshipLastModifiedAt === typeof (pm.environment.get(\"relationshipLastModifiedAt\"))) {\r",
									"          \r",
									"          pm.expect(pm.environment.get(\"relationshipLastModifiedAt\")).to.eql(jsonValue.relationshipLastModifiedAt);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonValue.relationshipLastModifiedAt, pm.environment.get(\"relationshipLastModifiedAt\"), function () { });\r",
									"\r",
									"          var conrelationshipLastModifiedAt = conversionData;\r",
									"          pm.expect(jsonValue.relationshipLastModifiedAt).to.eql(conrelationshipLastModifiedAt);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"\r",
									"//*******Assertion of Key : fileNoteIds   *********\r",
									"  pm.test(\"Assert Type of fileNoteId\"+j, function () {\r",
									"    var testResult = pm.expect(typeof jsonData[j].fileNoteId).to.be.eql(data['typeOfString']);\r",
									"\r",
									"    if (testResult) {\r",
									"      pm.test(\"Assert value of fileNoteId\"+j, function () {\r",
									"\r",
									"        if (typeof jsonData[j].fileNoteId === typeof pm.environment.get(\"fileNoteId\")) {\r",
									"          pm.expect(pm.environment.get(\"fileNoteId\")).to.eql(jsonData[j].fileNoteId);\r",
									"\r",
									"        }\r",
									"        else {\r",
									"          valCallBack(jsonData[j].fileNoteId, pm.environment.get(\"fileNoteId\"), function () { });\r",
									"\r",
									"          var confileNoteId = conversionData;\r",
									"          pm.expect(jsonData[j].fileNoteId).to.eql(confileNoteId);\r",
									"        }\r",
									"      });\r",
									"    }\r",
									"    else { postman.setNextRequest(); }\r",
									"  });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "{{userid}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"personId\": \"{{peopleId}}\",\r\n    \"relationshipTypeId\": \"{{relationshipTypeId}}\",\r\n    \"nextSteps\": \"{{nextSteps}}\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}//my-relationships",
							"host": [
								"{{url}}"
							],
							"path": [
								"",
								"my-relationships"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CallList",
			"item": [
				{
					"name": "Delete_Remove from Call List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var conversionData;",
									"",
									"function valCallBack(type,value,callback)",
									"{",
									"    if(typeof(type)==='string')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        conversionData=value.toString();",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    else if(typeof(type)==='boolean'){",
									"        switch(typeof value){",
									"            case \"string\":",
									"               switch(value.toLowerCase()) ",
									"                         {",
									"            case \"false\": ",
									"                conversionData= false;",
									"                callback(conversionData);",
									"                break;   ",
									"            case \"true\": ",
									"                conversionData= true;",
									"                callback(conversionData);",
									"                break; ",
									"            default: conversionData=true;",
									"                callback(conversionData);",
									"              ",
									"          }",
									"",
									"                callback(conversionData);",
									"                break;  ",
									"        }",
									"    }",
									"    else if(typeof(type)==='number')",
									"    {",
									"        ",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"string\":",
									"        conversionData=parseInt(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }else if(typeof(type)==='undefined')",
									"    {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    }else if(typeof(type)==='object')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        var num1=value.toString();",
									"        conversionData=JSON.parse(num1);",
									"        callback(conversionData);",
									"        break;",
									"      case \"string\":",
									"        conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    ",
									"    else if(typeof(type)==='function')",
									"    {",
									"        ",
									"        callback(conversionData);",
									"    }",
									"    return  conversionData;",
									"}",
									"",
									"",
									"",
									"//Response code is 200 or 201 as per the request type",
									"var jsonRequestData=pm.request.method;",
									"//Response code is 200 or 201 as per the request type",
									"if(jsonRequestData === \"GET\" ){",
									"var responseCodeAssertion=pm.test(\"API call successfull.:Access token created\", function () {",
									"    ",
									"    var code= parseInt(pm.environment.get(\"responsestat_200\"));",
									"    pm.response.to.have.status(code);",
									"    ",
									"    pm.test(\"Body is not Blank\", function () {",
									"    jsonBodyData=pm.response.to.have.body();",
									"    pm.expect(jsonBodyData).to.not.be.empty;",
									"});",
									"",
									"//Assert the current environment",
									"pm.test(\"Check if environment is production\", function () {",
									"      pm.expect(pm.environment.get(\"env\")).to.equal(\"OM\");",
									"      console.log(pm.environment.get(\"env\"));",
									"  });",
									"",
									"});",
									"    ",
									"}",
									"else if(jsonRequestData === \"POST\"){",
									"var responseCodeAssertion=pm.test(\"API call successful12345.:Access token created\", function () {",
									"   var code= parseInt(pm.environment.get(\"responsestat_200\"));    ",
									"    pm.response.to.have.status(code);",
									"    ",
									"    pm.test(\"Body is not Blank\", function () {",
									"    jsonBodyData=pm.response.to.have.body();",
									"    pm.expect(jsonBodyData).to.not.be.empty;",
									"});",
									"",
									"//Assert the current environment",
									"pm.test(\"Check if environment is production\", function () {",
									"      pm.expect(pm.environment.get(\"env\")).to.equal(\"OM\");",
									"      console.log(pm.environment.get(\"env\"));",
									"  });",
									"",
									"});",
									"    ",
									"}",
									"",
									"if(responseCodeAssertion){",
									"    ",
									"    ",
									"const paramsString = request.url.split('?')[1];",
									"const eachParamArray = paramsString.split('&');",
									"var params = eachParamArray[2].split(\"=\")[1].split(\",\");",
									"console.log(\"count of id as parameter : \"+params.length);",
									"for(var j =0 ; j< params.length ; j++){",
									"    console.log(\"Response for ids : \"+params[j]);",
									" ",
									"    ",
									"//*******Assertion of Key : boardexStatus Call List******",
									"pm.test(\"Assert Type of boardexStatus CallList \"+j, function(){",
									"var valBoardexStatus_response=jsonData[j].boardexStatus;",
									"var valBoardexStatus_dataSheet=pm.variables.get(\"boardexStatus\"+j);",
									"var typeOfBoardexStatus_dataSheet= pm.variables.get(\"typeOfBoardexStatus\");",
									"var typeOfBoardexStatus_response=typeof valBoardexStatus_response;",
									"",
									"var testResult =  pm.expect(typeOfBoardexStatus_dataSheet).to.be.eql(typeof valBoardexStatus_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of boardexStatus CallList\" +j, function()",
									"    {",
									"        ",
									"      if(typeof(valBoardexStatus_dataSheet) == typeof(valBoardexStatus_response)){",
									"",
									"        pm.expect(valBoardexStatus_response).to.eql(valBoardexStatus_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBoardexStatus_response,valBoardexStatus_dataSheet, function(){});",
									"       ",
									"       var ConValueBoardexStatus=conversionData;",
									"       pm.expect(valBoardexStatus_response).to.eql(ConValueBoardexStatus);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : boardexData Call List******",
									"",
									"",
									"pm.test(\"Assert Type of boardexData CallList\"+j, function(){",
									"var valBoardexData_response=jsonData[j].boardexData;",
									"var valBoardexData_dataSheet=pm.variables.get(\"callList_boardexData\"+j);",
									"var typeOfBoardexData_dataSheet= pm.variables.get(\"typeOfBoardexData\");",
									"var typeOfBoardexData_response=typeof valBoardexData_response;",
									"",
									"var testResult =  pm.expect(typeOfBoardexData_dataSheet).to.be.eql(typeof valBoardexData_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of boardexData CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valBoardexData_dataSheet) == typeof(valBoardexData_response)){",
									"",
									"        pm.expect(valBoardexData_response).to.eql(valBoardexData_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBoardexData_response,valBoardexData_dataSheet, function(){});",
									"       ",
									"       var ConValueBoardexData=conversionData;",
									"       pm.expect(valBoardexData_response).to.eql(ConValueBoardexData);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : DCFStatus Call List******",
									"",
									"pm.test(\"Assert Type of DCFStatus CallList\"+j, function(){",
									"var valDCFStatus_response=jsonData[j].DCFStatus;",
									"var valDCFStatus_dataSheet=pm.variables.get(\"callList_DCFStatus\"+j);",
									"var typeOfDCFStatus_dataSheet= pm.variables.get(\"typeOfDCFStatus\");",
									"var typeOfDCFStatus_response=typeof valDCFStatus_response;",
									"",
									"var testResult =  pm.expect(typeOfDCFStatus_dataSheet).to.be.eql(typeof valDCFStatus_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of DCFStatus CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valDCFStatus_dataSheet) == typeof(valDCFStatus_response)){",
									"",
									"        pm.expect(valDCFStatus_response).to.eql(valDCFStatus_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valDCFStatus_response,valDCFStatus_dataSheet, function(){});",
									"       ",
									"       var ConValueDCFStatus=conversionData;",
									"       pm.expect(valDCFStatus_response).to.eql(ConValueDCFStatus);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : createdAt Call List******",
									"",
									"pm.test(\"Assert Type of createdAt CallList\"+j, function(){",
									"var valCreatedAt_response=jsonData[j].createdAt;",
									"var valCreatedAt_dataSheet=pm.variables.get(\"createdAt\"+j);",
									"var typeOfCreatedAt_dataSheet= pm.variables.get(\"typeOfCreatedAt\");",
									"var typeOfCreatedAt_response=typeof valCreatedAt_response;",
									"",
									"var testResult =  pm.expect(typeOfCreatedAt_dataSheet).to.be.eql(typeof valCreatedAt_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of createdAt CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valCreatedAt_dataSheet) == typeof(valCreatedAt_response)){",
									"",
									"        pm.expect(valCreatedAt_response).to.eql(valCreatedAt_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valCreatedAt_response,valCreatedAt_dataSheet, function(){});",
									"       ",
									"       var ConValueCreatedAt=conversionData;",
									"       pm.expect(valCreatedAt_response).to.eql(ConValueCreatedAt);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : lastModifiedAt Call List******",
									"pm.test(\"Assert Type of lastModifiedAt CallList\"+j, function(){",
									"var valLastModifiedAt_response=jsonData[j].lastModifiedAt;",
									"var valLastModifiedAt_dataSheet=pm.variables.get(\"lastModifiedAt\"+j);",
									"var typeOfLastModifiedAt_dataSheet= pm.variables.get(\"typeOfLastModifiedAt\");",
									"var typeOfLastModifiedAt_response=typeof valLastModifiedAt_response;",
									"",
									"var testResult =  pm.expect(typeOfLastModifiedAt_dataSheet).to.be.eql(typeof valLastModifiedAt_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of lastModifiedAt CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLastModifiedAt_dataSheet) == typeof(valLastModifiedAt_response)){",
									"",
									"        pm.expect(valLastModifiedAt_response).to.eql(valLastModifiedAt_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLastModifiedAt_response,valLastModifiedAt_dataSheet, function(){});",
									"       ",
									"       var ConValueLastModifiedAt=conversionData;",
									"       pm.expect(valLastModifiedAt_response).to.eql(ConValueLastModifiedAt);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : id Call List******",
									"pm.test(\"Assert Type of id CallList\"+j, function(){",
									"var valId_response=jsonData[j].id;",
									"var valId_dataSheet=pm.variables.get(\"id\"+j);",
									"var typeOfId_dataSheet= pm.variables.get(\"typeOfId\");",
									"var typeOfId_response=typeof valId_response;",
									"",
									"var testResult =  pm.expect(typeOfId_dataSheet).to.be.eql(typeof valId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of id CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valId_dataSheet) == typeof(valId_response)){",
									"",
									"        pm.expect(valId_response).to.eql(valId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valId_response,valId_dataSheet, function(){});",
									"       ",
									"       var ConValueId=conversionData;",
									"       pm.expect(valId_response).to.eql(ConValueId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : firstName Call List******",
									"",
									"",
									"pm.test(\"Assert Type of firstName CallList\"+j, function(){",
									"var valFirstName_response=jsonData[j].firstName;",
									"var valFirstName_dataSheet=pm.variables.get(\"firstName\"+j);",
									"var typeOfFirstName_dataSheet= pm.variables.get(\"typeOfFirstName\");",
									"var typeOfFirstName_response=typeof valFirstName_response;",
									"",
									"var testResult =  pm.expect(typeOfFirstName_dataSheet).to.be.eql(typeof valFirstName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of firstName CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valFirstName_dataSheet) == typeof(valFirstName_response)){",
									"",
									"        pm.expect(valFirstName_response).to.eql(valFirstName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valFirstName_response,valFirstName_dataSheet, function(){});",
									"       ",
									"       var ConValueFirstName=conversionData;",
									"       pm.expect(valFirstName_response).to.eql(ConValueFirstName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"",
									"        ",
									"      if(typeof(valFirstName_dataSheet) == typeof(valFirstName_response)){",
									"",
									"        pm.expect(valFirstName_response).to.eql(valFirstName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valFirstName_response,valFirstName_dataSheet, function(){});",
									"       ",
									"       var ConValueFirstName=conversionData;",
									"       pm.expect(valFirstName_response).to.eql(ConValueFirstName);      ",
									"        }",
									"    ",
									"    ",
									"    ",
									"    ",
									"",
									"//*******Assertion of Key : lastName Call List******",
									"",
									"pm.test(\"Assert Type of lastName CallList\"+j, function(){",
									"var valLastName_response=jsonData[j].lastName;",
									"var valLastName_dataSheet=pm.variables.get(\"lastName\"+j);",
									"var typeOfLastName_dataSheet= pm.variables.get(\"typeOfLastName\");",
									"var typeOfLastName_response=typeof valLastName_response;",
									"",
									"var testResult =  pm.expect(typeOfLastName_dataSheet).to.be.eql(typeof valLastName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of lastName CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLastName_dataSheet) == typeof(valLastName_response)){",
									"",
									"        pm.expect(valLastName_response).to.eql(valLastName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLastName_response,valLastName_dataSheet, function(){});",
									"       ",
									"       var ConValueLastName=conversionData;",
									"       pm.expect(valLastName_response).to.eql(ConValueLastName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : group1 Call List******",
									"pm.test(\"Assert Type of group1 CallList\"+j, function(){",
									"var valGroup1_response=jsonData[j].group1;",
									"var valGroup1_dataSheet=pm.variables.get(\"group1\"+j);",
									"var typeOfGroup1_dataSheet= pm.variables.get(\"typeOfGroup1\");",
									"var typeOfGroup1_response=typeof valGroup1_response;",
									"",
									"var testResult =  pm.expect(typeOfGroup1_dataSheet).to.be.eql(typeof valGroup1_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of group1 CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGroup1_dataSheet) == typeof(valGroup1_response)){",
									"",
									"        pm.expect(valGroup1_response).to.eql(valGroup1_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGroup1_response,valGroup1_dataSheet, function(){});",
									"       ",
									"       var ConValueGroup1=conversionData;",
									"       pm.expect(valGroup1_response).to.eql(ConValueGroup1);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : group2 Call List******",
									"",
									"pm.test(\"Assert Type of group2 CallList\"+j, function(){",
									"var valGroup2_response=jsonData[j].group2;",
									"var valGroup2_dataSheet=pm.variables.get(\"group2\"+j);",
									"var typeOfGroup2_dataSheet= pm.variables.get(\"typeOfGroup2\");",
									"var typeOfGroup2_response=typeof valGroup2_response;",
									"",
									"var testResult =  pm.expect(typeOfGroup2_dataSheet).to.be.eql(typeof valGroup2_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of group2 CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGroup2_dataSheet) == typeof(valGroup2_response)){",
									"",
									"        pm.expect(valGroup2_response).to.eql(valGroup2_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGroup2_response,valGroup2_dataSheet, function(){});",
									"       ",
									"       var ConValueGroup2=conversionData;",
									"       pm.expect(valGroup2_response).to.eql(ConValueGroup2);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : priorityId Call List******",
									"",
									"pm.test(\"Assert Type of priorityId CallList\"+j, function(){",
									"var valPriorityId_response=jsonData[j].priorityId;",
									"var valPriorityId_dataSheet=pm.variables.get(\"priorityId\"+j);",
									"var typeOfPriorityId_dataSheet= pm.variables.get(\"typeOfPriorityId\");",
									"var typeOfPriorityId_response=typeof valPriorityId_response;",
									"",
									"var testResult =  pm.expect(typeOfPriorityId_dataSheet).to.be.eql(typeof valPriorityId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of priorityId CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valPriorityId_dataSheet) == typeof(valPriorityId_response)){",
									"",
									"        pm.expect(valPriorityId_response).to.eql(valPriorityId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valPriorityId_response,valPriorityId_dataSheet, function(){});",
									"       ",
									"       var ConValuePriorityId=conversionData;",
									"       pm.expect(valPriorityId_response).to.eql(ConValuePriorityId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : todoNote Call List******",
									"",
									"pm.test(\"Assert Type of todoNote CallList\"+j, function(){",
									"var valTodoNote_response=jsonData[j].todoNote;",
									"var valTodoNote_dataSheet=pm.variables.get(\"todoNote\"+j);",
									"var typeOfTodoNote_dataSheet= pm.variables.get(\"typeOfTodoNote\");",
									"var typeOfTodoNote_response=typeof valTodoNote_response;",
									"",
									"var testResult =  pm.expect(typeOfTodoNote_dataSheet).to.be.eql(typeof valTodoNote_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of todoNote CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valTodoNote_dataSheet) == typeof(valTodoNote_response)){",
									"",
									"        pm.expect(valTodoNote_response).to.eql(valTodoNote_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valTodoNote_response,valTodoNote_dataSheet, function(){});",
									"       ",
									"       var ConValueTodoNote=conversionData;",
									"       pm.expect(valTodoNote_response).to.eql(ConValueTodoNote);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : linkedinProfileUrl Call List******",
									"",
									"pm.test(\"Assert Type of linkedinProfileUrl CallList\"+j, function(){",
									"var valLinkedinProfileUrl_response=jsonData[j].linkedinProfileUrl;",
									"var valLinkedinProfileUrl_dataSheet=pm.variables.get(\"linkedinProfileUrl\"+j);",
									"var typeOfLinkedinProfileUrl_dataSheet= pm.variables.get(\"typeOfLinkedinProfileUrl\");",
									"var typeOfLinkedinProfileUrl_response=typeof valLinkedinProfileUrl_response;",
									"",
									"var testResult =  pm.expect(typeOfLinkedinProfileUrl_dataSheet).to.be.eql(typeof valLinkedinProfileUrl_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of linkedinProfileUrl CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLinkedinProfileUrl_dataSheet) == typeof(valLinkedinProfileUrl_response)){",
									"",
									"        pm.expect(valLinkedinProfileUrl_response).to.eql(valLinkedinProfileUrl_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLinkedinProfileUrl_response,valLinkedinProfileUrl_dataSheet, function(){});",
									"       ",
									"       var ConValueLinkedinProfileUrl=conversionData;",
									"       pm.expect(valLinkedinProfileUrl_response).to.eql(ConValueLinkedinProfileUrl);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : assistant Call List******",
									"pm.test(\"Assert Type of assistant CallList\"+j, function(){",
									"var valAssistant_response=jsonData[j].assistant;",
									"var valAssistant_dataSheet=pm.variables.get(\"assistant\"+j);",
									"var typeOfAssistant_dataSheet= pm.variables.get(\"typeOfAssistant\");",
									"var typeOfAssistant_response=typeof valAssistant_response;",
									"",
									"var testResult =  pm.expect(typeOfAssistant_dataSheet).to.be.eql(typeof valAssistant_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of assistant CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valAssistant_dataSheet) == typeof(valAssistant_response)){",
									"",
									"        pm.expect(valAssistant_response).to.eql(valAssistant_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valAssistant_response,valAssistant_dataSheet, function(){});",
									"       ",
									"       var ConValueAssistant=conversionData;",
									"       pm.expect(valAssistant_response).to.eql(ConValueAssistant);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : qualifications Call List******",
									"",
									"pm.test(\"Assert Type of qualifications CallList\"+j, function(){",
									"var valQualifications_response=jsonData[j].qualifications;",
									"var valQualifications_dataSheet=pm.variables.get(\"qualifications\"+j);",
									"var typeOfQualifications_dataSheet= pm.variables.get(\"typeOfQualifications\");",
									"var typeOfQualifications_response=typeof valQualifications_response;",
									"",
									"var testResult =  pm.expect(typeOfQualifications_dataSheet).to.be.eql(typeof valQualifications_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of qualifications CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valQualifications_dataSheet) == typeof(valQualifications_response)){",
									"",
									"        pm.expect(valQualifications_response).to.eql(valQualifications_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valQualifications_response,valQualifications_dataSheet, function(){});",
									"       ",
									"       var ConValueQualifications=conversionData;",
									"       pm.expect(valQualifications_response).to.eql(ConValueQualifications);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of type of : contactDetails Call List******",
									"",
									"var valContactDetails_response=jsonData[j].contactDetails;",
									"var lengthOfResponse = valContactDetails_response.length;",
									"",
									"var typeOfContactDetails_dataSheet= pm.variables.get(\"typeOfContactDetails\");",
									"var typeOfContactDetails_response=typeof valContactDetails_response;",
									"var typeOfContactDetails_label_dataSheet= pm.variables.get(\"typeOfContactDetails_label\");",
									"var typeOfContactDetails_value_dataSheet= pm.variables.get(\"typeOfContactDetails_value\");",
									"var typeOfContactDetails_icon_dataSheet= pm.variables.get(\"typeOfContactDetails_icon\");",
									"var typeOfContactDetails_isDefault_dataSheet= pm.variables.get(\"typeOfContactDetails_isDefault\");",
									"var typeOfContactDetails_lastModifiedAt_dataSheet= pm.variables.get(\"typeOfContactDetails_lastModifiedAt\");",
									"var testResultTypeOf;",
									"pm.test(\"Assert Type of contactDetails CallList\"+j, function(){",
									"var testResultTypeOf = pm.expect(typeOfContactDetails_dataSheet).to.be.eql(typeof valContactDetails_response);",
									"",
									"",
									"",
									"//*******Assertion of Key : contactDetails_label Call List******",
									"",
									"if(testResultTypeOf){",
									"    ",
									"    console.log(\"length.......\"+lengthOfResponse);",
									"    if(lengthOfResponse!=0){",
									"    ",
									"   for(var i=0;i<lengthOfResponse;i++){",
									"    pm.test(\"Assert keys inside contactDetails\",function()",
									"        {",
									"       ",
									"        pm.expect(jsonData[j].contactDetails[i]).to.have.all.keys('label','icon','value','isDefault','lastModifiedAt');",
									"        }); ",
									"    pm.test(\"Assert type of contactDetails_label CallList \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_label_response = typeof (jsonData[j].contactDetails[i].label);",
									"        var valContactDetails_label_datasheet = pm.variables.get(\"contactDetails_label\"+j+i) ;",
									"        var testResultTypeOfLabel = pm.expect(typeOfContactDetails_label_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_label\"));",
									"     ",
									"    if(testResultTypeOfLabel){",
									"    pm.test(\"Assert value contactDetails_label CallList\"+j, function(){",
									"        pm.expect(jsonData[j].contactDetails[i].label).to.be.eql(valContactDetails_label_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"\t",
									"\t//*******Assertion of Key : contactDetails_value Call List******",
									"\t",
									"\t  pm.test(\"Assert type of contactDetails_value CallList \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_value_response = typeof (jsonData[j].contactDetails[i].value);",
									"        var valContactDetails_value_datasheet = pm.variables.get(\"contactDetails_value\"+j+i) ;",
									"        var testResultTypeOfLabel = pm.expect(typeOfContactDetails_value_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_value\"));",
									"     ",
									"    if(testResultTypeOfLabel){",
									"    pm.test(\"Assert value contactDetails_value CallList\"+j, function(){",
									"        pm.expect(jsonData[j].contactDetails[i].value).to.be.eql(valContactDetails_value_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"\t//*******Assertion of Key : contactDetails_icon Call List******",
									"\t",
									"\t  pm.test(\"Assert type of contactDetails_icon CallList \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_icon_response = typeof (jsonData[j].contactDetails[i].icon);",
									"        var valContactDetails_icon_datasheet = pm.variables.get(\"contactDetails_icon\"+j+i) ;",
									"        var testResultTypeOfIcon = pm.expect(typeOfContactDetails_icon_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_icon\"));",
									"     ",
									"    if(testResultTypeOfIcon){",
									"    pm.test(\"Assert value contactDetails_icon CallList\"+j, function(){",
									"        pm.expect(jsonData[j].contactDetails[i].icon).to.be.eql(valContactDetails_icon_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t//*******Assertion of Key : contactDetails_isDefault Call List******",
									"\t\t  pm.test(\"Assert type of contactDetails_isDefault CallList \"+j , function(){",
									"        var valContactDetails_isDefault_response = jsonData[j].contactDetails[i].isDefault;",
									"        var typeOfContactDetails_isDefault_response = typeof (jsonData[j].contactDetails[i].isDefault);",
									"        var valContactDetails_isDefault_dataSheet = pm.variables.get(\"contactDetails_isDefault\"+j+i) ;",
									"        var testResultTypeOfIsDefault = pm.expect(typeOfContactDetails_isDefault_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_isDefault\"));",
									"     ",
									"    if(testResultTypeOfIsDefault){",
									"\t\t if(typeof(valContactDetails_isDefault_dataSheet) == typeof(valContactDetails_isDefault_response))",
									"              {",
									"        ",
									"                pm.expect(valContactDetails_isDefault_response).to.eql(valContactDetails_isDefault_dataSheet); ",
									"                  ",
									"              }",
									"\t\telse",
									"              {",
									"                valCallBack(valContactDetails_isDefault_response,valContactDetails_isDefault_dataSheet, function(){});",
									"               ",
									"               var ConValueContactDetails_isDefault=conversionData;",
									"               pm.expect(valContactDetails_isDefault_response).to.eql(ConValueContactDetails_isDefault);      ",
									"                }",
									"\t}",
									"   else{ postman.setNextRequest();}\t",
									"\t});",
									"",
									"\t//*******Assertion of Key : contactDetails_lastModified Call List******",
									"\t",
									"\t\t",
									"\t  pm.test(\"Assert type of contactDetails_lastModifiedAt CallList \"+j , function(){",
									"        ",
									"        var typeOfContactDetails_lastModifiedAt_response = typeof (jsonData[j].contactDetails[i].lastModifiedAt);",
									"        var valContactDetails_lastModifiedAt_datasheet = pm.variables.get(\"contactDetails_lastModifiedAt\"+j+i) ;",
									"        var testResultTypeOfLastModifiedAt = pm.expect(typeOfContactDetails_lastModifiedAt_response ).to.be.eql(pm.variables.get(\"typeOfContactDetails_lastModifiedAt\"));",
									"     ",
									"    if(testResultTypeOfLastModifiedAt){",
									"    pm.test(\"Assert value contactDetails_lastModifiedAt CallList\"+j, function(){",
									"        pm.expect(jsonData[j].contactDetails[i].lastModifiedAt).to.be.eql(valContactDetails_lastModifiedAt_datasheet);",
									"    });",
									"\t} ",
									"\t});",
									"\t",
									"",
									"",
									"   }",
									"}",
									"",
									"",
									"else {",
									"    ",
									"    pm.test(\"Assert value of contactDetails when empty CallList\"+j, function()",
									"    {",
									"     var valContactDetails_response=jsonData[j].contactDetails;",
									"var valContactDetails_dataSheet=pm.variables.get(\"contactDetails\"+j);",
									"var typeOfContactDetails_dataSheet= pm.variables.get(\"typeOfContactDetails\");",
									"var typeOfContactDetails_response=typeof valContactDetails_response;",
									"",
									"var testResult =  pm.expect(typeOfContactDetails_dataSheet).to.be.eql(typeof valContactDetails_response);",
									"",
									"",
									"      if(typeof(valContactDetails_dataSheet) == typeof(valContactDetails_response)){",
									"",
									"        pm.expect(valContactDetails_response).to.eql(valContactDetails_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valContactDetails_response,valContactDetails_dataSheet, function(){});",
									"       ",
									"       var ConValueContactDetails=conversionData;",
									"       pm.expect(valContactDetails_response).to.eql(ConValueContactDetails);      ",
									"        }",
									"    });",
									"",
									"}",
									"}",
									"else{ postman.setNextRequest();",
									"    ",
									"}",
									"",
									"});",
									"",
									"//*******Assertion of Key : workHistory Call List******",
									"",
									"pm.test(\"Assert Type of workHistory CallList\"+j, function(){",
									"var valWorkHistory_response=jsonData[j].workHistory;",
									"var valWorkHistory_dataSheet=pm.variables.get(\"workHistory\"+j);",
									"var typeOfWorkHistory_dataSheet= pm.variables.get(\"typeOfWorkHistory\");",
									"var typeOfWorkHistory_response=typeof valWorkHistory_response;",
									"",
									"var testResult =  pm.expect(typeOfWorkHistory_dataSheet).to.be.eql(typeof valWorkHistory_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of workHistory CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valWorkHistory_dataSheet) == typeof(valWorkHistory_response)){",
									"",
									"        pm.expect(valWorkHistory_response).to.eql(valWorkHistory_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valWorkHistory_response,valWorkHistory_dataSheet, function(){});",
									"       ",
									"       var ConValueWorkHistory=conversionData;",
									"       pm.expect(valWorkHistory_response).to.eql(ConValueWorkHistory);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : addedToCallListAt Call List******",
									"pm.test(\"Assert Type of addedToCallListAt CallList\"+j, function(){",
									"var valAddedToCallListAt_response=jsonData[j].addedToCallListAt;",
									"var valAddedToCallListAt_dataSheet=pm.variables.get(\"addedToCallListAt\"+j);",
									"var typeOfAddedToCallListAt_dataSheet= pm.variables.get(\"typeOfAddedToCallListAt\");",
									"var typeOfAddedToCallListAt_response=typeof valAddedToCallListAt_response;",
									"",
									"var testResult =  pm.expect(typeOfAddedToCallListAt_dataSheet).to.be.eql(typeof valAddedToCallListAt_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of addedToCallListAt CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valAddedToCallListAt_dataSheet) == typeof(valAddedToCallListAt_response)){",
									"",
									"        pm.expect(valAddedToCallListAt_response).to.eql(valAddedToCallListAt_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valAddedToCallListAt_response,valAddedToCallListAt_dataSheet, function(){});",
									"       ",
									"       var ConValueAddedToCallListAt=conversionData;",
									"       pm.expect(valAddedToCallListAt_response).to.eql(ConValueAddedToCallListAt);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : context Call List******",
									"",
									"pm.test(\"Assert Type of context CallList\"+j, function(){",
									"var valContext_response=jsonData[j].context;",
									"var valContext_dataSheet=pm.variables.get(\"context\"+j);",
									"var typeOfContext_dataSheet= pm.variables.get(\"typeOfContext\");",
									"var typeOfContext_response=typeof valContext_response;",
									"",
									"var testResult =  pm.expect(typeOfContext_dataSheet).to.be.eql(typeof valContext_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of context CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valContext_dataSheet) == typeof(valContext_response)){",
									"",
									"        pm.expect(valContext_response).to.eql(valContext_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valContext_response,valContext_dataSheet, function(){});",
									"       ",
									"       var ConValueContext=conversionData;",
									"       pm.expect(valContext_response).to.eql(ConValueContext);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : contextTypeId Call List******",
									"",
									"    ",
									"pm.test(\"Assert Type of contextTypeId CallList\"+j, function(){",
									"var valContextTypeId_response=jsonData[j].contextTypeId;",
									"var valContextTypeId_dataSheet=pm.variables.get(\"contextTypeId\"+j);",
									"var typeOfContextTypeId_dataSheet= pm.variables.get(\"typeOfContextTypeId\");",
									"var typeOfContextTypeId_response=typeof valContextTypeId_response;",
									"",
									"var testResult =  pm.expect(typeOfContextTypeId_dataSheet).to.be.eql(typeof valContextTypeId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of contextTypeId CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valContextTypeId_dataSheet) == typeof(valContextTypeId_response)){",
									"",
									"        pm.expect(valContextTypeId_response).to.eql(valContextTypeId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valContextTypeId_response,valContextTypeId_dataSheet, function(){});",
									"       ",
									"       var ConValueContextTypeId=conversionData;",
									"       pm.expect(valContextTypeId_response).to.eql(ConValueContextTypeId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : geoMobilityNotes Call List******",
									"",
									"pm.test(\"Assert Type of geoMobilityNotes CallList\"+j, function(){",
									"var valGeoMobilityNotes_response=jsonData[j].geoMobilityNotes;",
									"var valGeoMobilityNotes_dataSheet=pm.variables.get(\"geoMobilityNotes\"+j);",
									"var typeOfGeoMobilityNotes_dataSheet= pm.variables.get(\"typeOfGeoMobilityNotes\");",
									"var typeOfGeoMobilityNotes_response=typeof valGeoMobilityNotes_response;",
									"",
									"var testResult =  pm.expect(typeOfGeoMobilityNotes_dataSheet).to.be.eql(typeof valGeoMobilityNotes_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of geoMobilityNotes CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valGeoMobilityNotes_dataSheet) == typeof(valGeoMobilityNotes_response)){",
									"",
									"        pm.expect(valGeoMobilityNotes_response).to.eql(valGeoMobilityNotes_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valGeoMobilityNotes_response,valGeoMobilityNotes_dataSheet, function(){});",
									"       ",
									"       var ConValueGeoMobilityNotes=conversionData;",
									"       pm.expect(valGeoMobilityNotes_response).to.eql(ConValueGeoMobilityNotes);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"//*******Assertion of Key : birthday Call List******",
									"",
									"pm.test(\"Assert Type of birthday CallList\"+j, function(){",
									"var valBirthday_response=jsonData[j].birthday;",
									"var valBirthday_dataSheet=pm.variables.get(\"birthday\"+j);",
									"var typeOfBirthday_dataSheet= pm.variables.get(\"typeOfBirthday\");",
									"var typeOfBirthday_response=typeof valBirthday_response;",
									"",
									"var testResult =  pm.expect(typeOfBirthday_dataSheet).to.be.eql(typeof valBirthday_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of birthday CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valBirthday_dataSheet) == typeof(valBirthday_response)){",
									"",
									"        pm.expect(valBirthday_response).to.eql(valBirthday_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBirthday_response,valBirthday_dataSheet, function(){});",
									"       ",
									"       var ConValueBirthday=conversionData;",
									"       pm.expect(valBirthday_response).to.eql(ConValueBirthday);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : principalNationalityId Call List******",
									"",
									"pm.test(\"Assert Type of principalNationalityId CallList\"+j, function(){",
									"var valPrincipalNationalityId_response=jsonData[j].principalNationalityId;",
									"var valPrincipalNationalityId_dataSheet=pm.variables.get(\"principalNationalityId\"+j);",
									"var typeOfPrincipalNationalityId_dataSheet= pm.variables.get(\"typeOfPrincipalNationalityId\");",
									"var typeOfPrincipalNationalityId_response=typeof valPrincipalNationalityId_response;",
									"",
									"var testResult =  pm.expect(typeOfPrincipalNationalityId_dataSheet).to.be.eql(typeof valPrincipalNationalityId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of principalNationalityId CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valPrincipalNationalityId_dataSheet) == typeof(valPrincipalNationalityId_response)){",
									"",
									"        pm.expect(valPrincipalNationalityId_response).to.eql(valPrincipalNationalityId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valPrincipalNationalityId_response,valPrincipalNationalityId_dataSheet, function(){});",
									"       ",
									"       var ConValuePrincipalNationalityId=conversionData;",
									"       pm.expect(valPrincipalNationalityId_response).to.eql(ConValuePrincipalNationalityId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"",
									"",
									"//*******Assertion of Key : languages Call List******",
									"",
									"",
									"pm.test(\"Assert Type of languages CallList\"+j, function(){",
									"var valLanguages_response=jsonData[j].languages;",
									"var valLanguages_dataSheet=pm.variables.get(\"languages\"+j);",
									"var typeOfLanguages_dataSheet= pm.variables.get(\"typeOfLanguages\");",
									"var typeOfLanguages_response=typeof valLanguages_response;",
									"",
									"var testResult =  pm.expect(typeOfLanguages_dataSheet).to.be.eql(typeof valLanguages_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of languages CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valLanguages_dataSheet) == typeof(valLanguages_response)){",
									"",
									"        pm.expect(valLanguages_response).to.eql(valLanguages_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valLanguages_response,valLanguages_dataSheet, function(){});",
									"       ",
									"       var ConValueLanguages=conversionData;",
									"       pm.expect(valLanguages_response).to.eql(ConValueLanguages);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : homeCountryId Call List******",
									"",
									"pm.test(\"Assert Type of homeCountryId CallList\"+j, function(){",
									"var valHomeCountryId_response=jsonData[j].homeCountryId;",
									"var valHomeCountryId_dataSheet=pm.variables.get(\"homeCountryId\"+j);",
									"var typeOfHomeCountryId_dataSheet= pm.variables.get(\"typeOfHomeCountryId\");",
									"var typeOfHomeCountryId_response=typeof valHomeCountryId_response;",
									"",
									"var testResult =  pm.expect(typeOfHomeCountryId_dataSheet).to.be.eql(typeof valHomeCountryId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of homeCountryId CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valHomeCountryId_dataSheet) == typeof(valHomeCountryId_response)){",
									"",
									"        pm.expect(valHomeCountryId_response).to.eql(valHomeCountryId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valHomeCountryId_response,valHomeCountryId_dataSheet, function(){});",
									"       ",
									"       var ConValueHomeCountryId=conversionData;",
									"       pm.expect(valHomeCountryId_response).to.eql(ConValueHomeCountryId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : maritalStatusId Call List******",
									"",
									"pm.test(\"Assert Type of maritalStatusId CallList\"+j, function(){",
									"var valMaritalStatusId_response=jsonData[j].maritalStatusId;",
									"var valMaritalStatusId_dataSheet=pm.variables.get(\"maritalStatusId\"+j);",
									"var typeOfMaritalStatusId_dataSheet= pm.variables.get(\"typeOfMaritalStatusId\");",
									"var typeOfMaritalStatusId_response=typeof valMaritalStatusId_response;",
									"",
									"var testResult =  pm.expect(typeOfMaritalStatusId_dataSheet).to.be.eql(typeof valMaritalStatusId_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of maritalStatusId CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valMaritalStatusId_dataSheet) == typeof(valMaritalStatusId_response)){",
									"",
									"        pm.expect(valMaritalStatusId_response).to.eql(valMaritalStatusId_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valMaritalStatusId_response,valMaritalStatusId_dataSheet, function(){});",
									"       ",
									"       var ConValueMaritalStatusId=conversionData;",
									"       pm.expect(valMaritalStatusId_response).to.eql(ConValueMaritalStatusId);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"",
									"//*******Assertion of Key : spouseName Call List******",
									"",
									"",
									"pm.test(\"Assert Type of spouseName CallList\"+j, function(){",
									"var valSpouseName_response=jsonData[j].spouseName;",
									"var valSpouseName_dataSheet=pm.variables.get(\"spouseName\"+j);",
									"var typeOfSpouseName_dataSheet= pm.variables.get(\"typeOfSpouseName\");",
									"var typeOfSpouseName_response=typeof valSpouseName_response;",
									"",
									"var testResult =  pm.expect(typeOfSpouseName_dataSheet).to.be.eql(typeof valSpouseName_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of spouseName CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valSpouseName_dataSheet) == typeof(valSpouseName_response)){",
									"",
									"        pm.expect(valSpouseName_response).to.eql(valSpouseName_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valSpouseName_response,valSpouseName_dataSheet, function(){});",
									"       ",
									"       var ConValueSpouseName=conversionData;",
									"       pm.expect(valSpouseName_response).to.eql(ConValueSpouseName);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"//*******Assertion of Key : children Call List******",
									"",
									"",
									"pm.test(\"Assert Type of children CallList\"+j, function(){",
									"var valChildren_response=jsonData[j].children;",
									"var valChildren_dataSheet=pm.variables.get(\"children\"+j);",
									"var typeOfChildren_dataSheet= pm.variables.get(\"typeOfChildren\");",
									"var typeOfChildren_response=typeof valChildren_response;",
									"",
									"var testResult =  pm.expect(typeOfChildren_dataSheet).to.be.eql(typeof valChildren_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of children CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valChildren_dataSheet) == typeof(valChildren_response)){",
									"",
									"        pm.expect(valChildren_response).to.eql(valChildren_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valChildren_response,valChildren_dataSheet, function(){});",
									"       ",
									"       var ConValueChildren=conversionData;",
									"       pm.expect(valChildren_response).to.eql(ConValueChildren);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : whoKnowsBest Call List******",
									"",
									"pm.test(\"Assert Type of whoKnowsBest CallList\"+j, function(){",
									"var valWhoKnowsBest_response=jsonData[j].whoKnowsBest;",
									"var valWhoKnowsBest_dataSheet=pm.variables.get(\"whoKnowsBest\"+j);",
									"var typeOfWhoKnowsBest_dataSheet= pm.variables.get(\"typeOfWhoKnowsBest\");",
									"var typeOfWhoKnowsBest_response=typeof valWhoKnowsBest_response;",
									"",
									"var testResult =  pm.expect(typeOfWhoKnowsBest_dataSheet).to.be.eql(typeof valWhoKnowsBest_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of whoKnowsBest CallList\"+j, function()",
									"    {",
									"        ",
									"      if(typeof(valWhoKnowsBest_dataSheet) == typeof(valWhoKnowsBest_response)){",
									"",
									"        pm.expect(valWhoKnowsBest_response).to.eql(valWhoKnowsBest_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valWhoKnowsBest_response,valWhoKnowsBest_dataSheet, function(){});",
									"       ",
									"       var ConValueWhoKnowsBest=conversionData;",
									"       pm.expect(valWhoKnowsBest_response).to.eql(ConValueWhoKnowsBest);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : Blocks Call List *****",
									"pm.test(\"Assert of Blocks CallList\"+j, function(){",
									"var valBlocks_response=jsonData[j].blocks;",
									"",
									"var typeOfBlocks_Type_dataSheet= pm.variables.get(\"typeOfBlocks_Type\");",
									"var typeOfBlocks_ExpirationDate_dataSheet= pm.variables.get(\"typeOfBlocks_ExpirationDate\");",
									"",
									"",
									"    var i;",
									"",
									"    for(i=0;i<valBlocks_response.length;i++){",
									"",
									"        pm.test(\"Assert keys inside Blocks\",function()",
									"        {",
									"        pm.expect(jsonData[j].blocks[i]).to.have.all.keys('type','expirationDate');",
									"        });",
									"",
									"//*******Assertion of Key : Blocks_Type Call List *****",
									"pm.test(\"Assert Type of Blocks_Type\" +i+ \"CallList\", function(){",
									"var valBlocks_Type_response=jsonData[j].blocks[i].type;",
									"var valBlocks_Type_dataSheet=pm.variables.get(\"blocks_type\"+j+i);",
									"var typeOfBlocks_Type_response=typeof valBlocks_Type_response;",
									"var typeOfBlocks_Type_dataSheet = pm.variables.get(\"typeOfBlocks_type\");",
									"var testResult =  pm.expect(typeOfBlocks_Type_dataSheet).to.be.eql(typeof valBlocks_Type_response);",
									"        ",
									"if(testResult)",
									"{",
									"    ",
									"    pm.test(\"Assert value of blocks_type \"+i+  \"CallList\", function()",
									"    {",
									"        ",
									"      if(typeof(valBlocks_Type_dataSheet) == typeof(valBlocks_Type_response)){",
									"",
									"        pm.expect(valBlocks_Type_response).to.eql(valBlocks_Type_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBlocks_Type_response,valBlocks_Type_dataSheet, function(){});",
									"       ",
									"       var ConValueBlocks_Type=conversionData;",
									"       pm.expect(valBlocks_Type_response).to.eql(ConValueBlocks_Type);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"",
									"//*******Assertion of Key : Blocks_ExpirationDate Call List *****",
									"pm.test(\"Assert Type of Blocks_ExpirationDate \" +i+\" CallList\", function(){",
									"var valBlocks_ExpirationDate_response=jsonData[j].blocks[i].expirationDate;",
									"var valBlocks_ExpirationDate_dataSheet=pm.variables.get(\"blocks_expirationDate\"+j+i);",
									"var typeOfBlocks_ExpirationDate_response=typeof valBlocks_ExpirationDate_response;",
									"var typeOfBlocks_ExpirationDate_dataSheet = pm.variables.get(\"typeOfBlocks_expirationDate\");",
									"",
									"var testResult =  pm.expect(typeOfBlocks_ExpirationDate_dataSheet).to.be.eql(typeof valBlocks_ExpirationDate_response);",
									"        ",
									"if(testResult)",
									"{",
									"    pm.test(\"Assert value of blocks_expirationDate\"+i+\" Relationship\", function()",
									"    {",
									"        ",
									"      if(typeof(valBlocks_ExpirationDate_dataSheet) == typeof(valBlocks_ExpirationDate_response)){",
									"",
									"        pm.expect(valBlocks_ExpirationDate_response).to.eql(valBlocks_ExpirationDate_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valBlocks_ExpirationDate_response,valBlocks_ExpirationDate_dataSheet, function(){});",
									"       ",
									"       var ConValueBlocks_ExpirationDate=conversionData;",
									"       pm.expect(valBlocks_ExpirationDate_response).to.eql(ConValueBlocks_ExpirationDate);      ",
									"        }",
									"    });",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"}",
									"});  ",
									"",
									"var valRelationships_response=jsonData[0].relationships;",
									"var lengthOfResponse = valRelationships_response.length;",
									"",
									"var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"var typeOfRelationships_response=typeof valRelationships_response;",
									"",
									"",
									"//*******Assertion of type of : relationships Call List******",
									"",
									"var valRelationships_response=jsonData[j].relationships;",
									"var lengthOfResponse = valRelationships_response.length;",
									"",
									"var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"var typeOfRelationships_response=typeof valRelationships_response;",
									"var typeOfRelationships_userId_dataSheet= pm.variables.get(\"typeOfRelationships_userId\");",
									"var typeOfRelationships_relationshipTypeId_dataSheet= pm.variables.get(\"typeOfRelationships_relationshipTypeId\");",
									"var testResultTypeOf;",
									"pm.test(\"Assert Type of relationships CallList\"+j, function(){",
									"var testResultTypeOf = pm.expect(typeOfRelationships_dataSheet).to.be.eql(typeof valRelationships_response);",
									"",
									"",
									"",
									"//*******Assertion of Key : relationships_userId Call List******",
									"",
									"if(testResultTypeOf){",
									"    ",
									"    console.log(\"length.......\"+lengthOfResponse);",
									"    if(lengthOfResponse!=0){",
									"    ",
									"   for(var i=0;i<lengthOfResponse;i++){",
									"    pm.test(\"Assert keys inside relations\",function()",
									"        {",
									"       ",
									"        pm.expect(jsonData[j].relationships[i]).to.have.all.keys('userId','relationshipTypeId');",
									"        }); ",
									"    pm.test(\"Assert type of relationships_userId CallList \"+j , function(){",
									"        ",
									"        var typeOfRelationships_userId_response = typeof (jsonData[j].relationships[i].userId);",
									"        var valRelationships_userId_datasheet = pm.variables.get(\"relationships_userId\"+j+i) ;",
									"        var testResultTypeOfUserId = pm.expect(typeOfRelationships_userId_response ).to.be.eql(pm.variables.get(\"typeOfRelationships_userId\"));",
									"     ",
									"    if(testResultTypeOfUserId){",
									"    pm.test(\"Assert value relationships_userId CallList\"+j, function(){",
									"        pm.expect(jsonData[j].relationships[i].userId).to.be.eql(valRelationships_userId_datasheet.toString());",
									"    });} }) ",
									"//*******Assertion of Key : relationships_relationshipTypeId Call List******    ",
									"      pm.test(\"Assert type of relationships_relationshipTypeId CallList \"+j , function(){",
									"        var valRelationships_relationshipTypeId_datasheet = pm.variables.get(\"relationships_relationshipTypeId\"+j+i) ;",
									"        var typeOfRelationships_relationshipTypeId_response = typeof (jsonData[j].relationships[i].relationshipTypeId);",
									"        ",
									"        var testResultTypeOfrelationshipTypeId = pm.expect(typeOfRelationships_relationshipTypeId_response ).to.be.eql(pm.variables.get(\"typeOfRelationships_relationshipTypeId\"));",
									"     ",
									"    ",
									"    if(testResultTypeOfrelationshipTypeId){",
									"    pm.test(\"Assert value relationships_relationshipTypeId CallList\"+j, function(){",
									"        pm.expect(jsonData[j].relationships[i].relationshipTypeId).to.be.eql(valRelationships_relationshipTypeId_datasheet.toString());",
									"    });} }) ;",
									"   }",
									"}",
									"else {",
									"    ",
									"    pm.test(\"Assert value of relationships when empty CallList\"+j, function()",
									"    {",
									"     var valRelationships_response=jsonData[j].relationships;",
									"var valRelationships_dataSheet=pm.variables.get(\"relationships\"+j);",
									"var typeOfRelationships_dataSheet= pm.variables.get(\"typeOfRelationships\");",
									"var typeOfRelationships_response=typeof valRelationships_response;",
									"",
									"var testResult =  pm.expect(typeOfRelationships_dataSheet).to.be.eql(typeof valRelationships_response);",
									"",
									"",
									"      if(typeof(valRelationships_dataSheet) == typeof(valRelationships_response)){",
									"",
									"        pm.expect(valRelationships_response).to.eql(valRelationships_dataSheet); ",
									"          ",
									"      }",
									"",
									"      else",
									"      {",
									"        valCallBack(valRelationships_response,valRelationships_dataSheet, function(){});",
									"       ",
									"       var ConValueRelationships=conversionData;",
									"       pm.expect(valRelationships_response).to.eql(ConValueRelationships);      ",
									"        }",
									"    });",
									"",
									"}",
									"}",
									"else{ postman.setNextRequest();",
									"    ",
									"}",
									"",
									"});",
									"//*******Assertion of Key : rassignmentIds Call List********",
									"",
									"",
									"pm.test(\"Assert Type of assignmentIds CallList\"+j, function(){",
									"var valAssignmentIds_response=jsonData[j].assignmentIds;",
									"var valAssignmentIds_dataSheet=pm.variables.get(\"assignmentIds\"+j);",
									"var typeOfAssignmentIds_dataSheet= pm.variables.get(\"typeOfAssignmentIds\");",
									"var assignmentIds_count= pm.variables.get(\"assignmentIds_count\"+j);",
									"var typeOfAssignmentIds_response=typeof valAssignmentIds_response;",
									"",
									"var testResult =  pm.expect(typeOfAssignmentIds_dataSheet).to.be.eql(typeof valAssignmentIds_response);",
									"",
									"",
									"if(testResult)",
									"{",
									"pm.test(\"Assert count  of assignmentIds CallList\"+j, function(){",
									"    var objToStr = JSON.stringify(valAssignmentIds_response);",
									"    var len = objToStr.split(\",\").length;",
									"    pm.expect(len).to.be.eql(assignmentIds_count);",
									"});",
									"}",
									"else{ postman.setNextRequest();}",
									"});",
									"",
									"}",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "userId",
								"type": "text",
								"value": "{{userid}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Auth}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"personId\": \"{{peopleId}}\",\r\n    \"entityTypeId\": \"{{entityTypeId}}\",\r\n    \"entityId\": \"{{entityId}}\"\r\n  }\r\n] ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/call-list/10480",
							"host": [
								"{{url}}"
							],
							"path": [
								"call-list",
								"10480"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post_Add to Call List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();",
									"var conversionData;",
									"var jsonValue=jsonData;",
									"",
									"",
									"function valCallBack(type,value,callback)",
									"{",
									"    if(typeof(type)==='string')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        conversionData=value.toString();",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    else if(typeof(type)==='boolean'){",
									"        switch(typeof value){",
									"            case \"string\":",
									"               switch(value.toLowerCase()) ",
									"                         {",
									"            case \"false\": ",
									"                conversionData= false;",
									"                callback(conversionData);",
									"                break;   ",
									"            case \"true\": ",
									"                conversionData= true;",
									"                callback(conversionData);",
									"                break; ",
									"            default: conversionData=true;",
									"                callback(conversionData);",
									"              ",
									"          }",
									"",
									"                callback(conversionData);",
									"                break;  ",
									"        }",
									"    }",
									"    else if(typeof(type)==='number')",
									"    {",
									"        ",
									"    switch (typeof(value)) ",
									"        {",
									"      case \"string\":",
									"        conversionData=parseInt(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }else if(typeof(type)==='undefined')",
									"    {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    }else if(typeof(type)==='object')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        var num1=value.toString();",
									"        conversionData=JSON.parse(num1);",
									"        callback(conversionData);",
									"        break;",
									"      case \"string\":",
									"        conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    ",
									"    else if(typeof(type)==='function')",
									"    {",
									"        ",
									"        callback(conversionData);",
									"    }",
									"    return  conversionData;",
									"}",
									"",
									"",
									"",
									"",
									"for (j=0;j<jsonData.length;j++){",
									"",
									"  jsonValue=jsonData[j];",
									"  var k=0;",
									"",
									"",
									"  pm.test(\"Check if Call List object contains all provided keys\",function()",
									"    {",
									"      pm.expect(jsonValue).to.have.all.keys('boardexStatus','boardexData','DCFStatus','createdAt','lastModifiedAt','id','firstName','lastName','group1','group2','priorityId','todoNote','linkedinProfileUrl','assistant','qualifications','contactDetails','workHistory','blocks','addedToCallListAt','context','contextTypeId','geoMobilityNotes','birthday','principalNationalityId','languages','homeCountryId','maritalStatusId','spouseName','children','whoKnowsBest','relationships','assignmentIds');",
									"  }); ",
									"",
									"pm.environment.set(\"addedToCallListAt\",jsonValue.addedToCallListAt);",
									"",
									"//    pm.test(\"Check if ETP Relationship assistant object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.assistant).to.have.all.keys('phoneNumber','fullName','email','extension');",
									"//   }); ",
									"",
									"//   pm.test(\"Check if ETP Relationship qualifications object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.qualifications).to.have.all.keys('earnedAt','title','institution','country');",
									"//   }); ",
									"",
									"// pm.test(\"Check if ETP Relationship contactDetails object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.contactDetails).to.have.all.keys('label','value','icon','isDefault','lastModifiedAt');",
									"//   }); ",
									"",
									"//   pm.test(\"Check if ETP Relationship workHistory object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.workHistory).to.have.all.keys('startedAt','endedAt','title','company','country','isPrimary','isHired','isNED','sequenceNumber','compensation');",
									"//   }); ",
									"",
									"//   pm.test(\"Check if ETP Relationship Launguages object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.languages).to.have.all.keys('languageId','fluencyId');",
									"//   });",
									"",
									"  //*******Assertion of Key : boardexStatuss   *********",
									"  pm.test(\"Assert Type of boardexStatus\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.boardexStatus).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of boardexStatus\"+j, function () {",
									"",
									"        if (typeof jsonValue.boardexStatus === typeof data['add_callList_boardexStatus'+j]) {",
									"          pm.expect(data['add_callList_boardexStatus'+j]).to.eql(jsonValue.boardexStatus);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.boardexStatus, data['add_callList_boardexStatus'+j], function () { });",
									"",
									"          var conboardexStatus = conversionData;",
									"          pm.expect(jsonValue.boardexStatus).to.eql(conboardexStatus);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : boardexDatas   *********",
									"  pm.test(\"Assert Type of boardexData\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.boardexData).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of boardexData\"+j, function () {",
									"",
									"        if (typeof jsonValue.boardexData === typeof data['add_callList_boardexData'+j]) {",
									"          pm.expect(data['add_callList_boardexData'+j]).to.eql(jsonValue.boardexData);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.boardexData, data['add_callList_boardexData'+j], function () { });",
									"",
									"          var conboardexData = conversionData;",
									"          pm.expect(jsonValue.boardexData).to.eql(conboardexData);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"  //*******Assertion of Key : DCFStatuss   *********",
									"  pm.test(\"Assert Type of DCFStatus\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.DCFStatus).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of DCFStatus\"+j, function () {",
									"",
									"        if (typeof jsonValue.DCFStatus === typeof data['add_callList_DCFStatus'+j]) {",
									"          pm.expect(data['add_callList_DCFStatus'+j]).to.eql(jsonValue.DCFStatus);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.DCFStatus, data['add_callList_DCFStatus'+j], function () { });",
									"",
									"          var conDCFStatus = conversionData;",
									"          pm.expect(jsonValue.DCFStatus).to.eql(conDCFStatus);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : createdAts   *********",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of createdAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.createdAt === typeof data['add_callList_createdAt'+j]) {",
									"          pm.expect(data['add_callList_createdAt'+j]).to.eql(jsonValue.createdAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.createdAt, data['add_callList_createdAt'+j], function () { });",
									"",
									"          var concreatedAt = conversionData;",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : lastModifiedAts   *********",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.lastModifiedAt === typeof data['add_callList_lastModifiedAt'+j]) {",
									"          pm.expect(data['add_callList_lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.lastModifiedAt, data['lastModifiedAt'+j], function () { });",
									"",
									"          var conlastModifiedAt = conversionData;",
									"          pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : ids   *********",
									"  pm.test(\"Assert Type of id\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of id\"+j, function () {",
									"",
									"        if (typeof jsonValue.id === typeof data['add_callList_id'+j]) {",
									"          pm.expect(data['add_callList_id'+j]).to.eql(jsonValue.id);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.id, data['add_callList_id'+j], function () { });",
									"",
									"          var conid = conversionData;",
									"          pm.expect(jsonValue.id).to.eql(conid);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : firstNames   *********",
									"  pm.test(\"Assert Type of firstName\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.firstName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of firstName\"+j, function () {",
									"",
									"        if (typeof jsonValue.firstName === typeof data['add_callList_firstName'+j]) {",
									"          pm.expect(data['add_callList_firstName'+j]).to.eql(jsonValue.firstName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.firstName, data['add_callList_firstName'+j], function () { });",
									"",
									"          var confirstName = conversionData;",
									"          pm.expect(jsonValue.firstName).to.eql(confirstName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : lastNames   *********",
									"  pm.test(\"Assert Type of lastName\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.lastName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of lastName\"+j, function () {",
									"",
									"        if (typeof jsonValue.lastName === typeof data['add_callList_lastName'+j]) {",
									"          pm.expect(data['add_callList_lastName'+j]).to.eql(jsonValue.lastName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.lastName, data['add_callList_lastName'+j], function () { });",
									"",
									"          var conlastName = conversionData;",
									"          pm.expect(jsonValue.lastName).to.eql(conlastName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : group1s   *********",
									"  pm.test(\"Assert Type of group1\"+j, function () {",
									"    if(jsonValue.group1===null){",
									"      var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of group1\"+j, function () {",
									"",
									"        if (typeof jsonValue.group1 === typeof data['add_callList_group1'+j]) {",
									"          pm.expect(data['add_callList_group1'+j]).to.eql(jsonValue.group1);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.group1, data['add_callList_group1'+j], function () { });",
									"",
									"          var congroup1 = conversionData;",
									"          pm.expect(jsonValue.group1).to.eql(congroup1);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : group2s   *********",
									"  pm.test(\"Assert Type of group2\"+j, function () {",
									"     if(jsonValue.group2===null){",
									"      var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of group2\"+j, function () {",
									"",
									"        if (typeof jsonValue.group2 === typeof data['add_callList_group2'+j]) {",
									"          pm.expect(data['add_callList_group2'+j]).to.eql(jsonValue.group2);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.group2, data['add_callList_group2'+j], function () { });",
									"",
									"          var congroup2 = conversionData;",
									"          pm.expect(jsonValue.group2).to.eql(congroup2);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : priorityIds   *********",
									"  pm.test(\"Assert Type of priorityId\"+j, function () {",
									"     if(jsonValue.priorityId===null){",
									"      var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"",
									"    var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of priorityId\"+j, function () {",
									"",
									"        if (typeof jsonValue.priorityId === typeof data['add_callList_priorityId'+j]) {",
									"          pm.expect(data['add_callList_priorityId'+j]).to.eql(jsonValue.priorityId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.priorityId, data['add_callList_priorityId'+j], function () { });",
									"",
									"          var conpriorityId = conversionData;",
									"          pm.expect(jsonValue.priorityId).to.eql(conpriorityId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"    }",
									"  });",
									"",
									"//*******Assertion of Key : todoNotes   *********",
									"  pm.test(\"Assert Type of todoNote\"+j, function () {",
									"     if(jsonValue.todoNote===null){",
									"      var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of todoNote\"+j, function () {",
									"",
									"        if (typeof jsonValue.todoNote === typeof data['add_callList_todoNote'+j]) {",
									"          pm.expect(data['add_callList_todoNote'+j]).to.eql(jsonValue.todoNote);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.todoNote, data['add_callList_todoNote'+j], function () { });",
									"",
									"          var contodoNote = conversionData;",
									"          pm.expect(jsonValue.todoNote).to.eql(contodoNote);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : linkedinProfileUrls   *********",
									"  pm.test(\"Assert Type of linkedinProfileUrl\"+j, function () {",
									"    if(jsonValue.linkedinProfileUrl===null){",
									"      var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of linkedinProfileUrl\"+j, function () {",
									"",
									"        if (typeof jsonValue.linkedinProfileUrl === typeof data['add_callList_linkedinProfileUrl'+j]) {",
									"          pm.expect(data['add_callList_linkedinProfileUrl'+j]).to.eql(jsonValue.linkedinProfileUrl);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.linkedinProfileUrl, data['add_callList_linkedinProfileUrl'+j], function () { });",
									"",
									"          var conlinkedinProfileUrl = conversionData;",
									"          pm.expect(jsonValue.linkedinProfileUrl).to.eql(conlinkedinProfileUrl);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"  //verifying the Assistant assertion: ",
									"",
									"  for(var u=0;u<jsonValue.assistant.length;u++){",
									"//*******Assertion of Key : phoneNumbers   *********",
									"  pm.test(\"Assert Type of phoneNumber\"+j, function () {",
									"    if(jsonValue.assistant[u].phoneNumber===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of phoneNumber\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].phoneNumber === typeof data['add_callList_assistant_phoneNumber'+j+u]) {",
									"          pm.expect(data['add_callList_assistant_phoneNumber'+j+u]).to.eql(jsonValue.assistant[u].phoneNumber);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].phoneNumber, data['add_callList_assistant_phoneNumber'+j+u], function () { });",
									"",
									"          var conphoneNumber = conversionData;",
									"          pm.expect(jsonValue.assistant[u].phoneNumber).to.eql(conphoneNumber);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : fullNames   *********",
									"  pm.test(\"Assert Type of fullName\"+j, function () {",
									"    if(jsonValue.assistant[u].fullName===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of fullName\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].fullName === typeof data['add_callList_assistant_fullName'+j+u]) {",
									"          pm.expect(data['add_callList_assistant_fullName'+j+u]).to.eql(jsonValue.assistant[u].fullName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].fullName, data['add_callList_assistant_fullName'+j+u], function () { });",
									"",
									"          var confullName = conversionData;",
									"          pm.expect(jsonValue.assistant[u].fullName).to.eql(confullName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"    }",
									"  });",
									"",
									"//*******Assertion of Key : emails   *********",
									"  pm.test(\"Assert Type of email\"+j, function () {",
									"    if(jsonValue.assistant[u].email===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of email\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].email === typeof data['add_callList_assistant_email'+j+u]) {",
									"          pm.expect(data['add_callList_assistant_email'+j+u]).to.eql(jsonValue.assistant[u].email);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].email, data['add_callList_assistant_email'+j+u], function () { });",
									"",
									"          var conemail = conversionData;",
									"          pm.expect(jsonValue.assistant[u].email).to.eql(conemail);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : extensions   *********",
									"  pm.test(\"Assert Type of extension\"+j, function () {",
									"    if(jsonValue.assistant[u].extension===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of extension\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].extension === typeof data['add_callList_assistant_extension'+j+u]) {",
									"          pm.expect(data['add_callList_assistant_extension'+j+u]).to.eql(jsonValue.assistant[u].extension);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].extension, data['add_callList_assistant_extension'+j+u], function () { });",
									"",
									"          var conextension = conversionData;",
									"          pm.expect(jsonValue.assistant[u].extension).to.eql(conextension);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"    }",
									"  });",
									"}",
									"",
									"// Verifying Qualification assertions:",
									"for(var m=0;m<jsonValue.qualifications.length;m++){",
									"",
									"  //*******Assertion of Key : earnedAts   *********",
									"  pm.test(\"Assert Type of earnedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].earnedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of earnedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].earnedAt === typeof data['add_callList_qualifications_earnedAt'+j+m]) {",
									"          pm.expect(data['add_callList_qualifications_earnedAt'+j+m]).to.eql(jsonValue.qualifications[m].earnedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].earnedAt, data['add_callList_qualifications_earnedAt'+j+m], function () { });",
									"",
									"          var conearnedAt = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].earnedAt).to.eql(conearnedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : titles   *********",
									"  pm.test(\"Assert Type of title\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].title).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of title\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].title === typeof data['add_callList_qualifications_title'+j+m]) {",
									"          pm.expect(data['add_callList_qualifications_title'+j+m]).to.eql(jsonValue.qualifications[m].title);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].title, data['add_callList_qualifications_title'+j+m], function () { });",
									"",
									"          var contitle = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].title).to.eql(contitle);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : institutions   *********",
									"  pm.test(\"Assert Type of institution\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].institution).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of institution\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].institution === typeof data['add_callList_qualifications_institution'+j+m]) {",
									"          pm.expect(data['add_callList_qualifications_institution'+j+m]).to.eql(jsonValue.qualifications[m].institution);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].institution, data['add_callList_qualifications_institution'+j+m], function () { });",
									"",
									"          var coninstitution = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].institution).to.eql(coninstitution);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : countrys   *********",
									"  pm.test(\"Assert Type of country\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].country).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of country\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].country === typeof data['add_callList_qualifications_country'+j+m]) {",
									"          pm.expect(data['add_callList_qualifications_country'+j+m]).to.eql(jsonValue.qualifications[m].country);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].country, data['add_callList_qualifications_country'+j+m], function () { });",
									"",
									"          var concountry = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].country).to.eql(concountry);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"}",
									"",
									"//verifying the contactDetails assertions:",
									"",
									"for(var n=0;n<jsonValue.contactDetails.length;n++){",
									"",
									"//*******Assertion of Key : labels   *********",
									"  pm.test(\"Assert Type of label\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].label).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of label\"+j, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].label === typeof data['add_callList_contactDetails_label'+j+n]) {",
									"          pm.expect(data['add_callList_contactDetails_label'+j+n]).to.eql(jsonValue.contactDetails[n].label);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].label, data['add_callList_contactDetails_label'+j+n], function () { });",
									"",
									"          var conlabel = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].label).to.eql(conlabel);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : values   *********",
									"  pm.test(\"Assert Type of value\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].value).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of value\"+j, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].value === typeof data['add_callList_contactDetails_value'+j+n]) {",
									"          pm.expect(data['add_callList_contactDetails_value'+j+n]).to.eql(jsonValue.contactDetails[n].value);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].value, data['add_callList_contactDetails_value'+j+n], function () { });",
									"",
									"          var convalue = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].value).to.eql(convalue);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : icons   *********",
									"  pm.test(\"Assert Type of icon\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].icon).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of icon\"+j+n, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].icon === typeof data['add_callList_contactDetails_icon'+j+n]) {",
									"          pm.expect(data['add_callList_contactDetails_icon'+j+n]).to.eql(jsonValue.contactDetails[n].icon);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].icon, data['add_callList_contactDetails_icon'+j+n], function () { });",
									"",
									"          var conicon = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].icon).to.eql(conicon);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : isDefaults   *********",
									"  pm.test(\"Assert Type of isDefault\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].isDefault).to.be.eql(data['typeOfBoolean']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of isDefault\"+j, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].isDefault === typeof data['add_callList_contactDetails_isDefault'+j+n]) {",
									"          pm.expect(data['add_callList_contactDetails_isDefault'+j+n]).to.eql(jsonValue.contactDetails[n].isDefault);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].isDefault, data['add_callList_contactDetails_isDefault'+j+n], function () { });",
									"",
									"          var conisDefault = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].isDefault).to.eql(conisDefault);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : lastModifiedAts   *********",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].lastModifiedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of lastModifiedAt\"+j+n, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].lastModifiedAt === typeof data['add_callList_contactDetails_lastModifiedAt'+j+n]) {",
									"          pm.expect(data['add_callList_contactDetails_lastModifiedAt'+j+n]).to.eql(jsonValue.contactDetails[n].lastModifiedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].lastModifiedAt, data['add_callList_contactDetails_lastModifiedAt'+j+n], function () { });",
									"",
									"          var conlastModifiedAt = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].lastModifiedAt).to.eql(conlastModifiedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"",
									"//Workhistory assertions:",
									"",
									"for(var t=0;t<jsonValue.workHistory.length;t++){",
									"",
									"//*******Assertion of Key : startedAts   *********",
									"  pm.test(\"Assert Type of startedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].startedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of startedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].startedAt === typeof data['add_callList_workHistory_startedAt'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_startedAt'+j+t]).to.eql(jsonValue.workHistory[t].startedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].startedAt, data['add_callList_workHistory_startedAt'+j+t], function () { });",
									"",
									"          var constartedAt = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].startedAt).to.eql(constartedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : endedAts   *********",
									"  pm.test(\"Assert Type of endedAt\"+j, function () {",
									"    if(jsonValue.workHistory[t].endedAt===null){",
									"       var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of endedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].endedAt === typeof data['add_callList_workHistory_endedAt'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_endedAt'+j+t]).to.eql(jsonValue.workHistory[t].endedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].endedAt, data['add_callList_workHistory_endedAt'+j+t], function () { });",
									"",
									"          var conendedAt = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].endedAt).to.eql(conendedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : titles   *********",
									"  pm.test(\"Assert Type of title\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].title).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of title\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].title === typeof data['add_callList_workHistory_title'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_title'+j+t]).to.eql(jsonValue.workHistory[t].title);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].title, data['add_callList_workHistory_title'+j+t], function () { });",
									"",
									"          var contitle = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].title).to.eql(contitle);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : companys   *********",
									"  pm.test(\"Assert Type of company\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].company).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of company\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].company === typeof data['add_callList_workHistory_company'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_company'+j+t]).to.eql(jsonValue.workHistory[t].company);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].company, data['add_callList_workHistory_company'+j+t], function () { });",
									"",
									"          var concompany = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].company).to.eql(concompany);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : countrys   *********",
									"  pm.test(\"Assert Type of country\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].country).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of country\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].country === typeof data['add_callList_workHistory_country'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_country'+j+t]).to.eql(jsonValue.workHistory[t].country);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].country, data['add_callList_workHistory_country'+j+t], function () { });",
									"",
									"          var concountry = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].country).to.eql(concountry);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : isHireds   *********",
									"  pm.test(\"Assert Type of isHired\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isHired).to.be.eql(data['typeOfBoolean']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of isHired\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].isHired === typeof data['add_callList_workHistory_isHired'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_isHired'+j+t]).to.eql(jsonValue.workHistory[t].isHired);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].isHired, data['add_callList_workHistory_isHired'+j+t], function () { });",
									"",
									"          var conisHired = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].isHired).to.eql(conisHired);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : isNEDs   *********",
									"  pm.test(\"Assert Type of isNED\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isNED).to.be.eql(data['typeOfBoolean']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of isNED\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].isNED === typeof data['add_callList_workHistory_isNED'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_isNED'+j+t]).to.eql(jsonValue.workHistory[t].isNED);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].isNED, data['workHistory_isNED'+j+t], function () { });",
									"",
									"          var conisNED = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].isNED).to.eql(conisNED);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : sequenceNumbers   *********",
									"  pm.test(\"Assert Type of sequenceNumber\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].sequenceNumber).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of sequenceNumber\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].sequenceNumber === typeof data['add_callList_workHistory_sequenceNumber'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_sequenceNumber'+j+t]).to.eql(jsonValue.workHistory[t].sequenceNumber);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].sequenceNumber, data['add_callList_workHistory_sequenceNumber'+j+t], function () { });",
									"",
									"          var consequenceNumber = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].sequenceNumber).to.eql(consequenceNumber);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"// Workhistory Compensation assertion",
									"jsonWorkHistory=jsonValue.workHistory[t]",
									"if(jsonWorkHistory.compensation===null){",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation).to.be.eql(data['typeOfObject']);",
									"  });",
									"}else{",
									"",
									"//*******Assertion of Key : currencyIds   *********",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.currencyId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of currencyId\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.currencyId === typeof data['add_callList_workHistory_compensation_currencyId'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_compensation_currencyId'+j+t]).to.eql(jsonWorkHistory.compensation.currencyId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.currencyId, data['add_callList_workHistory_compensation_currencyId'+j+t], function () { });",
									"",
									"          var concurrencyId = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.currencyId).to.eql(concurrencyId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : baseSalarys   *********",
									"  pm.test(\"Assert Type of baseSalary\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.baseSalary).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of baseSalary\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.baseSalary === typeof data['add_callList_workHistory_compensation_baseSalary'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_compensation_baseSalary'+j+t]).to.eql(jsonWorkHistory.compensation.baseSalary);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.baseSalary, data['add_callList_workHistory_compensation_baseSalary'+j+t], function () { });",
									"",
									"          var conbaseSalary = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.baseSalary).to.eql(conbaseSalary);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : totalEstimatedCompensations   *********",
									"  pm.test(\"Assert Type of totalEstimatedCompensation\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.totalEstimatedCompensation).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of totalEstimatedCompensation\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.totalEstimatedCompensation === typeof data['add_callList_workHistory_compensation_totalEstimatedCompensation'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_compensation_totalEstimatedCompensation'+j+t]).to.eql(jsonWorkHistory.compensation.totalEstimatedCompensation);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.totalEstimatedCompensation, data['add_callList_workHistory_compensation_totalEstimatedCompensation'+j+t], function () { });",
									"",
									"          var contotalEstimatedCompensation = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.totalEstimatedCompensation).to.eql(contotalEstimatedCompensation);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : compensationDates   *********",
									"  pm.test(\"Assert Type of compensationDate\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.compensationDate).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of compensationDate\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.compensationDate === typeof data['add_callList_workHistory_compensation_compensationDate'+j+t]) {",
									"          pm.expect(data['add_callList_workHistory_compensation_compensationDate'+j+t]).to.eql(jsonWorkHistory.compensation.compensationDate);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.compensationDate, data['add_callList_workHistory_compensation_compensationDate'+j+t], function () { });",
									"",
									"          var concompensationDate = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.compensationDate).to.eql(concompensationDate);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"}",
									"",
									"//*******Assertion of Key : blocks   *********",
									"  pm.test(\"Assert Type of blocks\"+j, function () {",
									"    ",
									"    var testResult = pm.expect(typeof jsonValue.blocks).to.be.eql(data['typeOfObject']);",
									"    if (testResult) {",
									"      pm.test(\"Assert value of blocks\"+j, function () {",
									"",
									"        if (typeof jsonValue.blocks === typeof data['blocks'+j]) {",
									"          pm.expect(data['blocks'+j]).to.eql(jsonValue.blocks);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.blocks, data['blocks'+j], function () { });",
									"",
									"          var conblocks = conversionData;",
									"          pm.expect(jsonValue.blocks).to.eql(conblocks);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : addedToCallListAts   *********",
									"  pm.test(\"Assert Type of addedToCallListAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.addedToCallListAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of addedToCallListAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.addedToCallListAt === typeof pm.environment.get(\"add_callList_addedToCallListAt\")) {",
									"          pm.expect(pm.environment.get(\"add_callList_addedToCallListAt\")).to.eql(jsonValue.addedToCallListAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.addedToCallListAt, pm.environment.get(\"add_callList_addedToCallListAt\"), function () { });",
									"",
									"          var conaddedToCallListAt = conversionData;",
									"          pm.expect(jsonValue.addedToCallListAt).to.eql(conaddedToCallListAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"",
									"",
									"//*******Assertion of Key : contextTypeIds   *********",
									"  pm.test(\"Assert Type of contextTypeId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contextTypeId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of contextTypeId\"+j, function () {",
									"",
									"        if (typeof jsonValue.contextTypeId === typeof data['add_callList_contextTypeId'+j]) {",
									"          pm.expect(data['add_callList_contextTypeId'+j]).to.eql(jsonValue.contextTypeId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contextTypeId, data['add_callList_contextTypeId'+j], function () { });",
									"",
									"          var concontextTypeId = conversionData;",
									"          pm.expect(jsonValue.contextTypeId).to.eql(concontextTypeId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : geoMobilityNotess   *********",
									"  pm.test(\"Assert Type of geoMobilityNotes\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.geoMobilityNotes).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of geoMobilityNotes\"+j, function () {",
									"",
									"        if (typeof jsonValue.geoMobilityNotes === typeof data['add_callList_geoMobilityNotes'+j]) {",
									"          pm.expect(data['add_callList_geoMobilityNotes'+j]).to.eql(jsonValue.geoMobilityNotes);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.geoMobilityNotes, data['add_callList_geoMobilityNotes'+j], function () { });",
									"",
									"          var congeoMobilityNotes = conversionData;",
									"          pm.expect(jsonValue.geoMobilityNotes).to.eql(congeoMobilityNotes);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : birthdays   *********",
									"  pm.test(\"Assert Type of birthday\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.birthday).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of birthday\"+j, function () {",
									"",
									"        if (typeof jsonValue.birthday === typeof data['add_callList_birthday'+j]) {",
									"          pm.expect(data['add_callList_birthday'+j]).to.eql(jsonValue.birthday);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.birthday, data['add_callList_birthday'+j], function () { });",
									"",
									"          var conbirthday = conversionData;",
									"          pm.expect(jsonValue.birthday).to.eql(conbirthday);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : principalNationalityIds   *********",
									"  pm.test(\"Assert Type of principalNationalityId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.principalNationalityId).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of add_callList_principalNationalityId\"+j, function () {",
									"",
									"        if (typeof jsonValue.principalNationalityId === typeof data['add_callList_principalNationalityId'+j]) {",
									"          pm.expect(data['add_callList_principalNationalityId'+j]).to.eql(jsonValue.principalNationalityId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.principalNationalityId, data['add_callList_principalNationalityId'+j], function () { });",
									"",
									"          var conprincipalNationalityId = conversionData;",
									"          pm.expect(jsonValue.principalNationalityId).to.eql(conprincipalNationalityId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//Launguages assertions:",
									"for(var s=0;s<jsonValue.languages.length;s++){",
									"//*******Assertion of Key : languageIds   *********",
									"  pm.test(\"Assert Type of languageId\"+j+s, function () {",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].languageId).to.be.eql(data['typeOfString']);",
									"   ",
									"    if (testResult) {",
									"      pm.test(\"Assert value of languageId\"+j+s, function () {",
									"",
									"        if (typeof jsonValue.languages[s].languageId === typeof data['add_callList_languages_languageId'+j+s]) {",
									"          pm.expect(data['add_callList_languages_languageId'+j+s]).to.eql(jsonValue.languages[s].languageId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.languages[s].languageId, data['add_callList_languages_languageId'+j+s], function () { });",
									"",
									"          var conlanguageId = conversionData;",
									"          pm.expect(jsonValue.languages[s].languageId).to.eql(conlanguageId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : fluencyIds   *********",
									"  pm.test(\"Assert Type of fluencyId\"+j+s, function () {",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].fluencyId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of fluencyId\"+j+s, function () {",
									"",
									"        if (typeof jsonValue.languages[s].fluencyId === typeof data['add_callList_languages_fluencyId'+j+s]) {",
									"          pm.expect(data['languages_fluencyId'+j+s]).to.eql(jsonValue.languages[s].fluencyId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.languages[s].fluencyId, data['add_callList_languages_fluencyId'+j+s], function () { });",
									"",
									"          var confluencyId = conversionData;",
									"          pm.expect(jsonValue.languages[s].fluencyId).to.eql(confluencyId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"",
									"//*******Assertion of Key : homeCountryIds   *********",
									"  pm.test(\"Assert Type of homeCountryId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.homeCountryId).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of homeCountryId\"+j, function () {",
									"",
									"        if (typeof jsonValue.homeCountryId === typeof data['add_callList_homeCountryId'+j]) {",
									"          pm.expect(data['add_callList_homeCountryId'+j]).to.eql(jsonValue.homeCountryId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.homeCountryId, data['add_callList_homeCountryId'+j], function () { });",
									"",
									"          var conhomeCountryId = conversionData;",
									"          pm.expect(jsonValue.homeCountryId).to.eql(conhomeCountryId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : maritalStatusIds   *********",
									"  pm.test(\"Assert Type of maritalStatusId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.maritalStatusId).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of maritalStatusId\"+j, function () {",
									"",
									"        if (typeof jsonValue.maritalStatusId === typeof data['add_callList_maritalStatusId'+j]) {",
									"          pm.expect(data['add_callList_maritalStatusId'+j]).to.eql(jsonValue.maritalStatusId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.maritalStatusId, data['add_callList_maritalStatusId'+j], function () { });",
									"",
									"          var conmaritalStatusId = conversionData;",
									"          pm.expect(jsonValue.maritalStatusId).to.eql(conmaritalStatusId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : spouseNames   *********",
									"  pm.test(\"Assert Type of spouseName\"+j, function () {",
									"    if(jsonValue.spouseName===null){",
									"        var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of spouseName\"+j, function () {",
									"",
									"        if (typeof jsonValue.spouseName === typeof data['add_callList_spouseName'+j]) {",
									"          pm.expect(data['add_callList_spouseName'+j]).to.eql(jsonValue.spouseName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.spouseName, data['add_callList_spouseName'+j], function () { });",
									"",
									"          var conspouseName = conversionData;",
									"          pm.expect(jsonValue.spouseName).to.eql(conspouseName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"",
									"//*******Assertion of Key : childrens   *********",
									"  pm.test(\"Assert Type of children\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.children).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of children\"+j, function () {",
									"",
									"        if (typeof jsonValue.children === typeof data['add_callList_children'+j]) {",
									"          pm.expect(data['add_callList_children'+j]).to.eql(jsonValue.children);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.children, data['add_callList_children'+j], function () { });",
									"",
									"          var conchildren = conversionData;",
									"          pm.expect(jsonValue.children).to.eql(conchildren);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : whoKnowsBests   *********",
									"  pm.test(\"Assert Type of whoKnowsBest\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.whoKnowsBest).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of whoKnowsBest\"+j, function () {",
									"",
									"        if (typeof jsonValue.whoKnowsBest === typeof data['add_callList_whoKnowsBest'+j]) {",
									"          pm.expect(data['add_callList_whoKnowsBest'+j]).to.eql(jsonValue.whoKnowsBest);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.whoKnowsBest, data['add_callList_whoKnowsBest'+j], function () { });",
									"",
									"          var conwhoKnowsBest = conversionData;",
									"          pm.expect(jsonValue.whoKnowsBest).to.eql(conwhoKnowsBest);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : relationshipss   *********",
									"  pm.test(\"Assert Type of relationships\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.relationships).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of relationships\"+j, function () {",
									"",
									"        if (typeof jsonValue.relationships === typeof data['add_callList_relationships'+j]) {",
									"          pm.expect(data['add_callList_relationships'+j]).to.eql(jsonValue.relationships);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.relationships, data['add_callList_relationships'+j], function () { });",
									"",
									"          var conrelationships = conversionData;",
									"          pm.expect(jsonValue.relationships).to.eql(conrelationships);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"  ",
									"//*******Assertion of Key : assignmentIdss   *********",
									"for(var v=0;v<jsonValue.assignmentIds.length;v++){",
									"",
									"  pm.test(\"Assert Type of assignmentIds\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.assignmentIds).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of assignmentIds\"+j, function () {",
									"",
									"        if (typeof jsonValue.assignmentIds[v] === typeof data['add_callList_assignmentIds'+j]) {",
									"          pm.expect(data['add_callList_assignmentIds'+j]).to.eql(jsonValue.assignmentIds[v]);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assignmentIds[v], data['add_callList_assignmentIds'+j], function () { });",
									"",
									"          var conassignmentIds = conversionData;",
									"          pm.expect(jsonValue.assignmentIds[v]).to.eql(conassignmentIds);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "deviceId",
								"type": "text",
								"value": "null"
							},
							{
								"key": "userId",
								"type": "text",
								"value": "{{userid}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Auth}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"personId\": \"10482\",\r\n    \"entityTypeId\": \"5\",\r\n    \"entityId\": \"4\"\r\n  }\r\n] \r\n\r\n/*[\r\n  {\r\n    \"personId\": \"{{add_callList_id0}}\",\r\n    \"entityTypeId\": \"{{entityTypeId}}\",\r\n    \"entityId\": \"{{entityId}}\",\r\n    \"context\": \"{{context}}\",\r\n    \"contextTypeId\" : \"{{contextTypeId}}\"\r\n  }\r\n] */",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/call-list",
							"host": [
								"{{url}}"
							],
							"path": [
								"call-list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_CallList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();",
									"var conversionData;",
									"var jsonValue=jsonData;",
									"",
									"",
									"function valCallBack(type,value,callback)",
									"{",
									"    if(typeof(type)==='string')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        conversionData=value.toString();",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    else if(typeof(type)==='boolean'){",
									"        switch(typeof value){",
									"            case \"string\":",
									"               switch(value.toLowerCase()) ",
									"                         {",
									"            case \"false\": ",
									"                conversionData= false;",
									"                callback(conversionData);",
									"                break;   ",
									"            case \"true\": ",
									"                conversionData= true;",
									"                callback(conversionData);",
									"                break; ",
									"            default: conversionData=true;",
									"                callback(conversionData);",
									"              ",
									"          }",
									"",
									"                callback(conversionData);",
									"                break;  ",
									"        }",
									"    }",
									"    else if(typeof(type)==='number')",
									"    {",
									"        ",
									"    switch (typeof(value)) ",
									"        {",
									"      case \"string\":",
									"        conversionData=parseInt(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }else if(typeof(type)==='undefined')",
									"    {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    }else if(typeof(type)==='object')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        var num1=value.toString();",
									"        conversionData=JSON.parse(num1);",
									"        callback(conversionData);",
									"        break;",
									"      case \"string\":",
									"        conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    ",
									"    else if(typeof(type)==='function')",
									"    {",
									"        ",
									"        callback(conversionData);",
									"    }",
									"    return  conversionData;",
									"}",
									"",
									"",
									"",
									"",
									"for (j=0;j<jsonData.length;j++){",
									"",
									"  jsonValue=jsonData[j];",
									"  var k=0;",
									"",
									"",
									"  pm.test(\"Check if Call List object contains all provided keys\",function()",
									"    {",
									"      pm.expect(jsonValue).to.have.all.keys('boardexStatus','boardexData','DCFStatus','createdAt','lastModifiedAt','id','firstName','lastName','group1','group2','priorityId','todoNote','linkedinProfileUrl','assistant','qualifications','contactDetails','workHistory','blocks','addedToCallListAt','context','contextTypeId','geoMobilityNotes','birthday','principalNationalityId','languages','homeCountryId','maritalStatusId','spouseName','children','whoKnowsBest','relationships','assignmentIds');",
									"  }); ",
									"",
									"pm.environment.set(\"addedToCallListAt\",jsonValue.addedToCallListAt);",
									"",
									"//    pm.test(\"Check if ETP Relationship assistant object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.assistant).to.have.all.keys('phoneNumber','fullName','email','extension');",
									"//   }); ",
									"",
									"//   pm.test(\"Check if ETP Relationship qualifications object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.qualifications).to.have.all.keys('earnedAt','title','institution','country');",
									"//   }); ",
									"",
									"// pm.test(\"Check if ETP Relationship contactDetails object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.contactDetails).to.have.all.keys('label','value','icon','isDefault','lastModifiedAt');",
									"//   }); ",
									"",
									"//   pm.test(\"Check if ETP Relationship workHistory object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.workHistory).to.have.all.keys('startedAt','endedAt','title','company','country','isPrimary','isHired','isNED','sequenceNumber','compensation');",
									"//   }); ",
									"",
									"//   pm.test(\"Check if ETP Relationship Launguages object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.languages).to.have.all.keys('languageId','fluencyId');",
									"//   });",
									"",
									"  //*******Assertion of Key : boardexStatuss   *********",
									"  pm.test(\"Assert Type of boardexStatus\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.boardexStatus).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of boardexStatus\"+j, function () {",
									"",
									"        if (typeof jsonValue.boardexStatus === typeof data['callList_boardexStatus'+j]) {",
									"          pm.expect(data['callList_boardexStatus'+j]).to.eql(jsonValue.boardexStatus);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.boardexStatus, data['callList_boardexStatus'+j], function () { });",
									"",
									"          var conboardexStatus = conversionData;",
									"          pm.expect(jsonValue.boardexStatus).to.eql(conboardexStatus);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : boardexDatas   *********",
									"  pm.test(\"Assert Type of boardexData\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.boardexData).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of boardexData\"+j, function () {",
									"",
									"        if (typeof jsonValue.boardexData === typeof data['boardexData'+j]) {",
									"          pm.expect(data['boardexData'+j]).to.eql(jsonValue.boardexData);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.boardexData, data['boardexData'+j], function () { });",
									"",
									"          var conboardexData = conversionData;",
									"          pm.expect(jsonValue.boardexData).to.eql(conboardexData);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"  //*******Assertion of Key : DCFStatuss   *********",
									"  pm.test(\"Assert Type of DCFStatus\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.DCFStatus).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of DCFStatus\"+j, function () {",
									"",
									"        if (typeof jsonValue.DCFStatus === typeof data['callList_DCFStatus'+j]) {",
									"          pm.expect(data['callList_DCFStatus'+j]).to.eql(jsonValue.DCFStatus);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.DCFStatus, data['callList_DCFStatus'+j], function () { });",
									"",
									"          var conDCFStatus = conversionData;",
									"          pm.expect(jsonValue.DCFStatus).to.eql(conDCFStatus);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : createdAts   *********",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of createdAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.createdAt === typeof data['createdAt'+j]) {",
									"          pm.expect(data['createdAt'+j]).to.eql(jsonValue.createdAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.createdAt, data['createdAt'+j], function () { });",
									"",
									"          var concreatedAt = conversionData;",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : lastModifiedAts   *********",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.lastModifiedAt === typeof data['lastModifiedAt'+j]) {",
									"          pm.expect(data['lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.lastModifiedAt, data['lastModifiedAt'+j], function () { });",
									"",
									"          var conlastModifiedAt = conversionData;",
									"          pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : ids   *********",
									"  pm.test(\"Assert Type of id\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of id\"+j, function () {",
									"",
									"        if (typeof jsonValue.id === typeof data['id'+j]) {",
									"          pm.expect(data['id'+j]).to.eql(jsonValue.id);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.id, data['id'+j], function () { });",
									"",
									"          var conid = conversionData;",
									"          pm.expect(jsonValue.id).to.eql(conid);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : firstNames   *********",
									"  pm.test(\"Assert Type of firstName\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.firstName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of firstName\"+j, function () {",
									"",
									"        if (typeof jsonValue.firstName === typeof data['firstName'+j]) {",
									"          pm.expect(data['firstName'+j]).to.eql(jsonValue.firstName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.firstName, data['firstName'+j], function () { });",
									"",
									"          var confirstName = conversionData;",
									"          pm.expect(jsonValue.firstName).to.eql(confirstName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : lastNames   *********",
									"  pm.test(\"Assert Type of lastName\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.lastName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of lastName\"+j, function () {",
									"",
									"        if (typeof jsonValue.lastName === typeof data['lastName'+j]) {",
									"          pm.expect(data['lastName'+j]).to.eql(jsonValue.lastName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.lastName, data['lastName'+j], function () { });",
									"",
									"          var conlastName = conversionData;",
									"          pm.expect(jsonValue.lastName).to.eql(conlastName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : group1s   *********",
									"  pm.test(\"Assert Type of group1\"+j, function () {",
									"    if(jsonValue.group1===null){",
									"      var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of group1\"+j, function () {",
									"",
									"        if (typeof jsonValue.group1 === typeof data['group1'+j]) {",
									"          pm.expect(data['group1'+j]).to.eql(jsonValue.group1);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.group1, data['group1'+j], function () { });",
									"",
									"          var congroup1 = conversionData;",
									"          pm.expect(jsonValue.group1).to.eql(congroup1);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : group2s   *********",
									"  pm.test(\"Assert Type of group2\"+j, function () {",
									"     if(jsonValue.group2===null){",
									"      var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of group2\"+j, function () {",
									"",
									"        if (typeof jsonValue.group2 === typeof data['group2'+j]) {",
									"          pm.expect(data['group2'+j]).to.eql(jsonValue.group2);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.group2, data['group2'+j], function () { });",
									"",
									"          var congroup2 = conversionData;",
									"          pm.expect(jsonValue.group2).to.eql(congroup2);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : priorityIds   *********",
									"  pm.test(\"Assert Type of priorityId\"+j, function () {",
									"     if(jsonValue.priorityId===null){",
									"      var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"",
									"    var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of priorityId\"+j, function () {",
									"",
									"        if (typeof jsonValue.priorityId === typeof data['priorityId'+j]) {",
									"          pm.expect(data['priorityId'+j]).to.eql(jsonValue.priorityId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.priorityId, data['priorityId'+j], function () { });",
									"",
									"          var conpriorityId = conversionData;",
									"          pm.expect(jsonValue.priorityId).to.eql(conpriorityId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"    }",
									"  });",
									"",
									"//*******Assertion of Key : todoNotes   *********",
									"  pm.test(\"Assert Type of todoNote\"+j, function () {",
									"     if(jsonValue.todoNote===null){",
									"      var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of todoNote\"+j, function () {",
									"",
									"        if (typeof jsonValue.todoNote === typeof data['todoNote'+j]) {",
									"          pm.expect(data['todoNote'+j]).to.eql(jsonValue.todoNote);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.todoNote, data['todoNote'+j], function () { });",
									"",
									"          var contodoNote = conversionData;",
									"          pm.expect(jsonValue.todoNote).to.eql(contodoNote);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : linkedinProfileUrls   *********",
									"  pm.test(\"Assert Type of linkedinProfileUrl\"+j, function () {",
									"    if(jsonValue.linkedinProfileUrl===null){",
									"      var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of linkedinProfileUrl\"+j, function () {",
									"",
									"        if (typeof jsonValue.linkedinProfileUrl === typeof data['linkedinProfileUrl'+j]) {",
									"          pm.expect(data['linkedinProfileUrl'+j]).to.eql(jsonValue.linkedinProfileUrl);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.linkedinProfileUrl, data['linkedinProfileUrl'+j], function () { });",
									"",
									"          var conlinkedinProfileUrl = conversionData;",
									"          pm.expect(jsonValue.linkedinProfileUrl).to.eql(conlinkedinProfileUrl);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"  //verifying the Assistant assertion: ",
									"",
									"  for(var u=0;u<jsonValue.assistant.length;u++){",
									"//*******Assertion of Key : phoneNumbers   *********",
									"  pm.test(\"Assert Type of phoneNumber\"+j, function () {",
									"    if(jsonValue.assistant[u].phoneNumber===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of phoneNumber\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].phoneNumber === typeof data['assistant_phoneNumber'+j+u]) {",
									"          pm.expect(data['assistant_phoneNumber'+j+u]).to.eql(jsonValue.assistant[u].phoneNumber);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].phoneNumber, data['assistant_phoneNumber'+j+u], function () { });",
									"",
									"          var conphoneNumber = conversionData;",
									"          pm.expect(jsonValue.assistant[u].phoneNumber).to.eql(conphoneNumber);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : fullNames   *********",
									"  pm.test(\"Assert Type of fullName\"+j, function () {",
									"    if(jsonValue.assistant[u].fullName===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of fullName\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].fullName === typeof data['assistant_fullName'+j+u]) {",
									"          pm.expect(data['assistant_fullName'+j+u]).to.eql(jsonValue.assistant[u].fullName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].fullName, data['assistant_fullName'+j+u], function () { });",
									"",
									"          var confullName = conversionData;",
									"          pm.expect(jsonValue.assistant[u].fullName).to.eql(confullName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"    }",
									"  });",
									"",
									"//*******Assertion of Key : emails   *********",
									"  pm.test(\"Assert Type of email\"+j, function () {",
									"    if(jsonValue.assistant[u].email===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of email\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].email === typeof data['assistant_email'+j+u]) {",
									"          pm.expect(data['assistant_email'+j+u]).to.eql(jsonValue.assistant[u].email);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].email, data['assistant_email'+j+u], function () { });",
									"",
									"          var conemail = conversionData;",
									"          pm.expect(jsonValue.assistant[u].email).to.eql(conemail);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : extensions   *********",
									"  pm.test(\"Assert Type of extension\"+j, function () {",
									"    if(jsonValue.assistant[u].extension===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of extension\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].extension === typeof data['assistant_extension'+j+u]) {",
									"          pm.expect(data['assistant_extension'+j+u]).to.eql(jsonValue.assistant[u].extension);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].extension, data['assistant_extension'+j+u], function () { });",
									"",
									"          var conextension = conversionData;",
									"          pm.expect(jsonValue.assistant[u].extension).to.eql(conextension);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"    }",
									"  });",
									"}",
									"",
									"// Verifying Qualification assertions:",
									"for(var m=0;m<jsonValue.qualifications.length;m++){",
									"",
									"  //*******Assertion of Key : earnedAts   *********",
									"  pm.test(\"Assert Type of earnedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].earnedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of earnedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].earnedAt === typeof data['qualifications_earnedAt'+j+m]) {",
									"          pm.expect(data['qualifications_earnedAt'+j+m]).to.eql(jsonValue.qualifications[m].earnedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].earnedAt, data['qualifications_earnedAt'+j+m], function () { });",
									"",
									"          var conearnedAt = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].earnedAt).to.eql(conearnedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : titles   *********",
									"  pm.test(\"Assert Type of title\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].title).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of title\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].title === typeof data['qualifications_title'+j+m]) {",
									"          pm.expect(data['qualifications_title'+j+m]).to.eql(jsonValue.qualifications[m].title);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].title, data['qualifications_title'+j+m], function () { });",
									"",
									"          var contitle = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].title).to.eql(contitle);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : institutions   *********",
									"  pm.test(\"Assert Type of institution\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].institution).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of institution\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].institution === typeof data['qualifications_institution'+j+m]) {",
									"          pm.expect(data['qualifications_institution'+j+m]).to.eql(jsonValue.qualifications[m].institution);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].institution, data['qualifications_institution'+j+m], function () { });",
									"",
									"          var coninstitution = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].institution).to.eql(coninstitution);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : countrys   *********",
									"  pm.test(\"Assert Type of country\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].country).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of country\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].country === typeof data['qualifications_country'+j+m]) {",
									"          pm.expect(data['qualifications_country'+j+m]).to.eql(jsonValue.qualifications[m].country);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].country, data['qualifications_country'+j+m], function () { });",
									"",
									"          var concountry = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].country).to.eql(concountry);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"}",
									"",
									"//verifying the contactDetails assertions:",
									"",
									"for(var n=0;n<jsonValue.contactDetails.length;n++){",
									"",
									"//*******Assertion of Key : labels   *********",
									"  pm.test(\"Assert Type of label\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].label).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of label\"+j, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].label === typeof data['contactDetails_label'+j+n]) {",
									"          pm.expect(data['contactDetails_label'+j+n]).to.eql(jsonValue.contactDetails[n].label);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].label, data['contactDetails_label'+j+n], function () { });",
									"",
									"          var conlabel = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].label).to.eql(conlabel);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : values   *********",
									"  pm.test(\"Assert Type of value\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].value).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of value\"+j, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].value === typeof data['contactDetails_value'+j+n]) {",
									"          pm.expect(data['contactDetails_value'+j+n]).to.eql(jsonValue.contactDetails[n].value);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].value, data['contactDetails_value'+j+n], function () { });",
									"",
									"          var convalue = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].value).to.eql(convalue);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : icons   *********",
									"  pm.test(\"Assert Type of icon\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].icon).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of icon\"+j+n, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].icon === typeof data['contactDetails_icon'+j+n]) {",
									"          pm.expect(data['contactDetails_icon'+j+n]).to.eql(jsonValue.contactDetails[n].icon);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].icon, data['contactDetails_icon'+j+n], function () { });",
									"",
									"          var conicon = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].icon).to.eql(conicon);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : isDefaults   *********",
									"  pm.test(\"Assert Type of isDefault\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].isDefault).to.be.eql(data['typeOfBoolean']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of isDefault\"+j, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].isDefault === typeof data['contactDetails_isDefault'+j+n]) {",
									"          pm.expect(data['contactDetails_isDefault'+j+n]).to.eql(jsonValue.contactDetails[n].isDefault);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].isDefault, data['contactDetails_isDefault'+j+n], function () { });",
									"",
									"          var conisDefault = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].isDefault).to.eql(conisDefault);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : lastModifiedAts   *********",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].lastModifiedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of lastModifiedAt\"+j+n, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].lastModifiedAt === typeof data['contactDetails_lastModifiedAt'+j+n]) {",
									"          pm.expect(data['contactDetails_lastModifiedAt'+j+n]).to.eql(jsonValue.contactDetails[n].lastModifiedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].lastModifiedAt, data['contactDetails_lastModifiedAt'+j+n], function () { });",
									"",
									"          var conlastModifiedAt = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].lastModifiedAt).to.eql(conlastModifiedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"",
									"//Workhistory assertions:",
									"",
									"for(var t=0;t<jsonValue.workHistory.length;t++){",
									"",
									"//*******Assertion of Key : startedAts   *********",
									"  pm.test(\"Assert Type of startedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].startedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of startedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].startedAt === typeof data['workHistory_startedAt'+j+t]) {",
									"          pm.expect(data['workHistory_startedAt'+j+t]).to.eql(jsonValue.workHistory[t].startedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].startedAt, data['workHistory_startedAt'+j+t], function () { });",
									"",
									"          var constartedAt = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].startedAt).to.eql(constartedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : endedAts   *********",
									"  pm.test(\"Assert Type of endedAt\"+j, function () {",
									"    if(jsonValue.workHistory[t].endedAt===null){",
									"       var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of endedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].endedAt === typeof data['workHistory_endedAt'+j+t]) {",
									"          pm.expect(data['workHistory_endedAt'+j+t]).to.eql(jsonValue.workHistory[t].endedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].endedAt, data['workHistory_endedAt'+j+t], function () { });",
									"",
									"          var conendedAt = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].endedAt).to.eql(conendedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : titles   *********",
									"  pm.test(\"Assert Type of title\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].title).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of title\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].title === typeof data['workHistory_title'+j+t]) {",
									"          pm.expect(data['workHistory_title'+j+t]).to.eql(jsonValue.workHistory[t].title);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].title, data['workHistory_title'+j+t], function () { });",
									"",
									"          var contitle = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].title).to.eql(contitle);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : companys   *********",
									"  pm.test(\"Assert Type of company\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].company).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of company\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].company === typeof data['workHistory_company'+j+t]) {",
									"          pm.expect(data['workHistory_company'+j+t]).to.eql(jsonValue.workHistory[t].company);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].company, data['workHistory_company'+j+t], function () { });",
									"",
									"          var concompany = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].company).to.eql(concompany);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : countrys   *********",
									"  pm.test(\"Assert Type of country\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].country).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of country\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].country === typeof data['workHistory_country'+j+t]) {",
									"          pm.expect(data['workHistory_country'+j+t]).to.eql(jsonValue.workHistory[t].country);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].country, data['workHistory_country'+j+t], function () { });",
									"",
									"          var concountry = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].country).to.eql(concountry);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : isHireds   *********",
									"  pm.test(\"Assert Type of isHired\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isHired).to.be.eql(data['typeOfBoolean']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of isHired\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].isHired === typeof data['workHistory_isHired'+j+t]) {",
									"          pm.expect(data['workHistory_isHired'+j+t]).to.eql(jsonValue.workHistory[t].isHired);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].isHired, data['workHistory_isHired'+j+t], function () { });",
									"",
									"          var conisHired = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].isHired).to.eql(conisHired);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : isNEDs   *********",
									"  pm.test(\"Assert Type of isNED\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isNED).to.be.eql(data['typeOfBoolean']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of isNED\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].isNED === typeof data['workHistory_isNED'+j+t]) {",
									"          pm.expect(data['workHistory_isNED'+j+t]).to.eql(jsonValue.workHistory[t].isNED);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].isNED, data['workHistory_isNED'+j+t], function () { });",
									"",
									"          var conisNED = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].isNED).to.eql(conisNED);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : sequenceNumbers   *********",
									"  pm.test(\"Assert Type of sequenceNumber\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].sequenceNumber).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of sequenceNumber\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].sequenceNumber === typeof data['workHistory_sequenceNumber'+j+t]) {",
									"          pm.expect(data['workHistory_sequenceNumber'+j+t]).to.eql(jsonValue.workHistory[t].sequenceNumber);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].sequenceNumber, data['workHistory_sequenceNumber'+j+t], function () { });",
									"",
									"          var consequenceNumber = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].sequenceNumber).to.eql(consequenceNumber);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"// Workhistory Compensation assertion",
									"jsonWorkHistory=jsonValue.workHistory[t]",
									"if(jsonWorkHistory.compensation===null){",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation).to.be.eql(data['typeOfObject']);",
									"  });",
									"}else{",
									"",
									"//*******Assertion of Key : currencyIds   *********",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.currencyId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of currencyId\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.currencyId === typeof data['workHistory_compensation_currencyId'+j+t]) {",
									"          pm.expect(data['workHistory_compensation_currencyId'+j+t]).to.eql(jsonWorkHistory.compensation.currencyId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.currencyId, data['workHistory_compensation_currencyId'+j+t], function () { });",
									"",
									"          var concurrencyId = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.currencyId).to.eql(concurrencyId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : baseSalarys   *********",
									"  pm.test(\"Assert Type of baseSalary\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.baseSalary).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of baseSalary\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.baseSalary === typeof data['workHistory_compensation_baseSalary'+j+t]) {",
									"          pm.expect(data['workHistory_compensation_baseSalary'+j+t]).to.eql(jsonWorkHistory.compensation.baseSalary);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.baseSalary, data['workHistory_compensation_baseSalary'+j+t], function () { });",
									"",
									"          var conbaseSalary = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.baseSalary).to.eql(conbaseSalary);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : totalEstimatedCompensations   *********",
									"  pm.test(\"Assert Type of totalEstimatedCompensation\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.totalEstimatedCompensation).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of totalEstimatedCompensation\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.totalEstimatedCompensation === typeof data['workHistory_compensation_totalEstimatedCompensation'+j+t]) {",
									"          pm.expect(data['workHistory_compensation_totalEstimatedCompensation'+j+t]).to.eql(jsonWorkHistory.compensation.totalEstimatedCompensation);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.totalEstimatedCompensation, data['workHistory_compensation_totalEstimatedCompensation'+j+t], function () { });",
									"",
									"          var contotalEstimatedCompensation = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.totalEstimatedCompensation).to.eql(contotalEstimatedCompensation);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : compensationDates   *********",
									"  pm.test(\"Assert Type of compensationDate\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.compensationDate).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of compensationDate\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.compensationDate === typeof data['workHistory_compensation_compensationDate'+j+t]) {",
									"          pm.expect(data['workHistory_compensation_compensationDate'+j+t]).to.eql(jsonWorkHistory.compensation.compensationDate);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.compensationDate, data['workHistory_compensation_compensationDate'+j+t], function () { });",
									"",
									"          var concompensationDate = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.compensationDate).to.eql(concompensationDate);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"}",
									"",
									"//*******Assertion of Key : blocks   *********",
									"  pm.test(\"Assert Type of blocks\"+j, function () {",
									"    ",
									"    var testResult = pm.expect(typeof jsonValue.blocks).to.be.eql(data['typeOfObject']);",
									"    if (testResult) {",
									"      pm.test(\"Assert value of blocks\"+j, function () {",
									"",
									"        if (typeof jsonValue.blocks === typeof data['blocks'+j]) {",
									"          pm.expect(data['blocks'+j]).to.eql(jsonValue.blocks);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.blocks, data['blocks'+j], function () { });",
									"",
									"          var conblocks = conversionData;",
									"          pm.expect(jsonValue.blocks).to.eql(conblocks);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : addedToCallListAts   *********",
									"  pm.test(\"Assert Type of addedToCallListAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.addedToCallListAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of addedToCallListAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.addedToCallListAt === typeof pm.environment.get(\"addedToCallListAt\")) {",
									"          pm.expect(pm.environment.get(\"addedToCallListAt\")).to.eql(jsonValue.addedToCallListAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.addedToCallListAt, pm.environment.get(\"addedToCallListAt\"), function () { });",
									"",
									"          var conaddedToCallListAt = conversionData;",
									"          pm.expect(jsonValue.addedToCallListAt).to.eql(conaddedToCallListAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"",
									"",
									"//*******Assertion of Key : contextTypeIds   *********",
									"  pm.test(\"Assert Type of contextTypeId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contextTypeId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of contextTypeId\"+j, function () {",
									"",
									"        if (typeof jsonValue.contextTypeId === typeof data['contextTypeId'+j]) {",
									"          pm.expect(data['contextTypeId'+j]).to.eql(jsonValue.contextTypeId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contextTypeId, data['contextTypeId'+j], function () { });",
									"",
									"          var concontextTypeId = conversionData;",
									"          pm.expect(jsonValue.contextTypeId).to.eql(concontextTypeId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : geoMobilityNotess   *********",
									"  pm.test(\"Assert Type of geoMobilityNotes\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.geoMobilityNotes).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of geoMobilityNotes\"+j, function () {",
									"",
									"        if (typeof jsonValue.geoMobilityNotes === typeof data['geoMobilityNotes'+j]) {",
									"          pm.expect(data['geoMobilityNotes'+j]).to.eql(jsonValue.geoMobilityNotes);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.geoMobilityNotes, data['geoMobilityNotes'+j], function () { });",
									"",
									"          var congeoMobilityNotes = conversionData;",
									"          pm.expect(jsonValue.geoMobilityNotes).to.eql(congeoMobilityNotes);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : birthdays   *********",
									"  pm.test(\"Assert Type of birthday\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.birthday).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of birthday\"+j, function () {",
									"",
									"        if (typeof jsonValue.birthday === typeof data['birthday'+j]) {",
									"          pm.expect(data['birthday'+j]).to.eql(jsonValue.birthday);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.birthday, data['birthday'+j], function () { });",
									"",
									"          var conbirthday = conversionData;",
									"          pm.expect(jsonValue.birthday).to.eql(conbirthday);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : principalNationalityIds   *********",
									"  pm.test(\"Assert Type of principalNationalityId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.principalNationalityId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of principalNationalityId\"+j, function () {",
									"",
									"        if (typeof jsonValue.principalNationalityId === typeof data['principalNationalityId'+j]) {",
									"          pm.expect(data['principalNationalityId'+j]).to.eql(jsonValue.principalNationalityId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.principalNationalityId, data['principalNationalityId'+j], function () { });",
									"",
									"          var conprincipalNationalityId = conversionData;",
									"          pm.expect(jsonValue.principalNationalityId).to.eql(conprincipalNationalityId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//Launguages assertions:",
									"for(var s=0;s<jsonValue.languages.length;s++){",
									"//*******Assertion of Key : languageIds   *********",
									"  pm.test(\"Assert Type of languageId\"+j+s, function () {",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].languageId).to.be.eql(data['typeOfString']);",
									"   ",
									"    if (testResult) {",
									"      pm.test(\"Assert value of languageId\"+j+s, function () {",
									"",
									"        if (typeof jsonValue.languages[s].languageId === typeof data['languages_languageId'+j+s]) {",
									"          pm.expect(data['languages_languageId'+j+s]).to.eql(jsonValue.languages[s].languageId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.languages[s].languageId, data['languages_languageId'+j+s], function () { });",
									"",
									"          var conlanguageId = conversionData;",
									"          pm.expect(jsonValue.languages[s].languageId).to.eql(conlanguageId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : fluencyIds   *********",
									"  pm.test(\"Assert Type of fluencyId\"+j+s, function () {",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].fluencyId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of fluencyId\"+j+s, function () {",
									"",
									"        if (typeof jsonValue.languages[s].fluencyId === typeof data['languages_fluencyId'+j+s]) {",
									"          pm.expect(data['languages_fluencyId'+j+s]).to.eql(jsonValue.languages[s].fluencyId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.languages[s].fluencyId, data['languages_fluencyId'+j+s], function () { });",
									"",
									"          var confluencyId = conversionData;",
									"          pm.expect(jsonValue.languages[s].fluencyId).to.eql(confluencyId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"",
									"//*******Assertion of Key : homeCountryIds   *********",
									"  pm.test(\"Assert Type of homeCountryId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.homeCountryId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of homeCountryId\"+j, function () {",
									"",
									"        if (typeof jsonValue.homeCountryId === typeof data['homeCountryId'+j]) {",
									"          pm.expect(data['homeCountryId'+j]).to.eql(jsonValue.homeCountryId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.homeCountryId, data['homeCountryId'+j], function () { });",
									"",
									"          var conhomeCountryId = conversionData;",
									"          pm.expect(jsonValue.homeCountryId).to.eql(conhomeCountryId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : maritalStatusIds   *********",
									"  pm.test(\"Assert Type of maritalStatusId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.maritalStatusId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of maritalStatusId\"+j, function () {",
									"",
									"        if (typeof jsonValue.maritalStatusId === typeof data['maritalStatusId'+j]) {",
									"          pm.expect(data['maritalStatusId'+j]).to.eql(jsonValue.maritalStatusId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.maritalStatusId, data['maritalStatusId'+j], function () { });",
									"",
									"          var conmaritalStatusId = conversionData;",
									"          pm.expect(jsonValue.maritalStatusId).to.eql(conmaritalStatusId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : spouseNames   *********",
									"  pm.test(\"Assert Type of spouseName\"+j, function () {",
									"    if(jsonValue.spouseName===null){",
									"        var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of spouseName\"+j, function () {",
									"",
									"        if (typeof jsonValue.spouseName === typeof data['spouseName'+j]) {",
									"          pm.expect(data['spouseName'+j]).to.eql(jsonValue.spouseName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.spouseName, data['spouseName'+j], function () { });",
									"",
									"          var conspouseName = conversionData;",
									"          pm.expect(jsonValue.spouseName).to.eql(conspouseName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"",
									"//*******Assertion of Key : childrens   *********",
									"  pm.test(\"Assert Type of children\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.children).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of children\"+j, function () {",
									"",
									"        if (typeof jsonValue.children === typeof data['children'+j]) {",
									"          pm.expect(data['children'+j]).to.eql(jsonValue.children);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.children, data['children'+j], function () { });",
									"",
									"          var conchildren = conversionData;",
									"          pm.expect(jsonValue.children).to.eql(conchildren);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : whoKnowsBests   *********",
									"  pm.test(\"Assert Type of whoKnowsBest\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.whoKnowsBest).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of whoKnowsBest\"+j, function () {",
									"",
									"        if (typeof jsonValue.whoKnowsBest === typeof data['whoKnowsBest'+j]) {",
									"          pm.expect(data['whoKnowsBest'+j]).to.eql(jsonValue.whoKnowsBest);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.whoKnowsBest, data['whoKnowsBest'+j], function () { });",
									"",
									"          var conwhoKnowsBest = conversionData;",
									"          pm.expect(jsonValue.whoKnowsBest).to.eql(conwhoKnowsBest);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : relationshipss   *********",
									"  pm.test(\"Assert Type of relationships\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.relationships).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of relationships\"+j, function () {",
									"",
									"        if (typeof jsonValue.relationships === typeof data['relationships'+j]) {",
									"          pm.expect(data['relationships'+j]).to.eql(jsonValue.relationships);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.relationships, data['relationships'+j], function () { });",
									"",
									"          var conrelationships = conversionData;",
									"          pm.expect(jsonValue.relationships).to.eql(conrelationships);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"  ",
									"//*******Assertion of Key : assignmentIdss   *********",
									"for(var v=0;v<jsonValue.assignmentIds.length;v++){",
									"",
									"  pm.test(\"Assert Type of assignmentIds\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.assignmentIds).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of assignmentIds\"+j, function () {",
									"",
									"        if (typeof jsonValue.assignmentIds[v] === typeof data['assignmentIds'+v]) {",
									"          pm.expect(data['assignmentIds'+v]).to.eql(jsonValue.assignmentIds[v]);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assignmentIds[v], data['assignmentIds'+j], function () { });",
									"",
									"          var conassignmentIds = conversionData;",
									"          pm.expect(jsonValue.assignmentIds[v]).to.eql(conassignmentIds);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "deviceId",
								"type": "text",
								"value": "null"
							},
							{
								"key": "userId",
								"type": "text",
								"value": "{{userid}}"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{Auth}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "/*[\r\n  {\r\n    \"personId\": \"{{peopleId}}\",\r\n    \"entityTypeId\": \"{{entityTypeId}}\",\r\n    \"entityId\": \"{{entityId}}\",\r\n    \"context\": \"{{context}}\",\r\n    \"contextTypeId\" : \"{{contextTypeId}}\"\r\n  }\r\n] */",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/call-list/10482",
							"host": [
								"{{url}}"
							],
							"path": [
								"call-list",
								"10482"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put_Edit Call List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();",
									"var conversionData;",
									"var jsonValue=jsonData;",
									"",
									"",
									"function valCallBack(type,value,callback)",
									"{",
									"    if(typeof(type)==='string')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        conversionData=value.toString();",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    else if(typeof(type)==='boolean'){",
									"        switch(typeof value){",
									"            case \"string\":",
									"               switch(value.toLowerCase()) ",
									"                         {",
									"            case \"false\": ",
									"                conversionData= false;",
									"                callback(conversionData);",
									"                break;   ",
									"            case \"true\": ",
									"                conversionData= true;",
									"                callback(conversionData);",
									"                break; ",
									"            default: conversionData=true;",
									"                callback(conversionData);",
									"              ",
									"          }",
									"",
									"                callback(conversionData);",
									"                break;  ",
									"        }",
									"    }",
									"    else if(typeof(type)==='number')",
									"    {",
									"        ",
									"    switch (typeof(value)) ",
									"        {",
									"      case \"string\":",
									"        conversionData=parseInt(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"object\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }else if(typeof(type)==='undefined')",
									"    {",
									"        console.log(typeof(a));",
									"        callback(conversionData);",
									"    }else if(typeof(type)==='object')",
									"    {",
									"        switch (typeof(value)) ",
									"        {",
									"      case \"number\":",
									"        var num1=value.toString();",
									"        conversionData=JSON.parse(num1);",
									"        callback(conversionData);",
									"        break;",
									"      case \"string\":",
									"        conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"boolean\":",
									"         conversionData=JSON.parse(value);",
									"        callback(conversionData);",
									"        break;",
									"      case \"function\":",
									"        conversionData=JSON.stringify(value);",
									"        callback(conversionData);",
									"        break;",
									"        }",
									"    }",
									"    ",
									"    else if(typeof(type)==='function')",
									"    {",
									"        ",
									"        callback(conversionData);",
									"    }",
									"    return  conversionData;",
									"}",
									"",
									"",
									"",
									"",
									"for (j=0;j<jsonData.length;j++){",
									"",
									"  jsonValue=jsonData[j];",
									"  var k=0;",
									"",
									"",
									"  pm.test(\"Check if Call List object contains all provided keys\",function()",
									"    {",
									"      pm.expect(jsonValue).to.have.all.keys('boardexStatus','boardexData','DCFStatus','createdAt','lastModifiedAt','id','firstName','lastName','group1','group2','priorityId','todoNote','linkedinProfileUrl','assistant','qualifications','contactDetails','workHistory','blocks','addedToCallListAt','context','contextTypeId','geoMobilityNotes','birthday','principalNationalityId','languages','homeCountryId','maritalStatusId','spouseName','children','whoKnowsBest','relationships','assignmentIds');",
									"  }); ",
									"",
									"pm.environment.set(\"addedToCallListAt\",jsonValue.addedToCallListAt);",
									"",
									"//    pm.test(\"Check if ETP Relationship assistant object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.assistant).to.have.all.keys('phoneNumber','fullName','email','extension');",
									"//   }); ",
									"",
									"//   pm.test(\"Check if ETP Relationship qualifications object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.qualifications).to.have.all.keys('earnedAt','title','institution','country');",
									"//   }); ",
									"",
									"// pm.test(\"Check if ETP Relationship contactDetails object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.contactDetails).to.have.all.keys('label','value','icon','isDefault','lastModifiedAt');",
									"//   }); ",
									"",
									"//   pm.test(\"Check if ETP Relationship workHistory object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.workHistory).to.have.all.keys('startedAt','endedAt','title','company','country','isPrimary','isHired','isNED','sequenceNumber','compensation');",
									"//   }); ",
									"",
									"//   pm.test(\"Check if ETP Relationship Launguages object contains all provided keys\",function()",
									"//     {",
									"//       pm.expect(jsonValue.languages).to.have.all.keys('languageId','fluencyId');",
									"//   });",
									"",
									"  //*******Assertion of Key : boardexStatuss   *********",
									"  pm.test(\"Assert Type of boardexStatus\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.boardexStatus).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of boardexStatus\"+j, function () {",
									"",
									"        if (typeof jsonValue.boardexStatus === typeof data['callList_boardexStatus'+j]) {",
									"          pm.expect(data['callList_boardexStatus'+j]).to.eql(jsonValue.boardexStatus);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.boardexStatus, data['callList_boardexStatus'+j], function () { });",
									"",
									"          var conboardexStatus = conversionData;",
									"          pm.expect(jsonValue.boardexStatus).to.eql(conboardexStatus);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : boardexDatas   *********",
									"  pm.test(\"Assert Type of boardexData\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.boardexData).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of boardexData\"+j, function () {",
									"",
									"        if (typeof jsonValue.boardexData === typeof data['boardexData'+j]) {",
									"          pm.expect(data['boardexData'+j]).to.eql(jsonValue.boardexData);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.boardexData, data['boardexData'+j], function () { });",
									"",
									"          var conboardexData = conversionData;",
									"          pm.expect(jsonValue.boardexData).to.eql(conboardexData);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"  //*******Assertion of Key : DCFStatuss   *********",
									"  pm.test(\"Assert Type of DCFStatus\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.DCFStatus).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of DCFStatus\"+j, function () {",
									"",
									"        if (typeof jsonValue.DCFStatus === typeof data['callList_DCFStatus'+j]) {",
									"          pm.expect(data['callList_DCFStatus'+j]).to.eql(jsonValue.DCFStatus);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.DCFStatus, data['callList_DCFStatus'+j], function () { });",
									"",
									"          var conDCFStatus = conversionData;",
									"          pm.expect(jsonValue.DCFStatus).to.eql(conDCFStatus);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : createdAts   *********",
									"  pm.test(\"Assert Type of createdAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.createdAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of createdAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.createdAt === typeof data['createdAt'+j]) {",
									"          pm.expect(data['createdAt'+j]).to.eql(jsonValue.createdAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.createdAt, data['createdAt'+j], function () { });",
									"",
									"          var concreatedAt = conversionData;",
									"          pm.expect(jsonValue.createdAt).to.eql(concreatedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : lastModifiedAts   *********",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.lastModifiedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of lastModifiedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.lastModifiedAt === typeof data['lastModifiedAt'+j]) {",
									"          pm.expect(data['lastModifiedAt'+j]).to.eql(jsonValue.lastModifiedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.lastModifiedAt, data['lastModifiedAt'+j], function () { });",
									"",
									"          var conlastModifiedAt = conversionData;",
									"          pm.expect(jsonValue.lastModifiedAt).to.eql(conlastModifiedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : ids   *********",
									"  pm.test(\"Assert Type of id\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.id).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of id\"+j, function () {",
									"",
									"        if (typeof jsonValue.id === typeof data['id'+j]) {",
									"          pm.expect(data['id'+j]).to.eql(jsonValue.id);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.id, data['id'+j], function () { });",
									"",
									"          var conid = conversionData;",
									"          pm.expect(jsonValue.id).to.eql(conid);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : firstNames   *********",
									"  pm.test(\"Assert Type of firstName\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.firstName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of firstName\"+j, function () {",
									"",
									"        if (typeof jsonValue.firstName === typeof data['firstName'+j]) {",
									"          pm.expect(data['firstName'+j]).to.eql(jsonValue.firstName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.firstName, data['firstName'+j], function () { });",
									"",
									"          var confirstName = conversionData;",
									"          pm.expect(jsonValue.firstName).to.eql(confirstName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : lastNames   *********",
									"  pm.test(\"Assert Type of lastName\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.lastName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of lastName\"+j, function () {",
									"",
									"        if (typeof jsonValue.lastName === typeof data['lastName'+j]) {",
									"          pm.expect(data['lastName'+j]).to.eql(jsonValue.lastName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.lastName, data['lastName'+j], function () { });",
									"",
									"          var conlastName = conversionData;",
									"          pm.expect(jsonValue.lastName).to.eql(conlastName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : group1s   *********",
									"  pm.test(\"Assert Type of group1\"+j, function () {",
									"    if(jsonValue.group1===null){",
									"      var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.group1).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of group1\"+j, function () {",
									"",
									"        if (typeof jsonValue.group1 === typeof data['group1'+j]) {",
									"          pm.expect(data['group1'+j]).to.eql(jsonValue.group1);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.group1, data['group1'+j], function () { });",
									"",
									"          var congroup1 = conversionData;",
									"          pm.expect(jsonValue.group1).to.eql(congroup1);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : group2s   *********",
									"  pm.test(\"Assert Type of group2\"+j, function () {",
									"     if(jsonValue.group2===null){",
									"      var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.group2).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of group2\"+j, function () {",
									"",
									"        if (typeof jsonValue.group2 === typeof data['group2'+j]) {",
									"          pm.expect(data['group2'+j]).to.eql(jsonValue.group2);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.group2, data['group2'+j], function () { });",
									"",
									"          var congroup2 = conversionData;",
									"          pm.expect(jsonValue.group2).to.eql(congroup2);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : priorityIds   *********",
									"  pm.test(\"Assert Type of priorityId\"+j, function () {",
									"     if(jsonValue.priorityId===null){",
									"      var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"",
									"    var testResult = pm.expect(typeof jsonValue.priorityId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of priorityId\"+j, function () {",
									"",
									"        if (typeof jsonValue.priorityId === typeof data['priorityId'+j]) {",
									"          pm.expect(data['priorityId'+j]).to.eql(jsonValue.priorityId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.priorityId, data['priorityId'+j], function () { });",
									"",
									"          var conpriorityId = conversionData;",
									"          pm.expect(jsonValue.priorityId).to.eql(conpriorityId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"    }",
									"  });",
									"",
									"//*******Assertion of Key : todoNotes   *********",
									"  pm.test(\"Assert Type of todoNote\"+j, function () {",
									"     if(jsonValue.todoNote===null){",
									"      var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.todoNote).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of todoNote\"+j, function () {",
									"",
									"        if (typeof jsonValue.todoNote === typeof data['todoNote'+j]) {",
									"          pm.expect(data['todoNote'+j]).to.eql(jsonValue.todoNote);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.todoNote, data['todoNote'+j], function () { });",
									"",
									"          var contodoNote = conversionData;",
									"          pm.expect(jsonValue.todoNote).to.eql(contodoNote);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : linkedinProfileUrls   *********",
									"  pm.test(\"Assert Type of linkedinProfileUrl\"+j, function () {",
									"    if(jsonValue.linkedinProfileUrl===null){",
									"      var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.linkedinProfileUrl).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of linkedinProfileUrl\"+j, function () {",
									"",
									"        if (typeof jsonValue.linkedinProfileUrl === typeof data['linkedinProfileUrl'+j]) {",
									"          pm.expect(data['linkedinProfileUrl'+j]).to.eql(jsonValue.linkedinProfileUrl);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.linkedinProfileUrl, data['linkedinProfileUrl'+j], function () { });",
									"",
									"          var conlinkedinProfileUrl = conversionData;",
									"          pm.expect(jsonValue.linkedinProfileUrl).to.eql(conlinkedinProfileUrl);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"  //verifying the Assistant assertion: ",
									"",
									"  for(var u=0;u<jsonValue.assistant.length;u++){",
									"//*******Assertion of Key : phoneNumbers   *********",
									"  pm.test(\"Assert Type of phoneNumber\"+j, function () {",
									"    if(jsonValue.assistant[u].phoneNumber===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].phoneNumber).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of phoneNumber\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].phoneNumber === typeof data['assistant_phoneNumber'+j+u]) {",
									"          pm.expect(data['assistant_phoneNumber'+j+u]).to.eql(jsonValue.assistant[u].phoneNumber);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].phoneNumber, data['assistant_phoneNumber'+j+u], function () { });",
									"",
									"          var conphoneNumber = conversionData;",
									"          pm.expect(jsonValue.assistant[u].phoneNumber).to.eql(conphoneNumber);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : fullNames   *********",
									"  pm.test(\"Assert Type of fullName\"+j, function () {",
									"    if(jsonValue.assistant[u].fullName===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].fullName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of fullName\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].fullName === typeof data['assistant_fullName'+j+u]) {",
									"          pm.expect(data['assistant_fullName'+j+u]).to.eql(jsonValue.assistant[u].fullName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].fullName, data['assistant_fullName'+j+u], function () { });",
									"",
									"          var confullName = conversionData;",
									"          pm.expect(jsonValue.assistant[u].fullName).to.eql(confullName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"    }",
									"  });",
									"",
									"//*******Assertion of Key : emails   *********",
									"  pm.test(\"Assert Type of email\"+j, function () {",
									"    if(jsonValue.assistant[u].email===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].email).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of email\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].email === typeof data['assistant_email'+j+u]) {",
									"          pm.expect(data['assistant_email'+j+u]).to.eql(jsonValue.assistant[u].email);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].email, data['assistant_email'+j+u], function () { });",
									"",
									"          var conemail = conversionData;",
									"          pm.expect(jsonValue.assistant[u].email).to.eql(conemail);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : extensions   *********",
									"  pm.test(\"Assert Type of extension\"+j, function () {",
									"    if(jsonValue.assistant[u].extension===null){",
									"      var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.assistant[u].extension).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of extension\"+j, function () {",
									"",
									"        if (typeof jsonValue.assistant[u].extension === typeof data['assistant_extension'+j+u]) {",
									"          pm.expect(data['assistant_extension'+j+u]).to.eql(jsonValue.assistant[u].extension);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assistant[u].extension, data['assistant_extension'+j+u], function () { });",
									"",
									"          var conextension = conversionData;",
									"          pm.expect(jsonValue.assistant[u].extension).to.eql(conextension);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"    }",
									"  });",
									"}",
									"",
									"// Verifying Qualification assertions:",
									"for(var m=0;m<jsonValue.qualifications.length;m++){",
									"",
									"  //*******Assertion of Key : earnedAts   *********",
									"  pm.test(\"Assert Type of earnedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].earnedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of earnedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].earnedAt === typeof data['qualifications_earnedAt'+j+m]) {",
									"          pm.expect(data['qualifications_earnedAt'+j+m]).to.eql(jsonValue.qualifications[m].earnedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].earnedAt, data['qualifications_earnedAt'+j+m], function () { });",
									"",
									"          var conearnedAt = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].earnedAt).to.eql(conearnedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : titles   *********",
									"  pm.test(\"Assert Type of title\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].title).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of title\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].title === typeof data['qualifications_title'+j+m]) {",
									"          pm.expect(data['qualifications_title'+j+m]).to.eql(jsonValue.qualifications[m].title);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].title, data['qualifications_title'+j+m], function () { });",
									"",
									"          var contitle = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].title).to.eql(contitle);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : institutions   *********",
									"  pm.test(\"Assert Type of institution\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].institution).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of institution\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].institution === typeof data['qualifications_institution'+j+m]) {",
									"          pm.expect(data['qualifications_institution'+j+m]).to.eql(jsonValue.qualifications[m].institution);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].institution, data['qualifications_institution'+j+m], function () { });",
									"",
									"          var coninstitution = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].institution).to.eql(coninstitution);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : countrys   *********",
									"  pm.test(\"Assert Type of country\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.qualifications[m].country).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of country\"+j, function () {",
									"",
									"        if (typeof jsonValue.qualifications[m].country === typeof data['qualifications_country'+j+m]) {",
									"          pm.expect(data['qualifications_country'+j+m]).to.eql(jsonValue.qualifications[m].country);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.qualifications[m].country, data['qualifications_country'+j+m], function () { });",
									"",
									"          var concountry = conversionData;",
									"          pm.expect(jsonValue.qualifications[m].country).to.eql(concountry);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"}",
									"",
									"//verifying the contactDetails assertions:",
									"",
									"for(var n=0;n<jsonValue.contactDetails.length;n++){",
									"",
									"//*******Assertion of Key : labels   *********",
									"  pm.test(\"Assert Type of label\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].label).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of label\"+j, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].label === typeof data['contactDetails_label'+j+n]) {",
									"          pm.expect(data['contactDetails_label'+j+n]).to.eql(jsonValue.contactDetails[n].label);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].label, data['contactDetails_label'+j+n], function () { });",
									"",
									"          var conlabel = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].label).to.eql(conlabel);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : values   *********",
									"  pm.test(\"Assert Type of value\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].value).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of value\"+j, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].value === typeof data['contactDetails_value'+j+n]) {",
									"          pm.expect(data['contactDetails_value'+j+n]).to.eql(jsonValue.contactDetails[n].value);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].value, data['contactDetails_value'+j+n], function () { });",
									"",
									"          var convalue = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].value).to.eql(convalue);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : icons   *********",
									"  pm.test(\"Assert Type of icon\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].icon).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of icon\"+j+n, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].icon === typeof data['contactDetails_icon'+j+n]) {",
									"          pm.expect(data['contactDetails_icon'+j+n]).to.eql(jsonValue.contactDetails[n].icon);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].icon, data['contactDetails_icon'+j+n], function () { });",
									"",
									"          var conicon = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].icon).to.eql(conicon);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : isDefaults   *********",
									"  pm.test(\"Assert Type of isDefault\"+j+n, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].isDefault).to.be.eql(data['typeOfBoolean']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of isDefault\"+j, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].isDefault === typeof data['contactDetails_isDefault'+j+n]) {",
									"          pm.expect(data['contactDetails_isDefault'+j+n]).to.eql(jsonValue.contactDetails[n].isDefault);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].isDefault, data['contactDetails_isDefault'+j+n], function () { });",
									"",
									"          var conisDefault = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].isDefault).to.eql(conisDefault);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : lastModifiedAts   *********",
									"  pm.test(\"Assert Type of lastModifiedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contactDetails[n].lastModifiedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of lastModifiedAt\"+j+n, function () {",
									"",
									"        if (typeof jsonValue.contactDetails[n].lastModifiedAt === typeof data['contactDetails_lastModifiedAt'+j+n]) {",
									"          pm.expect(data['contactDetails_lastModifiedAt'+j+n]).to.eql(jsonValue.contactDetails[n].lastModifiedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contactDetails[n].lastModifiedAt, data['contactDetails_lastModifiedAt'+j+n], function () { });",
									"",
									"          var conlastModifiedAt = conversionData;",
									"          pm.expect(jsonValue.contactDetails[n].lastModifiedAt).to.eql(conlastModifiedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"",
									"//Workhistory assertions:",
									"",
									"for(var t=0;t<jsonValue.workHistory.length;t++){",
									"",
									"//*******Assertion of Key : startedAts   *********",
									"  pm.test(\"Assert Type of startedAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].startedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of startedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].startedAt === typeof data['workHistory_startedAt'+j+t]) {",
									"          pm.expect(data['workHistory_startedAt'+j+t]).to.eql(jsonValue.workHistory[t].startedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].startedAt, data['workHistory_startedAt'+j+t], function () { });",
									"",
									"          var constartedAt = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].startedAt).to.eql(constartedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : endedAts   *********",
									"  pm.test(\"Assert Type of endedAt\"+j, function () {",
									"    if(jsonValue.workHistory[t].endedAt===null){",
									"       var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].endedAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of endedAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].endedAt === typeof data['workHistory_endedAt'+j+t]) {",
									"          pm.expect(data['workHistory_endedAt'+j+t]).to.eql(jsonValue.workHistory[t].endedAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].endedAt, data['workHistory_endedAt'+j+t], function () { });",
									"",
									"          var conendedAt = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].endedAt).to.eql(conendedAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"//*******Assertion of Key : titles   *********",
									"  pm.test(\"Assert Type of title\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].title).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of title\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].title === typeof data['workHistory_title'+j+t]) {",
									"          pm.expect(data['workHistory_title'+j+t]).to.eql(jsonValue.workHistory[t].title);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].title, data['workHistory_title'+j+t], function () { });",
									"",
									"          var contitle = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].title).to.eql(contitle);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : companys   *********",
									"  pm.test(\"Assert Type of company\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].company).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of company\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].company === typeof data['workHistory_company'+j+t]) {",
									"          pm.expect(data['workHistory_company'+j+t]).to.eql(jsonValue.workHistory[t].company);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].company, data['workHistory_company'+j+t], function () { });",
									"",
									"          var concompany = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].company).to.eql(concompany);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : countrys   *********",
									"  pm.test(\"Assert Type of country\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].country).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of country\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].country === typeof data['workHistory_country'+j+t]) {",
									"          pm.expect(data['workHistory_country'+j+t]).to.eql(jsonValue.workHistory[t].country);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].country, data['workHistory_country'+j+t], function () { });",
									"",
									"          var concountry = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].country).to.eql(concountry);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : isHireds   *********",
									"  pm.test(\"Assert Type of isHired\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isHired).to.be.eql(data['typeOfBoolean']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of isHired\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].isHired === typeof data['workHistory_isHired'+j+t]) {",
									"          pm.expect(data['workHistory_isHired'+j+t]).to.eql(jsonValue.workHistory[t].isHired);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].isHired, data['workHistory_isHired'+j+t], function () { });",
									"",
									"          var conisHired = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].isHired).to.eql(conisHired);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : isNEDs   *********",
									"  pm.test(\"Assert Type of isNED\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].isNED).to.be.eql(data['typeOfBoolean']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of isNED\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].isNED === typeof data['workHistory_isNED'+j+t]) {",
									"          pm.expect(data['workHistory_isNED'+j+t]).to.eql(jsonValue.workHistory[t].isNED);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].isNED, data['workHistory_isNED'+j+t], function () { });",
									"",
									"          var conisNED = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].isNED).to.eql(conisNED);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : sequenceNumbers   *********",
									"  pm.test(\"Assert Type of sequenceNumber\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.workHistory[t].sequenceNumber).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of sequenceNumber\"+j, function () {",
									"",
									"        if (typeof jsonValue.workHistory[t].sequenceNumber === typeof data['workHistory_sequenceNumber'+j+t]) {",
									"          pm.expect(data['workHistory_sequenceNumber'+j+t]).to.eql(jsonValue.workHistory[t].sequenceNumber);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.workHistory[t].sequenceNumber, data['workHistory_sequenceNumber'+j+t], function () { });",
									"",
									"          var consequenceNumber = conversionData;",
									"          pm.expect(jsonValue.workHistory[t].sequenceNumber).to.eql(consequenceNumber);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"// Workhistory Compensation assertion",
									"jsonWorkHistory=jsonValue.workHistory[t]",
									"if(jsonWorkHistory.compensation===null){",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation).to.be.eql(data['typeOfObject']);",
									"  });",
									"}else{",
									"",
									"//*******Assertion of Key : currencyIds   *********",
									"  pm.test(\"Assert Type of currencyId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.currencyId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of currencyId\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.currencyId === typeof data['workHistory_compensation_currencyId'+j+t]) {",
									"          pm.expect(data['workHistory_compensation_currencyId'+j+t]).to.eql(jsonWorkHistory.compensation.currencyId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.currencyId, data['workHistory_compensation_currencyId'+j+t], function () { });",
									"",
									"          var concurrencyId = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.currencyId).to.eql(concurrencyId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : baseSalarys   *********",
									"  pm.test(\"Assert Type of baseSalary\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.baseSalary).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of baseSalary\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.baseSalary === typeof data['workHistory_compensation_baseSalary'+j+t]) {",
									"          pm.expect(data['workHistory_compensation_baseSalary'+j+t]).to.eql(jsonWorkHistory.compensation.baseSalary);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.baseSalary, data['workHistory_compensation_baseSalary'+j+t], function () { });",
									"",
									"          var conbaseSalary = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.baseSalary).to.eql(conbaseSalary);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : totalEstimatedCompensations   *********",
									"  pm.test(\"Assert Type of totalEstimatedCompensation\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.totalEstimatedCompensation).to.be.eql(data['typeOfNumber']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of totalEstimatedCompensation\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.totalEstimatedCompensation === typeof data['workHistory_compensation_totalEstimatedCompensation'+j+t]) {",
									"          pm.expect(data['workHistory_compensation_totalEstimatedCompensation'+j+t]).to.eql(jsonWorkHistory.compensation.totalEstimatedCompensation);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.totalEstimatedCompensation, data['workHistory_compensation_totalEstimatedCompensation'+j+t], function () { });",
									"",
									"          var contotalEstimatedCompensation = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.totalEstimatedCompensation).to.eql(contotalEstimatedCompensation);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : compensationDates   *********",
									"  pm.test(\"Assert Type of compensationDate\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonWorkHistory.compensation.compensationDate).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of compensationDate\"+j, function () {",
									"",
									"        if (typeof jsonWorkHistory.compensation.compensationDate === typeof data['workHistory_compensation_compensationDate'+j+t]) {",
									"          pm.expect(data['workHistory_compensation_compensationDate'+j+t]).to.eql(jsonWorkHistory.compensation.compensationDate);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonWorkHistory.compensation.compensationDate, data['workHistory_compensation_compensationDate'+j+t], function () { });",
									"",
									"          var concompensationDate = conversionData;",
									"          pm.expect(jsonWorkHistory.compensation.compensationDate).to.eql(concompensationDate);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"}",
									"",
									"//*******Assertion of Key : blocks   *********",
									"  pm.test(\"Assert Type of blocks\"+j, function () {",
									"    ",
									"    var testResult = pm.expect(typeof jsonValue.blocks).to.be.eql(data['typeOfObject']);",
									"    if (testResult) {",
									"      pm.test(\"Assert value of blocks\"+j, function () {",
									"",
									"        if (typeof jsonValue.blocks === typeof data['blocks'+j]) {",
									"          pm.expect(data['blocks'+j]).to.eql(jsonValue.blocks);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.blocks, data['blocks'+j], function () { });",
									"",
									"          var conblocks = conversionData;",
									"          pm.expect(jsonValue.blocks).to.eql(conblocks);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : addedToCallListAts   *********",
									"  pm.test(\"Assert Type of addedToCallListAt\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.addedToCallListAt).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of addedToCallListAt\"+j, function () {",
									"",
									"        if (typeof jsonValue.addedToCallListAt === typeof pm.environment.get(\"addedToCallListAt\")) {",
									"          pm.expect(pm.environment.get(\"addedToCallListAt\")).to.eql(jsonValue.addedToCallListAt);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.addedToCallListAt, pm.environment.get(\"addedToCallListAt\"), function () { });",
									"",
									"          var conaddedToCallListAt = conversionData;",
									"          pm.expect(jsonValue.addedToCallListAt).to.eql(conaddedToCallListAt);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"",
									"",
									"//*******Assertion of Key : contextTypeIds   *********",
									"  pm.test(\"Assert Type of contextTypeId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.contextTypeId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of contextTypeId\"+j, function () {",
									"",
									"        if (typeof jsonValue.contextTypeId === typeof data['contextTypeId'+j]) {",
									"          pm.expect(data['contextTypeId'+j]).to.eql(jsonValue.contextTypeId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.contextTypeId, data['contextTypeId'+j], function () { });",
									"",
									"          var concontextTypeId = conversionData;",
									"          pm.expect(jsonValue.contextTypeId).to.eql(concontextTypeId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : geoMobilityNotess   *********",
									"  pm.test(\"Assert Type of geoMobilityNotes\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.geoMobilityNotes).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of geoMobilityNotes\"+j, function () {",
									"",
									"        if (typeof jsonValue.geoMobilityNotes === typeof data['geoMobilityNotes'+j]) {",
									"          pm.expect(data['geoMobilityNotes'+j]).to.eql(jsonValue.geoMobilityNotes);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.geoMobilityNotes, data['geoMobilityNotes'+j], function () { });",
									"",
									"          var congeoMobilityNotes = conversionData;",
									"          pm.expect(jsonValue.geoMobilityNotes).to.eql(congeoMobilityNotes);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : birthdays   *********",
									"  pm.test(\"Assert Type of birthday\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.birthday).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of birthday\"+j, function () {",
									"",
									"        if (typeof jsonValue.birthday === typeof data['birthday'+j]) {",
									"          pm.expect(data['birthday'+j]).to.eql(jsonValue.birthday);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.birthday, data['birthday'+j], function () { });",
									"",
									"          var conbirthday = conversionData;",
									"          pm.expect(jsonValue.birthday).to.eql(conbirthday);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : principalNationalityIds   *********",
									"  pm.test(\"Assert Type of principalNationalityId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.principalNationalityId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of principalNationalityId\"+j, function () {",
									"",
									"        if (typeof jsonValue.principalNationalityId === typeof data['principalNationalityId'+j]) {",
									"          pm.expect(data['principalNationalityId'+j]).to.eql(jsonValue.principalNationalityId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.principalNationalityId, data['principalNationalityId'+j], function () { });",
									"",
									"          var conprincipalNationalityId = conversionData;",
									"          pm.expect(jsonValue.principalNationalityId).to.eql(conprincipalNationalityId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//Launguages assertions:",
									"for(var s=0;s<jsonValue.languages.length;s++){",
									"//*******Assertion of Key : languageIds   *********",
									"  pm.test(\"Assert Type of languageId\"+j+s, function () {",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].languageId).to.be.eql(data['typeOfString']);",
									"   ",
									"    if (testResult) {",
									"      pm.test(\"Assert value of languageId\"+j+s, function () {",
									"",
									"        if (typeof jsonValue.languages[s].languageId === typeof data['languages_languageId'+j+s]) {",
									"          pm.expect(data['languages_languageId'+j+s]).to.eql(jsonValue.languages[s].languageId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.languages[s].languageId, data['languages_languageId'+j+s], function () { });",
									"",
									"          var conlanguageId = conversionData;",
									"          pm.expect(jsonValue.languages[s].languageId).to.eql(conlanguageId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : fluencyIds   *********",
									"  pm.test(\"Assert Type of fluencyId\"+j+s, function () {",
									"    var testResult = pm.expect(typeof jsonValue.languages[s].fluencyId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of fluencyId\"+j+s, function () {",
									"",
									"        if (typeof jsonValue.languages[s].fluencyId === typeof data['languages_fluencyId'+j+s]) {",
									"          pm.expect(data['languages_fluencyId'+j+s]).to.eql(jsonValue.languages[s].fluencyId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.languages[s].fluencyId, data['languages_fluencyId'+j+s], function () { });",
									"",
									"          var confluencyId = conversionData;",
									"          pm.expect(jsonValue.languages[s].fluencyId).to.eql(confluencyId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"",
									"//*******Assertion of Key : homeCountryIds   *********",
									"  pm.test(\"Assert Type of homeCountryId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.homeCountryId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of homeCountryId\"+j, function () {",
									"",
									"        if (typeof jsonValue.homeCountryId === typeof data['homeCountryId'+j]) {",
									"          pm.expect(data['homeCountryId'+j]).to.eql(jsonValue.homeCountryId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.homeCountryId, data['homeCountryId'+j], function () { });",
									"",
									"          var conhomeCountryId = conversionData;",
									"          pm.expect(jsonValue.homeCountryId).to.eql(conhomeCountryId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : maritalStatusIds   *********",
									"  pm.test(\"Assert Type of maritalStatusId\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.maritalStatusId).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of maritalStatusId\"+j, function () {",
									"",
									"        if (typeof jsonValue.maritalStatusId === typeof data['maritalStatusId'+j]) {",
									"          pm.expect(data['maritalStatusId'+j]).to.eql(jsonValue.maritalStatusId);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.maritalStatusId, data['maritalStatusId'+j], function () { });",
									"",
									"          var conmaritalStatusId = conversionData;",
									"          pm.expect(jsonValue.maritalStatusId).to.eql(conmaritalStatusId);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : spouseNames   *********",
									"  pm.test(\"Assert Type of spouseName\"+j, function () {",
									"    if(jsonValue.spouseName===null){",
									"        var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfObject']);",
									"    }else{",
									"    var testResult = pm.expect(typeof jsonValue.spouseName).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of spouseName\"+j, function () {",
									"",
									"        if (typeof jsonValue.spouseName === typeof data['spouseName'+j]) {",
									"          pm.expect(data['spouseName'+j]).to.eql(jsonValue.spouseName);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.spouseName, data['spouseName'+j], function () { });",
									"",
									"          var conspouseName = conversionData;",
									"          pm.expect(jsonValue.spouseName).to.eql(conspouseName);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  }",
									"  });",
									"",
									"",
									"//*******Assertion of Key : childrens   *********",
									"  pm.test(\"Assert Type of children\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.children).to.be.eql(data['typeOfString']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of children\"+j, function () {",
									"",
									"        if (typeof jsonValue.children === typeof data['children'+j]) {",
									"          pm.expect(data['children'+j]).to.eql(jsonValue.children);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.children, data['children'+j], function () { });",
									"",
									"          var conchildren = conversionData;",
									"          pm.expect(jsonValue.children).to.eql(conchildren);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : whoKnowsBests   *********",
									"  pm.test(\"Assert Type of whoKnowsBest\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.whoKnowsBest).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of whoKnowsBest\"+j, function () {",
									"",
									"        if (typeof jsonValue.whoKnowsBest === typeof data['whoKnowsBest'+j]) {",
									"          pm.expect(data['whoKnowsBest'+j]).to.eql(jsonValue.whoKnowsBest);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.whoKnowsBest, data['whoKnowsBest'+j], function () { });",
									"",
									"          var conwhoKnowsBest = conversionData;",
									"          pm.expect(jsonValue.whoKnowsBest).to.eql(conwhoKnowsBest);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"",
									"//*******Assertion of Key : relationshipss   *********",
									"  pm.test(\"Assert Type of relationships\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.relationships).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of relationships\"+j, function () {",
									"",
									"        if (typeof jsonValue.relationships === typeof data['relationships'+j]) {",
									"          pm.expect(data['relationships'+j]).to.eql(jsonValue.relationships);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.relationships, data['relationships'+j], function () { });",
									"",
									"          var conrelationships = conversionData;",
									"          pm.expect(jsonValue.relationships).to.eql(conrelationships);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"  ",
									"//*******Assertion of Key : assignmentIdss   *********",
									"for(var v=0;v<jsonValue.assignmentIds.length;v++){",
									"",
									"  pm.test(\"Assert Type of assignmentIds\"+j, function () {",
									"    var testResult = pm.expect(typeof jsonValue.assignmentIds).to.be.eql(data['typeOfObject']);",
									"",
									"    if (testResult) {",
									"      pm.test(\"Assert value of assignmentIds\"+j, function () {",
									"",
									"        if (typeof jsonValue.assignmentIds[v] === typeof data['assignmentIds'+v]) {",
									"          pm.expect(data['assignmentIds'+v]).to.eql(jsonValue.assignmentIds[v]);",
									"",
									"        }",
									"        else {",
									"          valCallBack(jsonValue.assignmentIds[v], data['assignmentIds'+j], function () { });",
									"",
									"          var conassignmentIds = conversionData;",
									"          pm.expect(jsonValue.assignmentIds[v]).to.eql(conassignmentIds);",
									"        }",
									"      });",
									"    }",
									"    else { postman.setNextRequest(); }",
									"  });",
									"}",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "deviceId",
								"value": "null",
								"type": "text"
							},
							{
								"key": "userId",
								"value": "kulshi",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "{{Auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"personId\": \"{{peopleId}}\",\r\n    \"entityTypeId\": \"{{entiyTypeId}}\",\r\n    \"entityId\": \"{{entityId}}\"\r\n  }\r\n] ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}.json/call-list",
							"host": [
								"{{url}}",
								"json"
							],
							"path": [
								"call-list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OneStepAuth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var r1=\"Bearer\";\r",
							"var jsondata=pm.response.json();\r",
							"var r2=jsondata.access_token;\r",
							"\r",
							"var r3=r1.concat(\" \");\r",
							"var r4=r3.concat(r2);\r",
							"console.log(r4);\r",
							"pm.globals.set(\"Auth\",r4);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "baa17478-08f0-41cc-a992-fdbe1b05ec1e",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "Z1S.z_xYgFu52q_z2JJmMXX1binV-o-vPr",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "https://ompoc.egonzehnder.com/v6",
							"type": "text"
						},
						{
							"key": "resource",
							"value": "baa17478-08f0-41cc-a992-fdbe1b05ec1e",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://login.microsoftonline.com/4eea6844-62c2-4421-8b17-472c57875f31/oauth2/token",
					"protocol": "https",
					"host": [
						"login",
						"microsoftonline",
						"com"
					],
					"path": [
						"4eea6844-62c2-4421-8b17-472c57875f31",
						"oauth2",
						"token"
					],
					"query": [
						{
							"key": "response_type",
							"value": "code",
							"disabled": true
						},
						{
							"key": "response_mode",
							"value": "query",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET_Retrieve Candidate Key",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Auth}}",
						"type": "text"
					},
					{
						"key": "userId",
						"value": "{{userId}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/assignments?ids=25049",
					"host": [
						"{{url}}"
					],
					"path": [
						"assignments"
					],
					"query": [
						{
							"key": "ids",
							"value": "25049"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"    var jsonData= pm.response.json();",
					"    var request_method = pm.request.method;",
					"",
					"",
					"    //Check Status as per request method",
					"    response_status={",
					"        \"responsestat_200\":200,",
					"        \"responsestat_201\":201,",
					"        \"responsestat_401\":401",
					"        ",
					"    };",
					"",
					"    if(request_method === \"GET\"){",
					"        pm.test(\"API call successful : Access token Created\", function(){",
					"            pm.response.to.have.status(200);",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"        } )",
					"    }else if(request_method === \"POST\"){",
					"        pm.test(\"API call successful : Access token Created\", function(){",
					"            pm.response.to.have.status(201);",
					"            pm.response.to.not.be.error;",
					"            pm.response.to.be.withBody;",
					"            pm.response.to.be.json;",
					"        } )",
					"    }",
					"    //Check if Response time is lesser than 1000",
					"",
					"    pm.test(\"Response Time to be less 1000ms\" , function(){",
					"        pm.expect(pm.response.responseTime).to.be.below(10900);",
					"    })",
					"",
					"",
					"    //Content-Type in Response Header",
					"    pm.test(\"Content type is present and its value is\" , function(){",
					"        pm.response.to.have.header(\"Content-Type\");",
					"    pm.response.headers.get(\"Content-Type\" , \"application/json\");",
					"        ",
					"        ",
					"    });",
					"    // //User in Header",
					"    // pm.test(\"user is present and its value is\" , function(){",
					"    //     pm.response.to.have.header(\"user\");",
					"    // pm.response.headers.get(\"user\" , \"kulshi\");",
					"        ",
					"        ",
					"    // });",
					"    //Persistent-Auth in Header",
					"    // pm.test(\"Persistent-Auth is present and its value is\" , function(){",
					"    //     pm.response.to.have.header(\"Persistent-Auth\");",
					"    // pm.response.headers.get(\"Persistent-Auth\" , \"true\");",
					"        ",
					"        ",
					"    // });",
					"",
					"    //Date is present in Header",
					"    pm.test(\"Date is present in the header\", function () {",
					"        jsondata=responseHeaders.hasOwnProperty(\"Date\");",
					"        console.log('Type for the header Date is', typeof jsondata);",
					"        ",
					"    });",
					"    if(jsondata === true){",
					"    console.log(pm.response.headers.get('Date'));",
					"    }",
					"    else{",
					"        console.log(\"Sorry No date found\");",
					"    }",
					"    //token in response header",
					"    pm.test(\"token in the Response Header\", function(){",
					"        jsondata=responseHeaders.hasOwnProperty(\"token\");",
					"    ",
					"    })",
					"    //Content-Length in the response header",
					"    pm.test(\"Content-Length in the response header\", function () {",
					"        jsondata=responseHeaders.hasOwnProperty(\"Content-Length\");",
					"        ",
					"        ",
					"    });",
					"    if(jsondata === true){",
					"    console.log(pm.response.headers.get('Content-Length'));",
					"    }",
					"    else{",
					"        console.log(\"Sorry No Content-Length found\");",
					"    }",
					"    if(request_method === \"POST\"){",
					"        var reqBody = request.data;",
					"    console.log(reqBody);",
					"    var jsonData=pm.response.json();",
					"",
					"",
					"",
					"",
					"    pm.test(\"Assert Succcess Post Response\", function(){",
					"        if(jsonData['status']){",
					"        pm.expect (jsonData.status).to.be.oneOf([\"Success\",true]) ;",
					"        ",
					"        }",
					"        else if(jsonData['statusCount']){",
					"        pm.expect (jsonData.statusCount).to.be.oneOf([0,1,2,3,4,5,6,7,8,9])",
					"        ",
					"        }",
					"        ",
					"            ",
					"        ",
					"        else{",
					"            pm.response.to.be.withBody;",
					"        }",
					"    })",
					"",
					"    pm.test(\"Asert Request Body Not Null\", function(){",
					"    pm.expect(reqBody).to.not.be.empty;",
					"    })",
					"",
					"    }",
					"    if(request_method === \"DELETE\"){",
					"        ",
					"    var jsonData = pm.response.json();",
					"    pm.test(\"Assert Succcess DELETE Response  ID \", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"",
					"    pm.test(\"Asert Request Body Not Null\", function(){",
					"    pm.expect(jsonData).to.be.eql(1);",
					"    })",
					"",
					"",
					"    }",
					"",
					"",
					"else {",
					"    pm.test.skip()",
					"}",
					"",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Authorization",
			"value": "{{Auth}}"
		},
		{
			"key": "userId",
			"value": "{{userid}}"
		},
		{
			"key": "cvId",
			"value": "7740"
		},
		{
			"key": "documentId",
			"value": "43917"
		},
		{
			"key": "peopleId",
			"value": "10465"
		},
		{
			"key": "documentsIds",
			"value": "43917,43918,43919"
		},
		{
			"key": "cvIds",
			"value": "7740,7739"
		}
	]
}